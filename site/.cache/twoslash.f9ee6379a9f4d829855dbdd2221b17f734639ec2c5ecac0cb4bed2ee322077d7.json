"{\"value\":{\"code\":\"import { parseAbiItem } from 'viem'\\n\\nconst filter = await publicClient.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\\n})\\nconst logs = await publicClient.getFilterLogs({ filter })\\n\\nlogs[0].args\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbiItem<signature extends string | readonly string[] | readonly unknown[]>(signature: Narrow<signature> & ((signature extends string ? string extends signature ? unknown : Signature<signature> : never) | (signature extends readonly string[] ? signature extends readonly [] ? Error<\\\"At least one signature required.\\\"> : string[] extends signature ? unknown : Signatures<signature> : never))): ParseAbiItem<signature>\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":9,\"length\":12,\"target\":\"parseAbiItem\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    ... 6 more ...;\\n    strict: undefined;\\n}\",\"start\":43,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":58,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createEventFilter: <{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, [...], undefined, undefined, undefined, \\\"Transfer\\\", undefined>(args?: CreateEventFilterParameters<...> | undefined) => Promise<...>\",\"docs\":\"Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createEventFilter\\n- JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\",\"tags\":[[\"param\",\"args - {@link CreateEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\\n})\"]],\"start\":71,\"length\":17,\"target\":\"createEventFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address?: `0x${string}` | `0x${string}`[] | undefined\",\"start\":93,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) event: {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}\",\"start\":150,\"length\":5,\"target\":\"event\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbiItem<\\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\">(signature: \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"): {\\n    ...;\\n}\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":157,\"length\":12,\"target\":\"parseAbiItem\",\"line\":4,\"character\":9},{\"type\":\"hover\",\"text\":\"const logs: GetFilterLogsReturnType<[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>\",\"start\":255,\"length\":4,\"target\":\"logs\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":268,\"length\":12,\"target\":\"publicClient\",\"line\":6,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterLogs: <[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>(args: GetFilterLogsParameters<...>) => Promise<...>\",\"docs\":\"Returns a list of event logs since the filter was created.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterLogs\\n- JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\",\"tags\":[[\"remarks\",\"`getFilterLogs` is only compatible with **event filters**.\"],[\"param\",\"args - {@link GetFilterLogsParameters}\"],[\"returns\",\"A list of event logs. {@link GetFilterLogsReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterLogs({ filter })\"]],\"start\":281,\"length\":13,\"target\":\"getFilterLogs\",\"line\":6,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], ... 4 more ..., undefined>\",\"start\":297,\"length\":6,\"target\":\"filter\",\"line\":6,\"character\":48},{\"type\":\"hover\",\"text\":\"const logs: GetFilterLogsReturnType<[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>\",\"start\":308,\"length\":4,\"target\":\"logs\",\"line\":8,\"character\":0},{\"type\":\"hover\",\"text\":\"(property) args: {\\n    from?: `0x${string}` | undefined;\\n    to?: `0x${string}` | undefined;\\n    value?: bigint | undefined;\\n}\",\"start\":316,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":8},{\"type\":\"query\",\"text\":\"(property) args: {\\n    from?: `0x${string}` | undefined;\\n    to?: `0x${string}` | undefined;\\n    value?: bigint | undefined;\\n}\",\"start\":316,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":8}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[512,523],[0,191]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n// ---cut---\\nimport { parseAbiItem } from 'viem'\\n\\nconst filter = await publicClient.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed from, address indexed to, uint256 value)'),\\n})\\nconst logs = await publicClient.getFilterLogs({ filter })\\n\\nlogs[0].args\\n//      ^?\\n\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[507],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[{\"type\":\"query\",\"text\":\"(property) args: {\\n    from?: `0x${string}` | undefined;\\n    to?: `0x${string}` | undefined;\\n    value?: bigint | undefined;\\n}\",\"start\":316,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":8}],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbiItem<signature extends string | readonly string[] | readonly unknown[]>(signature: Narrow<signature> & ((signature extends string ? string extends signature ? unknown : Signature<signature> : never) | (signature extends readonly string[] ? signature extends readonly [] ? Error<\\\"At least one signature required.\\\"> : string[] extends signature ? unknown : Signatures<signature> : never))): ParseAbiItem<signature>\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":9,\"length\":12,\"target\":\"parseAbiItem\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    ... 6 more ...;\\n    strict: undefined;\\n}\",\"start\":43,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":58,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createEventFilter: <{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, [...], undefined, undefined, undefined, \\\"Transfer\\\", undefined>(args?: CreateEventFilterParameters<...> | undefined) => Promise<...>\",\"docs\":\"Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createEventFilter\\n- JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\",\"tags\":[[\"param\",\"args - {@link CreateEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\\n})\"]],\"start\":71,\"length\":17,\"target\":\"createEventFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address?: `0x${string}` | `0x${string}`[] | undefined\",\"start\":93,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) event: {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}\",\"start\":150,\"length\":5,\"target\":\"event\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbiItem<\\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\">(signature: \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"): {\\n    ...;\\n}\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":157,\"length\":12,\"target\":\"parseAbiItem\",\"line\":4,\"character\":9},{\"type\":\"hover\",\"text\":\"const logs: GetFilterLogsReturnType<[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>\",\"start\":255,\"length\":4,\"target\":\"logs\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":268,\"length\":12,\"target\":\"publicClient\",\"line\":6,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterLogs: <[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>(args: GetFilterLogsParameters<...>) => Promise<...>\",\"docs\":\"Returns a list of event logs since the filter was created.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterLogs\\n- JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\",\"tags\":[[\"remarks\",\"`getFilterLogs` is only compatible with **event filters**.\"],[\"param\",\"args - {@link GetFilterLogsParameters}\"],[\"returns\",\"A list of event logs. {@link GetFilterLogsReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterLogs({ filter })\"]],\"start\":281,\"length\":13,\"target\":\"getFilterLogs\",\"line\":6,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], ... 4 more ..., undefined>\",\"start\":297,\"length\":6,\"target\":\"filter\",\"line\":6,\"character\":48},{\"type\":\"hover\",\"text\":\"const logs: GetFilterLogsReturnType<[{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"from\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"to\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>\",\"start\":308,\"length\":4,\"target\":\"logs\",\"line\":8,\"character\":0},{\"type\":\"hover\",\"text\":\"(property) args: {\\n    from?: `0x${string}` | undefined;\\n    to?: `0x${string}` | undefined;\\n    value?: bigint | undefined;\\n}\",\"start\":316,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":8}],\"tags\":[]}}"
