"{\"value\":{\"code\":\"import { createPublicClient, http, parseEther } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst owner = privateKeyToAccount('0x...')\\n\\nconst account = await toCoinbaseSmartAccount({ \\n  client, \\n  owners: [owner],\\n  version: '1.1',\\n}) \\n\\nconst bundlerClient = createBundlerClient({\\n  account, // [!code ++]\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\\n\\nconst hash = await bundlerClient.sendUserOperation({\\n  account, // [!code --]\\n  calls: [{\\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n    value: parseEther('0.001')\\n  }]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function createPublicClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: PublicClientConfig<transport, chain, accountOrAddress, rpcSchema>): PublicClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createPublicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":35,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(alias) function createBundlerClient<transport extends Transport, chain extends Chain | undefined = undefined, account extends SmartAccount | undefined = undefined, client extends Client | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: BundlerClientConfig<transport, chain, account, client, rpcSchema>): BundlerClient<transport, chain, account, client, rpcSchema>\\nimport createBundlerClient\",\"docs\":\"Creates a Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/account-abstraction/clients/bundler\",\"tags\":[[\"param\",\"config - {@link BundlerClientConfig}\"],[\"returns\",\"A Bundler Client. {@link BundlerClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { createBundlerClient } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\"]],\"start\":69,\"length\":19,\"target\":\"createBundlerClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n  version: '1.1',\\n})\"]],\"start\":90,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":1,\"character\":30},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}\\nimport mainnet\",\"start\":156,\"length\":7,\"target\":\"mainnet\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":194,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":245,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPublicClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 13 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}, undefined, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":254,\"length\":18,\"target\":\"createPublicClient\",\"line\":5,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":277,\"length\":5,\"target\":\"chain\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}\\nimport mainnet\",\"start\":284,\"length\":7,\"target\":\"mainnet\",\"line\":6,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":295,\"length\":9,\"target\":\"transport\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false>): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":306,\"length\":4,\"target\":\"http\",\"line\":7,\"character\":13},{\"type\":\"hover\",\"text\":\"const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":324,\"length\":5,\"target\":\"owner\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":332,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":10,\"character\":14},{\"type\":\"hover\",\"text\":\"const account: ToCoinbaseSmartAccountReturnType\",\"start\":368,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n  version: '1.1',\\n})\"]],\"start\":384,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":12,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":412,\"length\":6,\"target\":\"client\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: readonly (`0x${string}` | OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | WebAuthnAccount>)[]\",\"start\":423,\"length\":6,\"target\":\"owners\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":432,\"length\":5,\"target\":\"owner\",\"line\":14,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) version: \\\"1.1\\\" | \\\"1\\\"\",\"start\":442,\"length\":7,\"target\":\"version\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\",\"start\":469,\"length\":13,\"target\":\"bundlerClient\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createBundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    ...;\\n}, undefined>(parameters: BundlerClientConfig<...>): BundlerClient<...>\\nimport createBundlerClient\",\"docs\":\"Creates a Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/account-abstraction/clients/bundler\",\"tags\":[[\"param\",\"config - {@link BundlerClientConfig}\"],[\"returns\",\"A Bundler Client. {@link BundlerClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { createBundlerClient } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\"]],\"start\":485,\"length\":19,\"target\":\"createBundlerClient\",\"line\":18,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n} | undefined\",\"docs\":\"The Account to use for the Client. This will be used for Actions that require an account as an argument.\",\"start\":509,\"length\":7,\"target\":\"account\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) client?: Client | {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n} | undefined\",\"docs\":\"Client that points to an Execution RPC URL.\",\"start\":534,\"length\":6,\"target\":\"client\",\"line\":20,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":544,\"length\":9,\"target\":\"transport\",\"line\":21,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false>): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":555,\"length\":4,\"target\":\"http\",\"line\":21,\"character\":13},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":609,\"length\":4,\"target\":\"hash\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\",\"start\":622,\"length\":13,\"target\":\"bundlerClient\",\"line\":24,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendUserOperation: <[{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}>(parameters: SendUserOperationParameters<...>) => Promise<SendUserOperationReturnType>\",\"docs\":\"Broadcasts a User Operation to the Bundler.\\n\\n- Docs: https://viem.sh/actions/bundler/sendUserOperation\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SendUserOperationParameters}\"],[\"returns\",\"The User Operation hash. {@link SendUserOperationReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.sendUserOperation({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":636,\"length\":17,\"target\":\"sendUserOperation\",\"line\":24,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: SmartAccount | {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n} | undefined\",\"start\":658,\"length\":7,\"target\":\"account\",\"line\":25,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":683,\"length\":5,\"target\":\"calls\",\"line\":26,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":697,\"length\":2,\"target\":\"to\",\"line\":27,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":751,\"length\":5,\"target\":\"value\",\"line\":28,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":758,\"length\":10,\"target\":\"parseEther\",\"line\":28,\"character\":11}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createPublicClient, http, parseEther } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst owner = privateKeyToAccount('0x...')\\n\\nconst account = await toCoinbaseSmartAccount({ \\n  client, \\n  owners: [owner],\\n  version: '1.1',\\n}) \\n\\nconst bundlerClient = createBundlerClient({\\n  account, // [!code ++]\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\\n\\nconst hash = await bundlerClient.sendUserOperation({\\n  account, // [!code --]\\n  calls: [{\\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n    value: parseEther('0.001')\\n  }]\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function createPublicClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: PublicClientConfig<transport, chain, accountOrAddress, rpcSchema>): PublicClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createPublicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":35,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(alias) function createBundlerClient<transport extends Transport, chain extends Chain | undefined = undefined, account extends SmartAccount | undefined = undefined, client extends Client | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: BundlerClientConfig<transport, chain, account, client, rpcSchema>): BundlerClient<transport, chain, account, client, rpcSchema>\\nimport createBundlerClient\",\"docs\":\"Creates a Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/account-abstraction/clients/bundler\",\"tags\":[[\"param\",\"config - {@link BundlerClientConfig}\"],[\"returns\",\"A Bundler Client. {@link BundlerClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { createBundlerClient } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\"]],\"start\":69,\"length\":19,\"target\":\"createBundlerClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n  version: '1.1',\\n})\"]],\"start\":90,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":1,\"character\":30},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}\\nimport mainnet\",\"start\":156,\"length\":7,\"target\":\"mainnet\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":194,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":245,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPublicClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 13 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}, undefined, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":254,\"length\":18,\"target\":\"createPublicClient\",\"line\":5,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":277,\"length\":5,\"target\":\"chain\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    blockTime?: number | undefined | undefined;\\n    ... 12 more ...;\\n    serializers?: ChainSerializers<...> | undefined;\\n}\\nimport mainnet\",\"start\":284,\"length\":7,\"target\":\"mainnet\",\"line\":6,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":295,\"length\":9,\"target\":\"transport\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false>): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":306,\"length\":4,\"target\":\"http\",\"line\":7,\"character\":13},{\"type\":\"hover\",\"text\":\"const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":324,\"length\":5,\"target\":\"owner\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":332,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":10,\"character\":14},{\"type\":\"hover\",\"text\":\"const account: ToCoinbaseSmartAccountReturnType\",\"start\":368,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n  version: '1.1',\\n})\"]],\"start\":384,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":12,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":412,\"length\":6,\"target\":\"client\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: readonly (`0x${string}` | OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | WebAuthnAccount>)[]\",\"start\":423,\"length\":6,\"target\":\"owners\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":432,\"length\":5,\"target\":\"owner\",\"line\":14,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) version: \\\"1.1\\\" | \\\"1\\\"\",\"start\":442,\"length\":7,\"target\":\"version\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\",\"start\":469,\"length\":13,\"target\":\"bundlerClient\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createBundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    ...;\\n}, undefined>(parameters: BundlerClientConfig<...>): BundlerClient<...>\\nimport createBundlerClient\",\"docs\":\"Creates a Bundler Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/account-abstraction/clients/bundler\",\"tags\":[[\"param\",\"config - {@link BundlerClientConfig}\"],[\"returns\",\"A Bundler Client. {@link BundlerClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { createBundlerClient } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\"]],\"start\":485,\"length\":19,\"target\":\"createBundlerClient\",\"line\":18,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n} | undefined\",\"docs\":\"The Account to use for the Client. This will be used for Actions that require an account as an argument.\",\"start\":509,\"length\":7,\"target\":\"account\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) client?: Client | {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n} | undefined\",\"docs\":\"Client that points to an Execution RPC URL.\",\"start\":534,\"length\":6,\"target\":\"client\",\"line\":20,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":544,\"length\":9,\"target\":\"transport\",\"line\":21,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false>): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":555,\"length\":4,\"target\":\"http\",\"line\":21,\"character\":13},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":609,\"length\":4,\"target\":\"hash\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\",\"start\":622,\"length\":13,\"target\":\"bundlerClient\",\"line\":24,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendUserOperation: <[{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n}>(parameters: SendUserOperationParameters<...>) => Promise<SendUserOperationReturnType>\",\"docs\":\"Broadcasts a User Operation to the Bundler.\\n\\n- Docs: https://viem.sh/actions/bundler/sendUserOperation\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SendUserOperationParameters}\"],[\"returns\",\"The User Operation hash. {@link SendUserOperationReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.sendUserOperation({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":636,\"length\":17,\"target\":\"sendUserOperation\",\"line\":24,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: SmartAccount | {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            ...;\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 19 more ...;\\n    type: \\\"smart\\\";\\n} | {\\n    ...;\\n} | undefined\",\"start\":658,\"length\":7,\"target\":\"account\",\"line\":25,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":683,\"length\":5,\"target\":\"calls\",\"line\":26,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":697,\"length\":2,\"target\":\"to\",\"line\":27,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":751,\"length\":5,\"target\":\"value\",\"line\":28,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":758,\"length\":10,\"target\":\"parseEther\",\"line\":28,\"character\":11}],\"tags\":[]}}"
