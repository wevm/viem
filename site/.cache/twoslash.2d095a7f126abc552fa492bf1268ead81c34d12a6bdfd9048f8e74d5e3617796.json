"{\"value\":{\"code\":\"import { rpcSchema } from 'viem'\\n\\ntype CustomRpcSchema = [{ // [!code focus]\\n  Method: 'eth_wagmi', // [!code focus]\\n  Parameters: [string] // [!code focus]\\n  ReturnType: string // [!code focus]\\n}] // [!code focus]\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  rpcSchema: rpcSchema<CustomRpcSchema>(), // [!code focus]\\n  transport: http(),\\n})\\n\\nconst result = await publicClient.request({ // [!code focus]\\n  method: 'eth_wa // [!code focus] \\n  params: ['hello'], // [!code focus]\\n}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":9,\"length\":9,\"target\":\"rpcSchema\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":39,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":2,\"character\":5},{\"type\":\"hover\",\"text\":\"(property) Method: \\\"eth_wagmi\\\"\",\"start\":79,\"length\":6,\"target\":\"Method\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) Parameters: [string]\",\"start\":119,\"length\":10,\"target\":\"Parameters\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) ReturnType: string\",\"start\":159,\"length\":10,\"target\":\"ReturnType\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":222,\"length\":12,\"target\":\"publicClient\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPublicClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, CustomRpcSchema>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":237,\"length\":18,\"target\":\"createPublicClient\",\"line\":8,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) chain?: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | Chain | undefined\",\"docs\":\"Chain for the client.\",\"start\":260,\"length\":5,\"target\":\"chain\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":267,\"length\":7,\"target\":\"mainnet\",\"line\":9,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) rpcSchema?: CustomRpcSchema | undefined\",\"docs\":\"Typed JSON-RPC schema for the client.\",\"start\":278,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) rpcSchema<CustomRpcSchema>(): CustomRpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":289,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":13},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":299,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":10,\"character\":23},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":338,\"length\":9,\"target\":\"transport\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":349,\"length\":4,\"target\":\"http\",\"line\":11,\"character\":13},{\"type\":\"hover\",\"text\":\"const result: string | boolean | `0x${string}`[] | {\\n    accessList: AccessList;\\n    gasUsed: Quantity;\\n} | RpcFeeHistory | RpcBlock | RpcLog[] | ... 5 more ... | null\",\"start\":367,\"length\":6,\"target\":\"result\",\"line\":14,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":382,\"length\":12,\"target\":\"publicClient\",\"line\":14,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) request: <undefined, {\\n    method: \\\"web3_clientVersion\\\";\\n    params?: undefined | undefined;\\n} | {\\n    method: \\\"web3_sha3\\\";\\n    params: [data: `0x${string}`];\\n} | {\\n    method: \\\"net_listening\\\";\\n    params?: undefined | undefined;\\n} | {\\n    method: \\\"net_peerCount\\\";\\n    params?: undefined | undefined;\\n} | ... 38 more ... | {\\n    ...;\\n}, string | ... 11 more ... | null>(args: {\\n    method: \\\"web3_clientVersion\\\";\\n    params?: undefined | undefined;\\n} | ... 41 more ... | {\\n    ...;\\n}, options?: EIP1193RequestOptions | undefined) => Promise<...>\",\"docs\":\"Request function wrapped with friendly error handling\",\"start\":395,\"length\":7,\"target\":\"request\",\"line\":14,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) method: \\\"eth_wa // [!code focus] \\\"\",\"start\":424,\"length\":6,\"target\":\"method\",\"line\":15,\"character\":2},{\"type\":\"completion\",\"start\":439,\"length\":0,\"completions\":[{\"name\":\"eth_wagmi\",\"kindModifiers\":\"\",\"kind\":\"string\",\"sortText\":\"11\",\"replacementSpan\":{\"start\":545,\"length\":5},\"commitCharacters\":[]}],\"completionsPrefix\":\"eth_wa\",\"line\":15,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) params: [\\\"hello\\\"]\",\"start\":460,\"length\":6,\"target\":\"params\",\"line\":16,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[570,590],[0,112]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":86,\"end\":99}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n// @noErrors\\n// ---cut---\\nimport { rpcSchema } from 'viem'\\n\\ntype CustomRpcSchema = [{ // [!code focus]\\n  Method: 'eth_wagmi', // [!code focus]\\n  Parameters: [string] // [!code focus]\\n  ReturnType: string // [!code focus]\\n}] // [!code focus]\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  rpcSchema: rpcSchema<CustomRpcSchema>(), // [!code focus]\\n  transport: http(),\\n})\\n\\nconst result = await publicClient.request({ // [!code focus]\\n  method: 'eth_wa // [!code focus] \\n//               ^|\\n  params: ['hello'], // [!code focus]\\n}) // [!code focus]\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[551],\"positionHighlights\":[]},\"queries\":[],\"completions\":[{\"type\":\"completion\",\"start\":439,\"length\":0,\"completions\":[{\"name\":\"eth_wagmi\",\"kindModifiers\":\"\",\"kind\":\"string\",\"sortText\":\"11\",\"replacementSpan\":{\"start\":545,\"length\":5},\"commitCharacters\":[]}],\"completionsPrefix\":\"eth_wa\",\"line\":15,\"character\":17}],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":9,\"length\":9,\"target\":\"rpcSchema\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":39,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":2,\"character\":5},{\"type\":\"hover\",\"text\":\"(property) Method: \\\"eth_wagmi\\\"\",\"start\":79,\"length\":6,\"target\":\"Method\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) Parameters: [string]\",\"start\":119,\"length\":10,\"target\":\"Parameters\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) ReturnType: string\",\"start\":159,\"length\":10,\"target\":\"ReturnType\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":222,\"length\":12,\"target\":\"publicClient\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPublicClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, CustomRpcSchema>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createPublicClient\",\"docs\":\"Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/public\\n\\nA Public Client is an interface to \\\"public\\\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\",\"tags\":[[\"param\",\"config - {@link PublicClientConfig}\"],[\"returns\",\"A Public Client. {@link PublicClient}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":237,\"length\":18,\"target\":\"createPublicClient\",\"line\":8,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) chain?: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | Chain | undefined\",\"docs\":\"Chain for the client.\",\"start\":260,\"length\":5,\"target\":\"chain\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":267,\"length\":7,\"target\":\"mainnet\",\"line\":9,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) rpcSchema?: CustomRpcSchema | undefined\",\"docs\":\"Typed JSON-RPC schema for the client.\",\"start\":278,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) rpcSchema<CustomRpcSchema>(): CustomRpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":289,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":13},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":299,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":10,\"character\":23},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":338,\"length\":9,\"target\":\"transport\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":349,\"length\":4,\"target\":\"http\",\"line\":11,\"character\":13},{\"type\":\"hover\",\"text\":\"const result: string | boolean | `0x${string}`[] | {\\n    accessList: AccessList;\\n    gasUsed: Quantity;\\n} | RpcFeeHistory | RpcBlock | RpcLog[] | ... 5 more ... | null\",\"start\":367,\"length\":6,\"target\":\"result\",\"line\":14,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":382,\"length\":12,\"target\":\"publicClient\",\"line\":14,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) request: <undefined, {\\n    method: \\\"web3_clientVersion\\\";\\n    params?: undefined | undefined;\\n} | {\\n    method: \\\"web3_sha3\\\";\\n    params: [data: `0x${string}`];\\n} | {\\n    method: \\\"net_listening\\\";\\n    params?: undefined | undefined;\\n} | {\\n    method: \\\"net_peerCount\\\";\\n    params?: undefined | undefined;\\n} | ... 38 more ... | {\\n    ...;\\n}, string | ... 11 more ... | null>(args: {\\n    method: \\\"web3_clientVersion\\\";\\n    params?: undefined | undefined;\\n} | ... 41 more ... | {\\n    ...;\\n}, options?: EIP1193RequestOptions | undefined) => Promise<...>\",\"docs\":\"Request function wrapped with friendly error handling\",\"start\":395,\"length\":7,\"target\":\"request\",\"line\":14,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) method: \\\"eth_wa // [!code focus] \\\"\",\"start\":424,\"length\":6,\"target\":\"method\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) params: [\\\"hello\\\"]\",\"start\":460,\"length\":6,\"target\":\"params\",\"line\":16,\"character\":2}],\"tags\":[]}}"
