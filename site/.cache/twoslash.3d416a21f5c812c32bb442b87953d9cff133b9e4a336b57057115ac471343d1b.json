"{\"value\":{\"code\":\"import { blobsToCommitments, toBlobs } from 'viem'\\n\\nconst commitments = blobsToCommitments({ \\n  blobs: toBlobs({ data: '0x1234' }), // [!code focus]  \\n  kzg, \\n}) \",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":9,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":29,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":58,\"length\":11,\"target\":\"commitments\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":72,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":2,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":96,\"length\":5,\"target\":\"blobs\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x1234\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x1234\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":103,\"length\":7,\"target\":\"toBlobs\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":113,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":153,\"length\":3,\"target\":\"kzg\",\"line\":4,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,80]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { defineKzg } from 'viem'\\nconst kzg = defineKzg({} as any)\\n\\n// ---cut---\\nimport { blobsToCommitments, toBlobs } from 'viem'\\n\\nconst commitments = blobsToCommitments({ \\n  blobs: toBlobs({ data: '0x1234' }), // [!code focus]  \\n  kzg, \\n}) \",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":9,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":29,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":58,\"length\":11,\"target\":\"commitments\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":72,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":2,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":96,\"length\":5,\"target\":\"blobs\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x1234\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x1234\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":103,\"length\":7,\"target\":\"toBlobs\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":113,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":153,\"length\":3,\"target\":\"kzg\",\"line\":4,\"character\":2}],\"tags\":[]}}"
