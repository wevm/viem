"{\"value\":{\"code\":\"import { getContract } from 'viem'\\nimport { abi } from './abi'\\nimport { publicClient } from './client'\\n\\nconst contract = getContract({ address, abi, client: publicClient })\\n\\n// The below will send a single request to the RPC Provider.\\nconst [name, totalSupply, symbol, balance] = await Promise.all([\\n  contract.read.name(),\\n  contract.read.totalSupply(),\\n  contract.read.symbol(),\\n  contract.read.balanceOf([address]),\\n])\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function getContract<transport extends Transport, address extends Address, const abi extends Abi | readonly unknown[], const client extends Client<transport, chain, account> | KeyedClient<transport, chain, account>, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>({ abi, address, client: client_, }: GetContractParameters<transport, chain, account, abi, client, address>): GetContractReturnType<abi, client, address>\\nimport getContract\",\"docs\":\"Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\\n\\n- Docs https://viem.sh/docs/contract/getContract\\n\\nUsing Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n    'function ownerOf(uint256 tokenId) view returns (address)',\\n    'function totalSupply() view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\"]],\"start\":9,\"length\":11,\"target\":\"getContract\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport abi\",\"start\":44,\"length\":3,\"target\":\"abi\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":72,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":110,\"length\":8,\"target\":\"contract\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) getContract<Transport, \\\"0x\\\", readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], {\\n    ...;\\n}, Chain | undefined, Account | undefined>({ abi, address, client: client_, }: GetContractParameters<...>): {\\n    ...;\\n}\\nimport getContract\",\"docs\":\"Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\\n\\n- Docs https://viem.sh/docs/contract/getContract\\n\\nUsing Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n    'function ownerOf(uint256 tokenId) view returns (address)',\\n    'function totalSupply() view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\"]],\"start\":121,\"length\":11,\"target\":\"getContract\",\"line\":4,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) address: \\\"0x\\\"\",\"docs\":\"Contract address\",\"start\":135,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":31},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\",\"docs\":\"Contract ABI\",\"start\":144,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":40},{\"type\":\"hover\",\"text\":\"(property) client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"docs\":\"The Client.\\n\\nIf you pass in a [`publicClient`](https://viem.sh/docs/clients/public), the following methods are available:\\n\\n- [`createEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\\n- [`getEvents`](https://viem.sh/docs/contract/getContractEvents)\\n- [`read`](https://viem.sh/docs/contract/readContract)\\n- [`simulate`](https://viem.sh/docs/contract/simulateContract)\\n- [`watchEvent`](https://viem.sh/docs/contract/watchContractEvent)\\n\\nIf you pass in a [`walletClient`](https://viem.sh/docs/clients/wallet), the following methods are available:\\n\\n- [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\\n- [`write`](https://viem.sh/docs/contract/writeContract)\",\"start\":149,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":45},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":157,\"length\":12,\"target\":\"publicClient\",\"line\":4,\"character\":53},{\"type\":\"hover\",\"text\":\"const name: string\",\"start\":242,\"length\":4,\"target\":\"name\",\"line\":7,\"character\":7},{\"type\":\"hover\",\"text\":\"const totalSupply: bigint\",\"start\":248,\"length\":11,\"target\":\"totalSupply\",\"line\":7,\"character\":13},{\"type\":\"hover\",\"text\":\"const symbol: string\",\"start\":261,\"length\":6,\"target\":\"symbol\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":269,\"length\":7,\"target\":\"balance\",\"line\":7,\"character\":34},{\"type\":\"hover\",\"text\":\"var Promise: PromiseConstructor\",\"docs\":\"Represents the completion of an asynchronous operation\",\"start\":286,\"length\":7,\"target\":\"Promise\",\"line\":7,\"character\":51},{\"type\":\"hover\",\"text\":\"(method) PromiseConstructor.all<[Promise<string>, Promise<bigint>, Promise<string>, Promise<bigint>]>(values: [Promise<string>, Promise<bigint>, Promise<...>, Promise<...>]): Promise<...> (+1 overload)\",\"docs\":\"Creates a Promise that is resolved with an array of results when all of the provided Promises\\nresolve, or rejected when any Promise is rejected.\",\"tags\":[[\"param\",\"values An array of Promises.\"],[\"returns\",\"A new Promise.\"]],\"start\":294,\"length\":3,\"target\":\"all\",\"line\":7,\"character\":59},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":302,\"length\":8,\"target\":\"contract\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":311,\"length\":4,\"target\":\"read\",\"line\":8,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) name: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"name\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":316,\"length\":4,\"target\":\"name\",\"line\":8,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":326,\"length\":8,\"target\":\"contract\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":335,\"length\":4,\"target\":\"read\",\"line\":9,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) totalSupply: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"totalSupply\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":340,\"length\":11,\"target\":\"totalSupply\",\"line\":9,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":357,\"length\":8,\"target\":\"contract\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":366,\"length\":4,\"target\":\"read\",\"line\":10,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":371,\"length\":6,\"target\":\"symbol\",\"line\":10,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":383,\"length\":8,\"target\":\"contract\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":392,\"length\":4,\"target\":\"read\",\"line\":11,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) balanceOf: (args: readonly [`0x${string}`], options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"balanceOf\\\", readonly [...]>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":397,\"length\":9,\"target\":\"balanceOf\",\"line\":11,\"character\":16},{\"type\":\"hover\",\"text\":\"const address: \\\"0x\\\"\",\"start\":408,\"length\":7,\"target\":\"address\",\"line\":11,\"character\":27}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,3146]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\n\\nimport { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":204,\"filename\":\"abi.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/abi.ts\",\"content\":\"// @filename: abi.ts\\n\\nexport const abi = [\\n  {\\n    type: 'event',\\n    name: 'Approval',\\n    inputs: [\\n      {\\n        indexed: true,\\n        name: 'owner',\\n        type: 'address',\\n      },\\n      {\\n        indexed: true,\\n        name: 'spender',\\n        type: 'address',\\n      },\\n      {\\n        indexed: false,\\n        name: 'value',\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'event',\\n    name: 'Transfer',\\n    inputs: [\\n      {\\n        indexed: true,\\n        name: 'from',\\n        type: 'address',\\n      },\\n      {\\n        indexed: true,\\n        name: 'to',\\n        type: 'address',\\n      },\\n      {\\n        indexed: false,\\n        name: 'value',\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'allowance',\\n    stateMutability: 'view',\\n    inputs: [\\n      {\\n        name: 'owner',\\n        type: 'address',\\n      },\\n      {\\n        name: 'spender',\\n        type: 'address',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'approve',\\n    stateMutability: 'nonpayable',\\n    inputs: [\\n      {\\n        name: 'spender',\\n        type: 'address',\\n      },\\n      {\\n        name: 'amount',\\n        type: 'uint256',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'bool',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'balanceOf',\\n    stateMutability: 'view',\\n    inputs: [\\n      {\\n        name: 'account',\\n        type: 'address',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'decimals',\\n    stateMutability: 'view',\\n    inputs: [],\\n    outputs: [\\n      {\\n        type: 'uint8',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'name',\\n    stateMutability: 'view',\\n    inputs: [],\\n    outputs: [\\n      {\\n        type: 'string',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'symbol',\\n    stateMutability: 'view',\\n    inputs: [],\\n    outputs: [\\n      {\\n        type: 'string',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'totalSupply',\\n    stateMutability: 'view',\\n    inputs: [],\\n    outputs: [\\n      {\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'transfer',\\n    stateMutability: 'nonpayable',\\n    inputs: [\\n      {\\n        name: 'recipient',\\n        type: 'address',\\n      },\\n      {\\n        name: 'amount',\\n        type: 'uint256',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'bool',\\n      },\\n    ],\\n  },\\n  {\\n    type: 'function',\\n    name: 'transferFrom',\\n    stateMutability: 'nonpayable',\\n    inputs: [\\n      {\\n        name: 'sender',\\n        type: 'address',\\n      },\\n      {\\n        name: 'recipient',\\n        type: 'address',\\n      },\\n      {\\n        name: 'amount',\\n        type: 'uint256',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'bool',\\n      },\\n    ],\\n  },\\n] as const\\n\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":3087,\"filename\":\"example.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.ts\",\"content\":\"// @filename: example.ts\\nconst address = '0x'\\n// ---cut---\\nimport { getContract } from 'viem'\\nimport { abi } from './abi'\\nimport { publicClient } from './client'\\n\\nconst contract = getContract({ address, abi, client: publicClient })\\n\\n// The below will send a single request to the RPC Provider.\\nconst [name, totalSupply, symbol, balance] = await Promise.all([\\n  contract.read.name(),\\n  contract.read.totalSupply(),\\n  contract.read.symbol(),\\n  contract.read.balanceOf([address]),\\n])\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function getContract<transport extends Transport, address extends Address, const abi extends Abi | readonly unknown[], const client extends Client<transport, chain, account> | KeyedClient<transport, chain, account>, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>({ abi, address, client: client_, }: GetContractParameters<transport, chain, account, abi, client, address>): GetContractReturnType<abi, client, address>\\nimport getContract\",\"docs\":\"Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\\n\\n- Docs https://viem.sh/docs/contract/getContract\\n\\nUsing Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n    'function ownerOf(uint256 tokenId) view returns (address)',\\n    'function totalSupply() view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\"]],\"start\":9,\"length\":11,\"target\":\"getContract\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport abi\",\"start\":44,\"length\":3,\"target\":\"abi\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":72,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":110,\"length\":8,\"target\":\"contract\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) getContract<Transport, \\\"0x\\\", readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], {\\n    ...;\\n}, Chain | undefined, Account | undefined>({ abi, address, client: client_, }: GetContractParameters<...>): {\\n    ...;\\n}\\nimport getContract\",\"docs\":\"Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\\n\\n- Docs https://viem.sh/docs/contract/getContract\\n\\nUsing Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n    'function ownerOf(uint256 tokenId) view returns (address)',\\n    'function totalSupply() view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\"]],\"start\":121,\"length\":11,\"target\":\"getContract\",\"line\":4,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) address: \\\"0x\\\"\",\"docs\":\"Contract address\",\"start\":135,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":31},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\",\"docs\":\"Contract ABI\",\"start\":144,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":40},{\"type\":\"hover\",\"text\":\"(property) client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"docs\":\"The Client.\\n\\nIf you pass in a [`publicClient`](https://viem.sh/docs/clients/public), the following methods are available:\\n\\n- [`createEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\\n- [`getEvents`](https://viem.sh/docs/contract/getContractEvents)\\n- [`read`](https://viem.sh/docs/contract/readContract)\\n- [`simulate`](https://viem.sh/docs/contract/simulateContract)\\n- [`watchEvent`](https://viem.sh/docs/contract/watchContractEvent)\\n\\nIf you pass in a [`walletClient`](https://viem.sh/docs/clients/wallet), the following methods are available:\\n\\n- [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\\n- [`write`](https://viem.sh/docs/contract/writeContract)\",\"start\":149,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":45},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":157,\"length\":12,\"target\":\"publicClient\",\"line\":4,\"character\":53},{\"type\":\"hover\",\"text\":\"const name: string\",\"start\":242,\"length\":4,\"target\":\"name\",\"line\":7,\"character\":7},{\"type\":\"hover\",\"text\":\"const totalSupply: bigint\",\"start\":248,\"length\":11,\"target\":\"totalSupply\",\"line\":7,\"character\":13},{\"type\":\"hover\",\"text\":\"const symbol: string\",\"start\":261,\"length\":6,\"target\":\"symbol\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":269,\"length\":7,\"target\":\"balance\",\"line\":7,\"character\":34},{\"type\":\"hover\",\"text\":\"var Promise: PromiseConstructor\",\"docs\":\"Represents the completion of an asynchronous operation\",\"start\":286,\"length\":7,\"target\":\"Promise\",\"line\":7,\"character\":51},{\"type\":\"hover\",\"text\":\"(method) PromiseConstructor.all<[Promise<string>, Promise<bigint>, Promise<string>, Promise<bigint>]>(values: [Promise<string>, Promise<bigint>, Promise<...>, Promise<...>]): Promise<...> (+1 overload)\",\"docs\":\"Creates a Promise that is resolved with an array of results when all of the provided Promises\\nresolve, or rejected when any Promise is rejected.\",\"tags\":[[\"param\",\"values An array of Promises.\"],[\"returns\",\"A new Promise.\"]],\"start\":294,\"length\":3,\"target\":\"all\",\"line\":7,\"character\":59},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":302,\"length\":8,\"target\":\"contract\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":311,\"length\":4,\"target\":\"read\",\"line\":8,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) name: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"name\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":316,\"length\":4,\"target\":\"name\",\"line\":8,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":326,\"length\":8,\"target\":\"contract\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":335,\"length\":4,\"target\":\"read\",\"line\":9,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) totalSupply: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"totalSupply\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":340,\"length\":11,\"target\":\"totalSupply\",\"line\":9,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":357,\"length\":8,\"target\":\"contract\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":366,\"length\":4,\"target\":\"read\",\"line\":10,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":371,\"length\":6,\"target\":\"symbol\",\"line\":10,\"character\":16},{\"type\":\"hover\",\"text\":\"const contract: {\\n    read: {\\n        symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n            readonly type: \\\"event\\\";\\n            readonly name: \\\"Approval\\\";\\n            readonly inputs: readonly [{\\n                readonly indexed: true;\\n                readonly name: \\\"owner\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                readonly indexed: true;\\n                readonly name: \\\"spender\\\";\\n                readonly type: \\\"address\\\";\\n            }, {\\n                ...;\\n            }];\\n        }, ... 9 more ..., {\\n            ...;\\n        }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n        ... 4 more ...;\\n        totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n    };\\n    ... 7 more ...;\\n    abi: readonly [...];\\n}\",\"start\":383,\"length\":8,\"target\":\"contract\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) read: {\\n    symbol: (options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n        readonly type: \\\"event\\\";\\n        readonly name: \\\"Approval\\\";\\n        readonly inputs: readonly [{\\n            readonly indexed: true;\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            readonly indexed: true;\\n            readonly name: \\\"spender\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }, ... 9 more ..., {\\n        ...;\\n    }], \\\"symbol\\\", readonly []>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>;\\n    ... 4 more ...;\\n    totalSupply: (options?: Prettify<...> | undefined) => Promise<...>;\\n}\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\",\"tags\":[[\"example\",\"import { createPublicClient, getContract, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi([\\n    'function balanceOf(address owner) view returns (uint256)',\\n  ]),\\n  client: publicClient,\\n})\\nconst result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\\n// 424122n\"]],\"start\":392,\"length\":4,\"target\":\"read\",\"line\":11,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) balanceOf: (args: readonly [`0x${string}`], options?: Prettify<UnionOmit<ReadContractParameters<readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"balanceOf\\\", readonly [...]>, \\\"address\\\" | ... 2 more ... | \\\"functionName\\\">> | undefined) => Promise<...>\",\"start\":397,\"length\":9,\"target\":\"balanceOf\",\"line\":11,\"character\":16},{\"type\":\"hover\",\"text\":\"const address: \\\"0x\\\"\",\"start\":408,\"length\":7,\"target\":\"address\",\"line\":11,\"character\":27}],\"tags\":[]}}"
