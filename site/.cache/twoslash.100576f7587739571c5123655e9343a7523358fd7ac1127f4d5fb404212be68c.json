"{\"value\":{\"code\":\"import { http, parseEther } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\\n})\\n\\nconst hash = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{\\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    value: parseEther('1')\\n  }],\\n  paymaster: paymasterClient,\\n  paymasterContext: { // [!code focus]\\n    policyId: 'abc123' // [!code focus]\\n  }, // [!code focus]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":9,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":15,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":15},{\"type\":\"hover\",\"text\":\"(alias) function createPaymasterClient<transport extends Transport, rpcSchema extends RpcSchema | undefined = undefined>(parameters: PaymasterClientConfig<transport, rpcSchema>): PaymasterClient<transport, rpcSchema>\\nimport createPaymasterClient\",\"docs\":\"Creates a Paymaster Client.\\n\\n- Docs: https://viem.sh/account-abstraction/clients/paymaster\",\"tags\":[[\"param\",\"config - {@link PaymasterClientConfig}\"],[\"returns\",\"A Paymaster Client. {@link PaymasterClient}\"],[\"example\",\"import { http } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://...'),\\n})\"]],\"start\":49,\"length\":21,\"target\":\"createPaymasterClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const paymasterClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":112,\"length\":15,\"target\":\"paymasterClient\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPaymasterClient<HttpTransport<undefined, false>, undefined>(parameters: {\\n    cacheTime?: number | undefined | undefined;\\n    key?: string | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    pollingInterval?: number | undefined | undefined;\\n    rpcSchema?: undefined;\\n    transport: HttpTransport<...>;\\n}): {\\n    ...;\\n}\\nimport createPaymasterClient\",\"docs\":\"Creates a Paymaster Client.\\n\\n- Docs: https://viem.sh/account-abstraction/clients/paymaster\",\"tags\":[[\"param\",\"config - {@link PaymasterClientConfig}\"],[\"returns\",\"A Paymaster Client. {@link PaymasterClient}\"],[\"example\",\"import { http } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://...'),\\n})\"]],\"start\":130,\"length\":21,\"target\":\"createPaymasterClient\",\"line\":3,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":156,\"length\":9,\"target\":\"transport\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":167,\"length\":4,\"target\":\"http\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"const hash: {\\n    preVerificationGas: bigint;\\n    verificationGasLimit: bigint;\\n    callGasLimit: bigint;\\n}\",\"start\":227,\"length\":4,\"target\":\"hash\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, undefined, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\\nimport bundlerClient\",\"start\":240,\"length\":13,\"target\":\"bundlerClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) estimateUserOperationGas: <[{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}>(parameters: EstimateUserOperationGasParameters<...>) => Promise<...>\",\"docs\":\"Returns an estimate of gas values necessary to execute the User Operation.\\n\\n- Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link EstimateUserOperationGasParameters}\"],[\"returns\",\"The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = await toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":254,\"length\":24,\"target\":\"estimateUserOperationGas\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: (object & Assign_<SmartAccountImplementation<Abi, EntryPointVersion, object>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}) | {\\n    ...;\\n} | undefined\",\"start\":283,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":294,\"length\":5,\"target\":\"calls\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":308,\"length\":2,\"target\":\"to\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":362,\"length\":5,\"target\":\"value\",\"line\":11,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":369,\"length\":10,\"target\":\"parseEther\",\"line\":11,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) paymaster: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":393,\"length\":9,\"target\":\"paymaster\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"const paymasterClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":404,\"length\":15,\"target\":\"paymasterClient\",\"line\":13,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) paymasterContext?: unknown\",\"docs\":\"Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls.\",\"start\":423,\"length\":16,\"target\":\"paymasterContext\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) policyId: string\",\"start\":464,\"length\":8,\"target\":\"policyId\",\"line\":15,\"character\":4}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,660]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\\nexport const account = await toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\\n\\nexport const bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc')\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":558,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { account, bundlerClient } from './config'\\n// ---cut---\\nimport { http, parseEther } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://public.pimlico.io/v2/11155111/rpc')\\n})\\n\\nconst hash = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{\\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    value: parseEther('1')\\n  }],\\n  paymaster: paymasterClient,\\n  paymasterContext: { // [!code focus]\\n    policyId: 'abc123' // [!code focus]\\n  }, // [!code focus]\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":9,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":15,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":15},{\"type\":\"hover\",\"text\":\"(alias) function createPaymasterClient<transport extends Transport, rpcSchema extends RpcSchema | undefined = undefined>(parameters: PaymasterClientConfig<transport, rpcSchema>): PaymasterClient<transport, rpcSchema>\\nimport createPaymasterClient\",\"docs\":\"Creates a Paymaster Client.\\n\\n- Docs: https://viem.sh/account-abstraction/clients/paymaster\",\"tags\":[[\"param\",\"config - {@link PaymasterClientConfig}\"],[\"returns\",\"A Paymaster Client. {@link PaymasterClient}\"],[\"example\",\"import { http } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://...'),\\n})\"]],\"start\":49,\"length\":21,\"target\":\"createPaymasterClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const paymasterClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":112,\"length\":15,\"target\":\"paymasterClient\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createPaymasterClient<HttpTransport<undefined, false>, undefined>(parameters: {\\n    cacheTime?: number | undefined | undefined;\\n    key?: string | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    pollingInterval?: number | undefined | undefined;\\n    rpcSchema?: undefined;\\n    transport: HttpTransport<...>;\\n}): {\\n    ...;\\n}\\nimport createPaymasterClient\",\"docs\":\"Creates a Paymaster Client.\\n\\n- Docs: https://viem.sh/account-abstraction/clients/paymaster\",\"tags\":[[\"param\",\"config - {@link PaymasterClientConfig}\"],[\"returns\",\"A Paymaster Client. {@link PaymasterClient}\"],[\"example\",\"import { http } from 'viem'\\nimport { createPaymasterClient } from 'viem/account-abstraction'\\n\\nconst paymasterClient = createPaymasterClient({\\n  transport: http('https://...'),\\n})\"]],\"start\":130,\"length\":21,\"target\":\"createPaymasterClient\",\"line\":3,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":156,\"length\":9,\"target\":\"transport\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":167,\"length\":4,\"target\":\"http\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"const hash: {\\n    preVerificationGas: bigint;\\n    verificationGasLimit: bigint;\\n    callGasLimit: bigint;\\n}\",\"start\":227,\"length\":4,\"target\":\"hash\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, undefined, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\\nimport bundlerClient\",\"start\":240,\"length\":13,\"target\":\"bundlerClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) estimateUserOperationGas: <[{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}>(parameters: EstimateUserOperationGasParameters<...>) => Promise<...>\",\"docs\":\"Returns an estimate of gas values necessary to execute the User Operation.\\n\\n- Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link EstimateUserOperationGasParameters}\"],[\"returns\",\"The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = await toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":254,\"length\":24,\"target\":\"estimateUserOperationGas\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: (object & Assign_<SmartAccountImplementation<Abi, EntryPointVersion, object>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}) | {\\n    ...;\\n} | undefined\",\"start\":283,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":294,\"length\":5,\"target\":\"calls\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":308,\"length\":2,\"target\":\"to\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":362,\"length\":5,\"target\":\"value\",\"line\":11,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":369,\"length\":10,\"target\":\"parseEther\",\"line\":11,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) paymaster: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":393,\"length\":9,\"target\":\"paymaster\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"const paymasterClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 12 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":404,\"length\":15,\"target\":\"paymasterClient\",\"line\":13,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) paymasterContext?: unknown\",\"docs\":\"Paymaster context to pass to `getPaymasterData` and `getPaymasterStubData` calls.\",\"start\":423,\"length\":16,\"target\":\"paymasterContext\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) policyId: string\",\"start\":464,\"length\":8,\"target\":\"policyId\",\"line\":15,\"character\":4}],\"tags\":[]}}"
