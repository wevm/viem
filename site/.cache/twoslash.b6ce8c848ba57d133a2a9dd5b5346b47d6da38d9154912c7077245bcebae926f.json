"{\"value\":{\"code\":\"const signature = await walletClient.signAuthorization({\\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n  chainId: 1,\\n  nonce: 0,\\n})\\n\\nconst address = await recoverAuthorizationAddress({\\n  authorization: {\\n    contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n    chainId: 1,\\n    nonce: 0,\\n  },\\n  signature, // [!code focus]\\n}) \",\"nodes\":[{\"type\":\"hover\",\"text\":\"const signature: SignAuthorizationReturnType\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":24,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":37,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":59,\"length\":15,\"target\":\"contractAddress\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) chainId?: number | undefined\",\"docs\":\"Chain ID to authorize.\",\"start\":124,\"length\":7,\"target\":\"chainId\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) nonce?: number | undefined\",\"docs\":\"Nonce of the Authority to authorize.\",\"start\":138,\"length\":5,\"target\":\"nonce\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"const address: `0x${string}`\",\"start\":158,\"length\":7,\"target\":\"address\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) recoverAuthorizationAddress<{\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}>(parameters: RecoverAuthorizationAddressParameters<{\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}, `0x${string}` | ... 1 more ... | OneOf<...>>): Promise<RecoverAuthorizationAddressReturnType>\\nimport recoverAuthorizationAddress\",\"start\":174,\"length\":27,\"target\":\"recoverAuthorizationAddress\",\"line\":6,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) authorization: OneOf<Authorization | SignedAuthorization> | {\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}\",\"docs\":\"The Authorization object.\\n\\n- If an unsigned `authorization` is provided, the `signature` property is required.\\n- If a signed `authorization` is provided, the `signature` property does not need to be provided.\",\"start\":206,\"length\":13,\"target\":\"authorization\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\"\",\"start\":227,\"length\":15,\"target\":\"contractAddress\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) chainId: 1\",\"start\":294,\"length\":7,\"target\":\"chainId\",\"line\":9,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) nonce: 0\",\"start\":310,\"length\":5,\"target\":\"nonce\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | OneOf<Signature | SignedAuthorization>\",\"docs\":\"Signature of the Authorization. Not required if the `authorization` is signed.\",\"start\":327,\"length\":9,\"target\":\"signature\",\"line\":12,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,529]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nexport const walletClient = createWalletClient({\\n  account: privateKeyToAccount('0x...'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":371,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { recoverAuthorizationAddress } from 'viem/experimental'\\nimport { walletClient } from './client'\\n  // ---cut---\\nconst signature = await walletClient.signAuthorization({\\n  contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n  chainId: 1,\\n  nonce: 0,\\n})\\n\\nconst address = await recoverAuthorizationAddress({\\n  authorization: {\\n    contractAddress: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n    chainId: 1,\\n    nonce: 0,\\n  },\\n  signature, // [!code focus]\\n}) \",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const signature: SignAuthorizationReturnType\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":24,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":37,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":59,\"length\":15,\"target\":\"contractAddress\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) chainId?: number | undefined\",\"docs\":\"Chain ID to authorize.\",\"start\":124,\"length\":7,\"target\":\"chainId\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) nonce?: number | undefined\",\"docs\":\"Nonce of the Authority to authorize.\",\"start\":138,\"length\":5,\"target\":\"nonce\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"const address: `0x${string}`\",\"start\":158,\"length\":7,\"target\":\"address\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) recoverAuthorizationAddress<{\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}>(parameters: RecoverAuthorizationAddressParameters<{\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}, `0x${string}` | ... 1 more ... | OneOf<...>>): Promise<RecoverAuthorizationAddressReturnType>\\nimport recoverAuthorizationAddress\",\"start\":174,\"length\":27,\"target\":\"recoverAuthorizationAddress\",\"line\":6,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) authorization: OneOf<Authorization | SignedAuthorization> | {\\n    readonly contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\";\\n    readonly chainId: 1;\\n    readonly nonce: 0;\\n}\",\"docs\":\"The Authorization object.\\n\\n- If an unsigned `authorization` is provided, the `signature` property is required.\\n- If a signed `authorization` is provided, the `signature` property does not need to be provided.\",\"start\":206,\"length\":13,\"target\":\"authorization\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) contractAddress: \\\"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\\\"\",\"start\":227,\"length\":15,\"target\":\"contractAddress\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) chainId: 1\",\"start\":294,\"length\":7,\"target\":\"chainId\",\"line\":9,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) nonce: 0\",\"start\":310,\"length\":5,\"target\":\"nonce\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | OneOf<Signature | SignedAuthorization>\",\"docs\":\"Signature of the Authorization. Not required if the `authorization` is signed.\",\"start\":327,\"length\":9,\"target\":\"signature\",\"line\":12,\"character\":2}],\"tags\":[]}}"
