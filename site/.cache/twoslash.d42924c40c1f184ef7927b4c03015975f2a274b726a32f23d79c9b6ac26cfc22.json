"{\"value\":{\"code\":\"import { parseGwei, stringToHex, toBlobs } from 'viem'\\nimport { account, client } from './client'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n\\nconst hash = await client.sendTransaction({\\n  blobs,\\n  kzg,\\n  maxFeePerBlobGas: parseGwei('30'),\\n  to: '0x0000000000000000000000000000000000000000',\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":9,\"length\":9,\"target\":\"parseGwei\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function stringToHex(value_: string, opts?: StringToHexOpts): Hex\\nimport stringToHex\",\"docs\":\"Encodes a UTF-8 string into a hex string\\n\\n- Docs: https://viem.sh/docs/utilities/toHex#stringtohex\",\"tags\":[[\"param\",\"value Value to encode.\"],[\"param\",\"opts Options.\"],[\"returns\",\"Hex value.\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!')\\n// '0x48656c6c6f20576f726c6421'\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!', { size: 32 })\\n// '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\"]],\"start\":20,\"length\":11,\"target\":\"stringToHex\",\"line\":0,\"character\":20},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":33,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":33},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":64,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":73,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":107,\"length\":3,\"target\":\"kzg\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":133,\"length\":5,\"target\":\"blobs\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<`0x${string}`, \\\"hex\\\">(parameters: ToBlobsParameters<`0x${string}`, \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":141,\"length\":7,\"target\":\"toBlobs\",\"line\":4,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}` | ByteArray\",\"docs\":\"Data to transform to a blob.\",\"start\":151,\"length\":4,\"target\":\"data\",\"line\":4,\"character\":24},{\"type\":\"hover\",\"text\":\"(alias) stringToHex(value_: string, opts?: StringToHexOpts): Hex\\nimport stringToHex\",\"docs\":\"Encodes a UTF-8 string into a hex string\\n\\n- Docs: https://viem.sh/docs/utilities/toHex#stringtohex\",\"tags\":[[\"param\",\"value Value to encode.\"],[\"param\",\"opts Options.\"],[\"returns\",\"Hex value.\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!')\\n// '0x48656c6c6f20576f726c6421'\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!', { size: 32 })\\n// '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\"]],\"start\":157,\"length\":11,\"target\":\"stringToHex\",\"line\":4,\"character\":30},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":194,\"length\":4,\"target\":\"hash\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":207,\"length\":6,\"target\":\"client\",\"line\":6,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly blobs: readonly `0x${string}`[];\\n    readonly kzg: Kzg;\\n    readonly maxFeePerBlobGas: bigint;\\n    readonly to: \\\"0x0000000000000000000000000000000000000000\\\";\\n}, undefined>(args: SendTransactionParameters<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined, {\\n    readonly blobs: readonly `0x${string}`[];\\n    readonly kzg: Kzg;\\n    readonly maxFeePerBlobGas: bigint;\\n    readonly to: \\\"0x0000000000000000000000000000000000000000\\\";\\n}>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":214,\"length\":15,\"target\":\"sendTransaction\",\"line\":6,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"start\":234,\"length\":5,\"target\":\"blobs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) kzg: Kzg\",\"docs\":\"KZG implementation\",\"start\":243,\"length\":3,\"target\":\"kzg\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxFeePerBlobGas: bigint\",\"start\":250,\"length\":16,\"target\":\"maxFeePerBlobGas\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":268,\"length\":9,\"target\":\"parseGwei\",\"line\":9,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x0000000000000000000000000000000000000000\\\"\",\"start\":287,\"length\":2,\"target\":\"to\",\"line\":10,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,559]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":22,\"end\":35}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"kzg.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/kzg.ts\",\"content\":\"// @filename: kzg.ts\\n\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { setupKzg } from 'viem'\\nimport { mainnetTrustedSetupPath } from 'viem/node'\\n\\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":209,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const client = createWalletClient({\\n  account,\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":520,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseGwei, stringToHex, toBlobs } from 'viem'\\nimport { account, client } from './client'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n\\nconst hash = await client.sendTransaction({\\n  blobs,\\n  kzg,\\n  maxFeePerBlobGas: parseGwei('30'),\\n  to: '0x0000000000000000000000000000000000000000',\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":9,\"length\":9,\"target\":\"parseGwei\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function stringToHex(value_: string, opts?: StringToHexOpts): Hex\\nimport stringToHex\",\"docs\":\"Encodes a UTF-8 string into a hex string\\n\\n- Docs: https://viem.sh/docs/utilities/toHex#stringtohex\",\"tags\":[[\"param\",\"value Value to encode.\"],[\"param\",\"opts Options.\"],[\"returns\",\"Hex value.\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!')\\n// '0x48656c6c6f20576f726c6421'\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!', { size: 32 })\\n// '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\"]],\"start\":20,\"length\":11,\"target\":\"stringToHex\",\"line\":0,\"character\":20},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":33,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":33},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":64,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":73,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":107,\"length\":3,\"target\":\"kzg\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":133,\"length\":5,\"target\":\"blobs\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<`0x${string}`, \\\"hex\\\">(parameters: ToBlobsParameters<`0x${string}`, \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":141,\"length\":7,\"target\":\"toBlobs\",\"line\":4,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}` | ByteArray\",\"docs\":\"Data to transform to a blob.\",\"start\":151,\"length\":4,\"target\":\"data\",\"line\":4,\"character\":24},{\"type\":\"hover\",\"text\":\"(alias) stringToHex(value_: string, opts?: StringToHexOpts): Hex\\nimport stringToHex\",\"docs\":\"Encodes a UTF-8 string into a hex string\\n\\n- Docs: https://viem.sh/docs/utilities/toHex#stringtohex\",\"tags\":[[\"param\",\"value Value to encode.\"],[\"param\",\"opts Options.\"],[\"returns\",\"Hex value.\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!')\\n// '0x48656c6c6f20576f726c6421'\"],[\"example\",\"import { stringToHex } from 'viem'\\nconst data = stringToHex('Hello World!', { size: 32 })\\n// '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\"]],\"start\":157,\"length\":11,\"target\":\"stringToHex\",\"line\":4,\"character\":30},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":194,\"length\":4,\"target\":\"hash\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":207,\"length\":6,\"target\":\"client\",\"line\":6,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly blobs: readonly `0x${string}`[];\\n    readonly kzg: Kzg;\\n    readonly maxFeePerBlobGas: bigint;\\n    readonly to: \\\"0x0000000000000000000000000000000000000000\\\";\\n}, undefined>(args: SendTransactionParameters<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined, {\\n    readonly blobs: readonly `0x${string}`[];\\n    readonly kzg: Kzg;\\n    readonly maxFeePerBlobGas: bigint;\\n    readonly to: \\\"0x0000000000000000000000000000000000000000\\\";\\n}>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":214,\"length\":15,\"target\":\"sendTransaction\",\"line\":6,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"start\":234,\"length\":5,\"target\":\"blobs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) kzg: Kzg\",\"docs\":\"KZG implementation\",\"start\":243,\"length\":3,\"target\":\"kzg\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxFeePerBlobGas: bigint\",\"start\":250,\"length\":16,\"target\":\"maxFeePerBlobGas\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":268,\"length\":9,\"target\":\"parseGwei\",\"line\":9,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x0000000000000000000000000000000000000000\\\"\",\"start\":287,\"length\":2,\"target\":\"to\",\"line\":10,\"character\":2}],\"tags\":[]}}"
