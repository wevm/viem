"{\"value\":{\"mdx\":\"# Why Viem [A brief preamble on why we built Viem]\\n\\n## The Problems\\n\\nThe current state of low-level Ethereum interface abstractions lack in at least one of the following four areas: **developer experience**, **stability**, **bundle size** and/or **performance** — a quadrilemma.\\n\\nAs the authors of [wagmi](https://wagmi.sh), a popular React Hooks library for Ethereum, we struggled to work with the existing low-level TypeScript Ethereum libraries. We wanted to provide the users of wagmi with the best possible developer experience, but we were limited by the underlying technologies wagmi was built on. We knew an _always_ stable, predictable implementation with a tiny bundle size and performant modules was paramount to interacting with the world's largest blockchain ecosystem.\\n\\nSo we created **viem**: a TypeScript Interface for Ethereum that provides low-level stateless primitives for interacting with Ethereum. An alternative to ethers.js and web3.js with a focus on reliability, efficiency, and excellent developer experience.\\n\\n## Developer Experience\\n\\nviem delivers a great developer experience through modular and composable APIs, comprehensive documentation, and automatic type safety and inference.\\n\\nIt provides developers with intuitive building blocks to build their Ethereum apps and libraries. While viem's APIs may be more verbose than alternative libraries, we believe this is the right trade-off as it makes viem's modular building blocks extremely flexible. Easy to move around, change, and remove. It also allows the developers to better understand Ethereum concepts as well as understand _what_ and _why_ certain properties are being passed through. Learning how to use viem is a great way to learn how to interact with Ethereum in general.\\n\\nWe aim to provide extensive API documentation and usage for _every_ module in viem. viem uses a [documentation](https://gist.github.com/zsup/9434452) and [test driven](<https://en.wikipedia.org/wiki/Test-driven_development#:~:text=Test%2Ddriven%20development%20(TDD),software%20against%20all%20test%20cases.>) development approach to building modules, which leads to predictable and stable APIs.\\n\\nviem also provides consumers with [strongly typed APIs](/docs/typescript), allowing consumers to get the best possible experience through [autocomplete](https://twitter.com/awkweb/status/1555678944770367493), [type inference](https://twitter.com/_jxom/status/1570244174502588417?s=20), as well as static validation.\\n\\n## Stability\\n\\nStability is a fundamental principle for viem. As the authors of [wagmi](https://wagmi.sh), we have many organizations, large and small, that rely heavily on the library and expect it to be entirely stable for their users.\\n\\nviem takes the following steps to ensure stability:\\n\\n- We run our test suite against a forked Ethereum node\\n- We aim for complete test coverage and test all potential behavioral cases\\n- We build deterministic and pure APIs\\n\\n## Bundle Size\\n\\nMaintaining a low bundle size is critical when building web applications. End users should not be required to download a module of over 100kB in order to interact with Ethereum. On a slow 3G mobile network loading a 100kB library would take at least **two seconds** (plus additional time to establish an HTTP connection).\\n\\nFurthermore, viem is tree-shakable, meaning only the modules you use are included in your final bundle.\\n\\n<div className=\\\"h-4\\\"></div>\\n<img src=\\\"/bench-bundlesize.svg\\\" />\\n\\n## Performance\\n\\nIn addition to the fast load times mentioned above, viem further tunes performance by only executing heavy asynchronous tasks when required and optimized encoding/parsing algorithms. The benchmarks speak for themselves:\\n\\n<div className=\\\"m-auto mt-10 space-y-14 w-10/12\\\">\\n  <img src=\\\"/bench-isaddress.svg\\\" />\\n  <img src=\\\"/bench-parseabi.svg\\\" />\\n  <img src=\\\"/bench-encodeabi.svg\\\" />\\n</div>\\n\\n## Opinions & Escape Hatches\\n\\nUnlike other low-level interfaces that impose opinions on consumers, viem enables consumers to choose their opinions while still maintaining sensible and secure defaults. This allows consumers to create their own opinionated implementations, such as [wagmi](https://wagmi.sh), without the need for tedious workarounds.\\n\\n---\\n\\n**viem** will help developers build with a higher level of accuracy and correctness through type safety and developer experience. It will also integrate extremely well with [wagmi](https://wagmi.sh) so folks can start using it without much upfront switching cost.\\n\",\"document\":[{\"href\":\"/docs/introduction#why-viem\",\"html\":\"<div role=\\\"doc-subtitle\\\">A brief preamble on why we built Viem</div></header>\\n\",\"id\":\"pages/docs/introduction.mdx#why-viem\",\"isPage\":true,\"text\":\"A brief preamble on why we built Viem\\n\",\"title\":\"Why Viem\",\"titles\":[]},{\"href\":\"/docs/introduction#the-problems\",\"html\":\"\\n<p>The current state of low-level Ethereum interface abstractions lack in at least one of the following four areas: <strong>developer experience</strong>, <strong>stability</strong>, <strong>bundle size</strong> and/or <strong>performance</strong> — a quadrilemma.</p>\\n<p>As the authors of <a href=\\\"https://wagmi.sh\\\">wagmi</a>, a popular React Hooks library for Ethereum, we struggled to work with the existing low-level TypeScript Ethereum libraries. We wanted to provide the users of wagmi with the best possible developer experience, but we were limited by the underlying technologies wagmi was built on. We knew an <em>always</em> stable, predictable implementation with a tiny bundle size and performant modules was paramount to interacting with the world&#x27;s largest blockchain ecosystem.</p>\\n<p>So we created <strong>viem</strong>: a TypeScript Interface for Ethereum that provides low-level stateless primitives for interacting with Ethereum. An alternative to ethers.js and web3.js with a focus on reliability, efficiency, and excellent developer experience.</p>\\n\",\"id\":\"pages/docs/introduction.mdx#the-problems\",\"isPage\":false,\"text\":\"\\nThe current state of low-level Ethereum interface abstractions lack in at least one of the following four areas: developer experience, stability, bundle size and/or performance — a quadrilemma.\\nAs the authors of wagmi, a popular React Hooks library for Ethereum, we struggled to work with the existing low-level TypeScript Ethereum libraries. We wanted to provide the users of wagmi with the best possible developer experience, but we were limited by the underlying technologies wagmi was built on. We knew an always stable, predictable implementation with a tiny bundle size and performant modules was paramount to interacting with the world&#x27;s largest blockchain ecosystem.\\nSo we created viem: a TypeScript Interface for Ethereum that provides low-level stateless primitives for interacting with Ethereum. An alternative to ethers.js and web3.js with a focus on reliability, efficiency, and excellent developer experience.\\n\",\"title\":\"The Problems\",\"titles\":[\"Why Viem\"]},{\"href\":\"/docs/introduction#developer-experience\",\"html\":\"\\n<p>viem delivers a great developer experience through modular and composable APIs, comprehensive documentation, and automatic type safety and inference.</p>\\n<p>It provides developers with intuitive building blocks to build their Ethereum apps and libraries. While viem&#x27;s APIs may be more verbose than alternative libraries, we believe this is the right trade-off as it makes viem&#x27;s modular building blocks extremely flexible. Easy to move around, change, and remove. It also allows the developers to better understand Ethereum concepts as well as understand <em>what</em> and <em>why</em> certain properties are being passed through. Learning how to use viem is a great way to learn how to interact with Ethereum in general.</p>\\n<p>We aim to provide extensive API documentation and usage for <em>every</em> module in viem. viem uses a <a href=\\\"https://gist.github.com/zsup/9434452\\\">documentation</a> and <a href=\\\"https://en.wikipedia.org/wiki/Test-driven_development#:~:text=Test%2Ddriven%20development%20(TDD),software%20against%20all%20test%20cases.\\\">test driven</a> development approach to building modules, which leads to predictable and stable APIs.</p>\\n<p>viem also provides consumers with <a href=\\\"/docs/typescript\\\">strongly typed APIs</a>, allowing consumers to get the best possible experience through <a href=\\\"https://twitter.com/awkweb/status/1555678944770367493\\\">autocomplete</a>, <a href=\\\"https://twitter.com/_jxom/status/1570244174502588417?s=20\\\">type inference</a>, as well as static validation.</p>\\n\",\"id\":\"pages/docs/introduction.mdx#developer-experience\",\"isPage\":false,\"text\":\"\\nviem delivers a great developer experience through modular and composable APIs, comprehensive documentation, and automatic type safety and inference.\\nIt provides developers with intuitive building blocks to build their Ethereum apps and libraries. While viem&#x27;s APIs may be more verbose than alternative libraries, we believe this is the right trade-off as it makes viem&#x27;s modular building blocks extremely flexible. Easy to move around, change, and remove. It also allows the developers to better understand Ethereum concepts as well as understand what and why certain properties are being passed through. Learning how to use viem is a great way to learn how to interact with Ethereum in general.\\nWe aim to provide extensive API documentation and usage for every module in viem. viem uses a documentation and test driven development approach to building modules, which leads to predictable and stable APIs.\\nviem also provides consumers with strongly typed APIs, allowing consumers to get the best possible experience through autocomplete, type inference, as well as static validation.\\n\",\"title\":\"Developer Experience\",\"titles\":[\"Why Viem\"]},{\"href\":\"/docs/introduction#stability\",\"html\":\"\\n<p>Stability is a fundamental principle for viem. As the authors of <a href=\\\"https://wagmi.sh\\\">wagmi</a>, we have many organizations, large and small, that rely heavily on the library and expect it to be entirely stable for their users.</p>\\n<p>viem takes the following steps to ensure stability:</p>\\n<ul>\\n<li>We run our test suite against a forked Ethereum node</li>\\n<li>We aim for complete test coverage and test all potential behavioral cases</li>\\n<li>We build deterministic and pure APIs</li>\\n</ul>\\n\",\"id\":\"pages/docs/introduction.mdx#stability\",\"isPage\":false,\"text\":\"\\nStability is a fundamental principle for viem. As the authors of wagmi, we have many organizations, large and small, that rely heavily on the library and expect it to be entirely stable for their users.\\nviem takes the following steps to ensure stability:\\n\\nWe run our test suite against a forked Ethereum node\\nWe aim for complete test coverage and test all potential behavioral cases\\nWe build deterministic and pure APIs\\n\\n\",\"title\":\"Stability\",\"titles\":[\"Why Viem\"]},{\"href\":\"/docs/introduction#bundle-size\",\"html\":\"\\n<p>Maintaining a low bundle size is critical when building web applications. End users should not be required to download a module of over 100kB in order to interact with Ethereum. On a slow 3G mobile network loading a 100kB library would take at least <strong>two seconds</strong> (plus additional time to establish an HTTP connection).</p>\\n<p>Furthermore, viem is tree-shakable, meaning only the modules you use are included in your final bundle.</p>\\n<div class=\\\"h-4\\\"></div>\\n<img src=\\\"/bench-bundlesize.svg\\\"/>\\n\",\"id\":\"pages/docs/introduction.mdx#bundle-size\",\"isPage\":false,\"text\":\"\\nMaintaining a low bundle size is critical when building web applications. End users should not be required to download a module of over 100kB in order to interact with Ethereum. On a slow 3G mobile network loading a 100kB library would take at least two seconds (plus additional time to establish an HTTP connection).\\nFurthermore, viem is tree-shakable, meaning only the modules you use are included in your final bundle.\\n\\n\\n\",\"title\":\"Bundle Size\",\"titles\":[\"Why Viem\"]},{\"href\":\"/docs/introduction#performance\",\"html\":\"\\n<p>In addition to the fast load times mentioned above, viem further tunes performance by only executing heavy asynchronous tasks when required and optimized encoding/parsing algorithms. The benchmarks speak for themselves:</p>\\n<div class=\\\"m-auto mt-10 space-y-14 w-10/12\\\"><img src=\\\"/bench-isaddress.svg\\\"/><img src=\\\"/bench-parseabi.svg\\\"/><img src=\\\"/bench-encodeabi.svg\\\"/></div>\\n\",\"id\":\"pages/docs/introduction.mdx#performance\",\"isPage\":false,\"text\":\"\\nIn addition to the fast load times mentioned above, viem further tunes performance by only executing heavy asynchronous tasks when required and optimized encoding/parsing algorithms. The benchmarks speak for themselves:\\n\\n\",\"title\":\"Performance\",\"titles\":[\"Why Viem\"]},{\"href\":\"/docs/introduction#opinions--escape-hatches\",\"html\":\"\\n<p>Unlike other low-level interfaces that impose opinions on consumers, viem enables consumers to choose their opinions while still maintaining sensible and secure defaults. This allows consumers to create their own opinionated implementations, such as <a href=\\\"https://wagmi.sh\\\">wagmi</a>, without the need for tedious workarounds.</p>\\n<hr/>\\n<p><strong>viem</strong> will help developers build with a higher level of accuracy and correctness through type safety and developer experience. It will also integrate extremely well with <a href=\\\"https://wagmi.sh\\\">wagmi</a> so folks can start using it without much upfront switching cost.</p>\",\"id\":\"pages/docs/introduction.mdx#opinions--escape-hatches\",\"isPage\":false,\"text\":\"\\nUnlike other low-level interfaces that impose opinions on consumers, viem enables consumers to choose their opinions while still maintaining sensible and secure defaults. This allows consumers to create their own opinionated implementations, such as wagmi, without the need for tedious workarounds.\\n\\nviem will help developers build with a higher level of accuracy and correctness through type safety and developer experience. It will also integrate extremely well with wagmi so folks can start using it without much upfront switching cost.\",\"title\":\"Opinions &amp; Escape Hatches\",\"titles\":[\"Why Viem\"]}]}}"
