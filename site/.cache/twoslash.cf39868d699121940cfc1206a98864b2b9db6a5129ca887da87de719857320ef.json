"{\"value\":{\"code\":\"import { parseEther } from 'viem'\\nimport { client } from './config'\\n \\nconst { results } = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [\\n    {\\n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n      value: parseEther('2'),\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ],\\n})\\n\\nconsole.log(results)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":43,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":78,\"length\":7,\"target\":\"results\",\"line\":3,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":96,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) simulateCalls: <readonly [{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>(args: SimulateCallsParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateCallsParameters}\"],[\"returns\",\"Results. {@link SimulateCallsReturnType}\"]],\"start\":103,\"length\":13,\"target\":\"simulateCalls\",\"line\":3,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"docs\":\"Account attached to the calls (msg.sender).\",\"start\":121,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {}>>, Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"docs\":\"Calls to simulate.\",\"start\":178,\"length\":5,\"target\":\"calls\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":199,\"length\":2,\"target\":\"to\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":255,\"length\":5,\"target\":\"value\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":262,\"length\":10,\"target\":\"parseEther\",\"line\":8,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":298,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":354,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":361,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":13},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":394,\"length\":7,\"target\":\"console\",\"line\":17,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":402,\"length\":3,\"target\":\"log\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":406,\"length\":7,\"target\":\"results\",\"line\":17,\"character\":12},{\"type\":\"tag\",\"name\":\"log\",\"start\":415,\"length\":0,\"text\":\"[\",\"line\":18,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":416,\"length\":0,\"text\":\"  {\",\"line\":19,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":417,\"length\":0,\"text\":\"    gasUsed: 21000n,\",\"line\":20,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":418,\"length\":0,\"text\":\"    logs: [],\",\"line\":21,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":419,\"length\":0,\"text\":\"    status: \\\"success\\\",\",\"line\":22,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":420,\"length\":0,\"text\":\"  },\",\"line\":23,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":421,\"length\":0,\"text\":\"  {\",\"line\":24,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":422,\"length\":0,\"text\":\"    gasUsed: 21000n,\",\"line\":25,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":423,\"length\":0,\"text\":\"    logs: [],\",\"line\":26,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":424,\"length\":0,\"text\":\"    status: \\\"success\\\",\",\"line\":27,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":425,\"length\":0,\"text\":\"  },\",\"line\":28,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":426,\"length\":0,\"text\":\"]\",\"line\":30,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[1484,1495],[1469,1483],[1436,1468],[1412,1435],[1381,1411],[1367,1380],[1352,1366],[1319,1351],[1295,1318],[1264,1294],[1250,1263],[1238,1249],[0,823]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"[\",\"start\":1238,\"end\":1249},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  {\",\"start\":1250,\"end\":1263},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    gasUsed: 21000n,\",\"start\":1264,\"end\":1294},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    logs: [],\",\"start\":1295,\"end\":1318},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    status: \\\"success\\\",\",\"start\":1319,\"end\":1351},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  },\",\"start\":1352,\"end\":1366},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  {\",\"start\":1367,\"end\":1380},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    gasUsed: 21000n,\",\"start\":1381,\"end\":1411},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    logs: [],\",\"start\":1412,\"end\":1435},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    status: \\\"success\\\",\",\"start\":1436,\"end\":1468},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  },\",\"start\":1469,\"end\":1483},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"]\",\"start\":1484,\"end\":1495}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":196,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":392,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":588,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":784,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseEther } from 'viem'\\nimport { client } from './config'\\n \\nconst { results } = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [\\n    {\\n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n      value: parseEther('2'),\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ],\\n})\\n\\nconsole.log(results)\\n// @log: [\\n\\n// @log:   {\\n\\n// @log:     gasUsed: 21000n,\\n\\n// @log:     logs: [],\\n\\n// @log:     status: \\\"success\\\",\\n\\n// @log:   },\\n\\n// @log:   {\\n\\n// @log:     gasUsed: 21000n,\\n\\n// @log:     logs: [],\\n\\n// @log:     status: \\\"success\\\",\\n\\n// @log:   },\\n\\n// @log: ]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":43,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":78,\"length\":7,\"target\":\"results\",\"line\":3,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":96,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) simulateCalls: <readonly [{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>(args: SimulateCallsParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateCallsParameters}\"],[\"returns\",\"Results. {@link SimulateCallsReturnType}\"]],\"start\":103,\"length\":13,\"target\":\"simulateCalls\",\"line\":3,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"docs\":\"Account attached to the calls (msg.sender).\",\"start\":121,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {}>>, Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"docs\":\"Calls to simulate.\",\"start\":178,\"length\":5,\"target\":\"calls\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":199,\"length\":2,\"target\":\"to\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":255,\"length\":5,\"target\":\"value\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":262,\"length\":10,\"target\":\"parseEther\",\"line\":8,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":298,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":354,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":361,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":13},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":394,\"length\":7,\"target\":\"console\",\"line\":17,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":402,\"length\":3,\"target\":\"log\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":406,\"length\":7,\"target\":\"results\",\"line\":17,\"character\":12}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":415,\"length\":0,\"text\":\"[\",\"line\":18,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":416,\"length\":0,\"text\":\"  {\",\"line\":19,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":417,\"length\":0,\"text\":\"    gasUsed: 21000n,\",\"line\":20,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":418,\"length\":0,\"text\":\"    logs: [],\",\"line\":21,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":419,\"length\":0,\"text\":\"    status: \\\"success\\\",\",\"line\":22,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":420,\"length\":0,\"text\":\"  },\",\"line\":23,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":421,\"length\":0,\"text\":\"  {\",\"line\":24,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":422,\"length\":0,\"text\":\"    gasUsed: 21000n,\",\"line\":25,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":423,\"length\":0,\"text\":\"    logs: [],\",\"line\":26,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":424,\"length\":0,\"text\":\"    status: \\\"success\\\",\",\"line\":27,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":425,\"length\":0,\"text\":\"  },\",\"line\":28,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":426,\"length\":0,\"text\":\"]\",\"line\":30,\"character\":0}]}}"
