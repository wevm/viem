"{\"value\":{\"code\":\"import { encodeFunctionData } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { walletClient } from './config'\\nimport { abi, contractAddress } from './contract'\\n\\nconst eoa = privateKeyToAccount('0x...')\\n\\n// 1. Authorize designation of the Contract onto the EOA.\\nconst authorization = await walletClient.signAuthorization({\\n  account: eoa,\\n  contractAddress,\\n})\\n\\n// 2. Designate the Contract on the EOA, and invoke the \\n//    `initialize` function.\\nconst hash = await walletClient.sendTransaction({\\n  authorizationList: [authorization],\\n  //                  ↑ 3. Pass the Authorization as a parameter.\\n  data: encodeFunctionData({\\n    abi,\\n    functionName: 'initialize',\\n  }),\\n  to: eoa.address,\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function encodeFunctionData<const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi> | undefined = undefined>(parameters: EncodeFunctionDataParameters<abi, functionName>): EncodeFunctionDataReturnType\\nimport encodeFunctionData\",\"start\":9,\"length\":18,\"target\":\"encodeFunctionData\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":51,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":103,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}]\\nimport abi\",\"start\":143,\"length\":3,\"target\":\"abi\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const contractAddress: \\\"0x...\\\"\\nimport contractAddress\",\"start\":148,\"length\":15,\"target\":\"contractAddress\",\"line\":3,\"character\":14},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":191,\"length\":3,\"target\":\"eoa\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":197,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":5,\"character\":12},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":291,\"length\":13,\"target\":\"authorization\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":313,\"length\":12,\"target\":\"walletClient\",\"line\":8,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":326,\"length\":17,\"target\":\"signAuthorization\",\"line\":8,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":348,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":357,\"length\":3,\"target\":\"eoa\",\"line\":9,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) contractAddress?: `0x${string}` | undefined\",\"docs\":\"Address of the contract to delegate to.\",\"tags\":[[\"alias\",\"`address`\"]],\"start\":364,\"length\":15,\"target\":\"contractAddress\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":477,\"length\":4,\"target\":\"hash\",\"line\":15,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":490,\"length\":12,\"target\":\"walletClient\",\"line\":15,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly authorizationList: readonly [SignAuthorizationReturnType];\\n    readonly data: `0x${string}`;\\n    readonly to: `0x${string}`;\\n}, undefined>(args: SendTransactionParameters<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://sepolia.etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api-sepolia.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 11 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined, {\\n    readonly authorizationList: readonly [SignAuthorizationReturnType];\\n    readonly data: `0x${string}`;\\n    readonly to: `0x${string}`;\\n}>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":503,\"length\":15,\"target\":\"sendTransaction\",\"line\":15,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) authorizationList: readonly [SignAuthorizationReturnType]\",\"start\":523,\"length\":17,\"target\":\"authorizationList\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":543,\"length\":13,\"target\":\"authorization\",\"line\":16,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}`\",\"start\":627,\"length\":4,\"target\":\"data\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) encodeFunctionData<readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}], \\\"initialize\\\">(parameters: EncodeFunctionDataParameters<...>): EncodeFunctionDataReturnType\\nimport encodeFunctionData\",\"start\":633,\"length\":18,\"target\":\"encodeFunctionData\",\"line\":18,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}]\",\"start\":658,\"length\":3,\"target\":\"abi\",\"line\":19,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) functionName: `0x${string}` | \\\"initialize\\\" | \\\"ping\\\"\",\"start\":667,\"length\":12,\"target\":\"functionName\",\"line\":20,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":703,\"length\":2,\"target\":\"to\",\"line\":22,\"character\":2},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":707,\"length\":3,\"target\":\"eoa\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":711,\"length\":7,\"target\":\"address\",\"line\":22,\"character\":10}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,2084]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"initialize\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"ping\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":344,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"initialize\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"ping\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":688,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"initialize\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"ping\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1032,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"initialize\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"ping\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1376,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"initialize\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"ping\\\",\\n    \\\"inputs\\\": [],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"pure\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1720,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { sepolia } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n\\nexport const relay = privateKeyToAccount('0x...')\\n \\nexport const walletClient = createWalletClient({\\n  account: relay,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2045,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { encodeFunctionData } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { walletClient } from './config'\\nimport { abi, contractAddress } from './contract'\\n\\nconst eoa = privateKeyToAccount('0x...')\\n\\n// 1. Authorize designation of the Contract onto the EOA.\\nconst authorization = await walletClient.signAuthorization({\\n  account: eoa,\\n  contractAddress,\\n})\\n\\n// 2. Designate the Contract on the EOA, and invoke the \\n//    `initialize` function.\\nconst hash = await walletClient.sendTransaction({\\n  authorizationList: [authorization],\\n  //                  ↑ 3. Pass the Authorization as a parameter.\\n  data: encodeFunctionData({\\n    abi,\\n    functionName: 'initialize',\\n  }),\\n  to: eoa.address,\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function encodeFunctionData<const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi> | undefined = undefined>(parameters: EncodeFunctionDataParameters<abi, functionName>): EncodeFunctionDataReturnType\\nimport encodeFunctionData\",\"start\":9,\"length\":18,\"target\":\"encodeFunctionData\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":51,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":103,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}]\\nimport abi\",\"start\":143,\"length\":3,\"target\":\"abi\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const contractAddress: \\\"0x...\\\"\\nimport contractAddress\",\"start\":148,\"length\":15,\"target\":\"contractAddress\",\"line\":3,\"character\":14},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":191,\"length\":3,\"target\":\"eoa\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":197,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":5,\"character\":12},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":291,\"length\":13,\"target\":\"authorization\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":313,\"length\":12,\"target\":\"walletClient\",\"line\":8,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":326,\"length\":17,\"target\":\"signAuthorization\",\"line\":8,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":348,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":357,\"length\":3,\"target\":\"eoa\",\"line\":9,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) contractAddress?: `0x${string}` | undefined\",\"docs\":\"Address of the contract to delegate to.\",\"tags\":[[\"alias\",\"`address`\"]],\"start\":364,\"length\":15,\"target\":\"contractAddress\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":477,\"length\":4,\"target\":\"hash\",\"line\":15,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":490,\"length\":12,\"target\":\"walletClient\",\"line\":15,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly authorizationList: readonly [SignAuthorizationReturnType];\\n    readonly data: `0x${string}`;\\n    readonly to: `0x${string}`;\\n}, undefined>(args: SendTransactionParameters<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://sepolia.etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api-sepolia.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 11 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined, {\\n    readonly authorizationList: readonly [SignAuthorizationReturnType];\\n    readonly data: `0x${string}`;\\n    readonly to: `0x${string}`;\\n}>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":503,\"length\":15,\"target\":\"sendTransaction\",\"line\":15,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) authorizationList: readonly [SignAuthorizationReturnType]\",\"start\":523,\"length\":17,\"target\":\"authorizationList\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":543,\"length\":13,\"target\":\"authorization\",\"line\":16,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}`\",\"start\":627,\"length\":4,\"target\":\"data\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) encodeFunctionData<readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}], \\\"initialize\\\">(parameters: EncodeFunctionDataParameters<...>): EncodeFunctionDataReturnType\\nimport encodeFunctionData\",\"start\":633,\"length\":18,\"target\":\"encodeFunctionData\",\"line\":18,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"initialize\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}, {\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"ping\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"pure\\\";\\n}]\",\"start\":658,\"length\":3,\"target\":\"abi\",\"line\":19,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) functionName: `0x${string}` | \\\"initialize\\\" | \\\"ping\\\"\",\"start\":667,\"length\":12,\"target\":\"functionName\",\"line\":20,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":703,\"length\":2,\"target\":\"to\",\"line\":22,\"character\":2},{\"type\":\"hover\",\"text\":\"const eoa: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":707,\"length\":3,\"target\":\"eoa\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":711,\"length\":7,\"target\":\"address\",\"line\":22,\"character\":10}],\"tags\":[]}}"
