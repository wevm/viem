"{\"value\":{\"mdx\":\"---\\ndescription: Returns the L2 token address equivalent for a L1 token address as they are not equal.\\n---\\n\\n# getL2TokenAddress\\n\\nReturns the L2 token address equivalent for a L1 token address as they are not equal.\\n\\n:::info\\nOnly works for tokens bridged on default ZKsync Era bridges.\\n:::\\n\\n## Usage\\n\\n:::code-group\\n\\n```ts [example.ts]\\nimport { client } from './config'\\n\\nconst address = await client.getL2TokenAddress({\\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B'\\n})\\n```\\n\\n```ts [config.ts]\\nimport { createPublicClient, http } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { publicActionsL2 } from 'viem/zksync'\\n\\nexport const client = createPublicClient({\\n    chain: zksync,\\n    transport: http(),\\n}).extend(publicActionsL2())\\n```\\n\\n:::\\n\\n## Returns\\n\\n`Address`\\n\\nReturns the L2 token address equivalent for a L1 token address.\\n\\n## Parameters\\n\\n### token\\n\\n- **Type:** `Address`\\n\\nThe address of the token on L1.\\n\\n```ts\\nconst address = await client.getL2TokenAddress({\\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B'\\n})\\n```\\n\\n### bridgeAddress (optional)\\n\\n- **Type:** `Address`\\n\\nThe address of custom bridge, which will be used to get l2 token address.\\n\\n```ts\\nconst address = await client.getL2TokenAddress({\\n    token: '0x5C221E77624690fff6dd741493D735a17716c26B',\\n    bridgeAddress: '0xf8c919286126ccf2e8abc362a15158a461429c82' // [!code focus]\\n})\\n```\\n\\n\",\"document\":[{\"href\":\"/zksync/actions/getL2TokenAddress#getl2tokenaddress\",\"html\":\"</header>\\n<p>Returns the L2 token address equivalent for a L1 token address as they are not equal.</p>\\n<aside data-callout=\\\"info\\\"><p>Only works for tokens bridged on default ZKsync Era bridges.</p></aside>\\n\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#getl2tokenaddress\",\"isPage\":true,\"text\":\"\\nReturns the L2 token address equivalent for a L1 token address as they are not equal.\\nOnly works for tokens bridged on default ZKsync Era bridges.\\n\",\"title\":\"getL2TokenAddress\",\"titles\":[]},{\"href\":\"/zksync/actions/getL2TokenAddress#usage\",\"html\":\"\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { client } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> address</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getL2TokenAddress</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    token: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"config.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { zksync } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicActionsL2 } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/zksync&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    chain: zksync,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">extend</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">publicActionsL2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span></code></pre></div></div>\\n\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#usage\",\"isPage\":false,\"text\":\"\\nimport { client } from &#x27;./config&#x27;\\n \\nconst address = await client.getL2TokenAddress({\\n    token: &#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;\\n})import { createPublicClient, http } from &#x27;viem&#x27;\\nimport { zksync } from &#x27;viem/chains&#x27;\\nimport { publicActionsL2 } from &#x27;viem/zksync&#x27;\\n \\nexport const client = createPublicClient({\\n    chain: zksync,\\n    transport: http(),\\n}).extend(publicActionsL2())\\n\",\"title\":\"Usage\",\"titles\":[\"getL2TokenAddress\"]},{\"href\":\"/zksync/actions/getL2TokenAddress#returns\",\"html\":\"\\n<p><code>Address</code></p>\\n<p>Returns the L2 token address equivalent for a L1 token address.</p>\\n\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#returns\",\"isPage\":false,\"text\":\"\\nAddress\\nReturns the L2 token address equivalent for a L1 token address.\\n\",\"title\":\"Returns\",\"titles\":[\"getL2TokenAddress\"]},{\"href\":\"/zksync/actions/getL2TokenAddress#parameters\",\"html\":\"\\n\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"getL2TokenAddress\"]},{\"href\":\"/zksync/actions/getL2TokenAddress#token\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Address</code></li>\\n</ul>\\n<p>The address of the token on L1.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> address</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getL2TokenAddress</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    token: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#token\",\"isPage\":false,\"text\":\"\\n\\nType: Address\\n\\nThe address of the token on L1.\\nconst address = await client.getL2TokenAddress({\\n    token: &#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;\\n})\\n\",\"title\":\"token\",\"titles\":[\"getL2TokenAddress\",\"Parameters\"]},{\"href\":\"/zksync/actions/getL2TokenAddress#bridgeaddress-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Address</code></li>\\n</ul>\\n<p>The address of custom bridge, which will be used to get l2 token address.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> address</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getL2TokenAddress</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    token: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    bridgeAddress: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xf8c919286126ccf2e8abc362a15158a461429c82&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/zksync/actions/getL2TokenAddress.md#bridgeaddress-optional\",\"isPage\":false,\"text\":\"\\n\\nType: Address\\n\\nThe address of custom bridge, which will be used to get l2 token address.\\nconst address = await client.getL2TokenAddress({\\n    token: &#x27;0x5C221E77624690fff6dd741493D735a17716c26B&#x27;,\\n    bridgeAddress: &#x27;0xf8c919286126ccf2e8abc362a15158a461429c82&#x27;\\n})\",\"title\":\"bridgeAddress (optional)\",\"titles\":[\"getL2TokenAddress\",\"Parameters\"]}]}}"
