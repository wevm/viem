"{\"value\":{\"code\":\"import { parseEther } from 'viem'\\nimport { client } from './config'\\n \\nconst result = await client.simulateBlocks({\\n  blocks: [{\\n    blockOverrides: {\\n      number: 69420n,\\n    },\\n    calls: [\\n      {\\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n        value: parseEther('2'),\\n      },\\n      {\\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n        value: parseEther('1'),\\n      },\\n    ],\\n    stateOverrides: [{\\n      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n      balance: parseEther('10'),\\n    }],\\n  }]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":43,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const result: SimulateBlocksReturnType<readonly [{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>\",\"start\":76,\"length\":6,\"target\":\"result\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":91,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) simulateBlocks: <readonly [{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>(args: SimulateBlocksParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls on block(s) with optional block and state overrides.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateBlocks({\\n  blocks: [{\\n    blockOverrides: {\\n      number: 69420n,\\n    },\\n    calls: [{\\n      {\\n        account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        data: '0xdeadbeef',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      },\\n      {\\n        account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n        value: parseEther('1'),\\n      },\\n    }],\\n    stateOverrides: [{\\n      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n      balance: parseEther('10'),\\n    }],\\n  }]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateParameters }\"],[\"returns\",\"Simulated blocks. {@link SimulateReturnType }\"]],\"start\":98,\"length\":14,\"target\":\"simulateBlocks\",\"line\":3,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) blocks: readonly {\\n    blockOverrides?: BlockOverrides | undefined;\\n    calls: readonly [Prettify<Call<{\\n        readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n        readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n        readonly value: bigint;\\n    }, CallExtraProperties>>, Prettify<...>];\\n    stateOverrides?: StateOverride | undefined;\\n}[]\",\"docs\":\"Blocks to simulate.\",\"start\":117,\"length\":6,\"target\":\"blocks\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) blockOverrides?: BlockOverrides<bigint, number> | undefined\",\"docs\":\"Block overrides.\",\"start\":132,\"length\":14,\"target\":\"blockOverrides\",\"line\":5,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) number?: bigint | undefined\",\"docs\":\"Block number.\",\"start\":156,\"length\":6,\"target\":\"number\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, CallExtraProperties>>, Prettify<...>]\",\"docs\":\"Calls to execute.\",\"start\":183,\"length\":5,\"target\":\"calls\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\"\",\"start\":208,\"length\":4,\"target\":\"from\",\"line\":10,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":268,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":326,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":333,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\"\",\"start\":375,\"length\":4,\"target\":\"from\",\"line\":15,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":435,\"length\":2,\"target\":\"to\",\"line\":16,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":493,\"length\":5,\"target\":\"value\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":500,\"length\":10,\"target\":\"parseEther\",\"line\":17,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) stateOverrides?: StateOverride | undefined\",\"docs\":\"State overrides.\",\"start\":537,\"length\":14,\"target\":\"stateOverrides\",\"line\":20,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":562,\"length\":7,\"target\":\"address\",\"line\":21,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) balance?: bigint | undefined\",\"start\":623,\"length\":7,\"target\":\"balance\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":632,\"length\":10,\"target\":\"parseEther\",\"line\":22,\"character\":15}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,431]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":196,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":392,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseEther } from 'viem'\\nimport { client } from './config'\\n \\nconst result = await client.simulateBlocks({\\n  blocks: [{\\n    blockOverrides: {\\n      number: 69420n,\\n    },\\n    calls: [\\n      {\\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n        value: parseEther('2'),\\n      },\\n      {\\n        from: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n        value: parseEther('1'),\\n      },\\n    ],\\n    stateOverrides: [{\\n      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n      balance: parseEther('10'),\\n    }],\\n  }]\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":43,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const result: SimulateBlocksReturnType<readonly [{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>\",\"start\":76,\"length\":6,\"target\":\"result\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":91,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) simulateBlocks: <readonly [{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}]>(args: SimulateBlocksParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls on block(s) with optional block and state overrides.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateBlocks({\\n  blocks: [{\\n    blockOverrides: {\\n      number: 69420n,\\n    },\\n    calls: [{\\n      {\\n        account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        data: '0xdeadbeef',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      },\\n      {\\n        account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n        to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n        value: parseEther('1'),\\n      },\\n    }],\\n    stateOverrides: [{\\n      address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n      balance: parseEther('10'),\\n    }],\\n  }]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateParameters }\"],[\"returns\",\"Simulated blocks. {@link SimulateReturnType }\"]],\"start\":98,\"length\":14,\"target\":\"simulateBlocks\",\"line\":3,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) blocks: readonly {\\n    blockOverrides?: BlockOverrides | undefined;\\n    calls: readonly [Prettify<Call<{\\n        readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n        readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n        readonly value: bigint;\\n    }, CallExtraProperties>>, Prettify<...>];\\n    stateOverrides?: StateOverride | undefined;\\n}[]\",\"docs\":\"Blocks to simulate.\",\"start\":117,\"length\":6,\"target\":\"blocks\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) blockOverrides?: BlockOverrides<bigint, number> | undefined\",\"docs\":\"Block overrides.\",\"start\":132,\"length\":14,\"target\":\"blockOverrides\",\"line\":5,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) number?: bigint | undefined\",\"docs\":\"Block number.\",\"start\":156,\"length\":6,\"target\":\"number\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\";\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}, CallExtraProperties>>, Prettify<...>]\",\"docs\":\"Calls to execute.\",\"start\":183,\"length\":5,\"target\":\"calls\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\"\",\"start\":208,\"length\":4,\"target\":\"from\",\"line\":10,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":268,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":326,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":333,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) from: \\\"0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929\\\"\",\"start\":375,\"length\":4,\"target\":\"from\",\"line\":15,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":435,\"length\":2,\"target\":\"to\",\"line\":16,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":493,\"length\":5,\"target\":\"value\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":500,\"length\":10,\"target\":\"parseEther\",\"line\":17,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) stateOverrides?: StateOverride | undefined\",\"docs\":\"State overrides.\",\"start\":537,\"length\":14,\"target\":\"stateOverrides\",\"line\":20,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":562,\"length\":7,\"target\":\"address\",\"line\":21,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) balance?: bigint | undefined\",\"start\":623,\"length\":7,\"target\":\"balance\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":632,\"length\":10,\"target\":\"parseEther\",\"line\":22,\"character\":15}],\"tags\":[]}}"
