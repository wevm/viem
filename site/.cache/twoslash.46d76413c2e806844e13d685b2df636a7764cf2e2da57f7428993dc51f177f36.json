"{\"value\":{\"code\":\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { client, owner } from './config'\\n\\nexport const account = await toCoinbaseSmartAccount({\\n  client,\\n  owners: [owner],\\n})\\n\\nconst signature = await account.signUserOperation({ // [!code focus:99]\\n  callData: '0xdeadbeef',\\n  callGasLimit: 141653n,\\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\\n  maxFeePerGas: 15000000000n,\\n  maxPriorityFeePerGas: 2000000000n,\\n  nonce: 0n,\\n  paymasterPostOpGasLimit: 0n,\\n  paymasterVerificationGasLimit: 0n,\\n  preVerificationGas: 53438n,\\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\\n  verificationGasLimit: 259350n,\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\"]],\"start\":9,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":75,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":83,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":121,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"(alias) toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\"]],\"start\":137,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":3,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) client: Client\",\"start\":164,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: readonly (`0x${string}` | OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | WebAuthnAccount>)[]\",\"start\":174,\"length\":6,\"target\":\"owners\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":183,\"length\":5,\"target\":\"owner\",\"line\":5,\"character\":11},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":201,\"length\":9,\"target\":\"signature\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"const account: {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":219,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signUserOperation: (parameters: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}) => Promise<Hex>\",\"docs\":\"Signs the User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signUserOperation({\\n  chainId: 1,\\n  userOperation,\\n})\\n```\"]],\"start\":227,\"length\":17,\"target\":\"signUserOperation\",\"line\":8,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) callData: `0x${string}`\",\"docs\":\"The data to pass to the `sender` during the main execution call.\",\"start\":269,\"length\":8,\"target\":\"callData\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) callGasLimit: bigint\",\"docs\":\"The amount of gas to allocate the main execution call\",\"start\":295,\"length\":12,\"target\":\"callGasLimit\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) factory?: `0x${string}` | undefined\",\"docs\":\"Account factory. Only for new accounts.\",\"start\":320,\"length\":7,\"target\":\"factory\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) factoryData?: `0x${string}` | undefined\",\"docs\":\"Data for account factory.\",\"start\":377,\"length\":11,\"target\":\"factoryData\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxFeePerGas: bigint\",\"docs\":\"Maximum fee per gas.\",\"start\":534,\"length\":12,\"target\":\"maxFeePerGas\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxPriorityFeePerGas: bigint\",\"docs\":\"Maximum priority fee per gas.\",\"start\":564,\"length\":20,\"target\":\"maxPriorityFeePerGas\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) nonce: bigint\",\"docs\":\"Anti-replay parameter.\",\"start\":601,\"length\":5,\"target\":\"nonce\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) paymasterPostOpGasLimit?: bigint | undefined\",\"docs\":\"The amount of gas to allocate for the paymaster post-operation code.\",\"start\":614,\"length\":23,\"target\":\"paymasterPostOpGasLimit\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) paymasterVerificationGasLimit?: bigint | undefined\",\"docs\":\"The amount of gas to allocate for the paymaster validation code.\",\"start\":645,\"length\":29,\"target\":\"paymasterVerificationGasLimit\",\"line\":17,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) preVerificationGas: bigint\",\"docs\":\"Extra gas to pay the Bundler.\",\"start\":682,\"length\":18,\"target\":\"preVerificationGas\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) sender?: `0x${string}` | undefined\",\"docs\":\"The account making the operation.\",\"start\":712,\"length\":6,\"target\":\"sender\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) verificationGasLimit: bigint\",\"docs\":\"The amount of gas to allocate for the verification step.\",\"start\":768,\"length\":20,\"target\":\"verificationGasLimit\",\"line\":20,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,337]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\\nexport const owner = privateKeyToAccount('0x...')\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":298,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { client, owner } from './config'\\n\\nexport const account = await toCoinbaseSmartAccount({\\n  client,\\n  owners: [owner],\\n})\\n\\nconst signature = await account.signUserOperation({ // [!code focus:99]\\n  callData: '0xdeadbeef',\\n  callGasLimit: 141653n,\\n  factory: '0xfb6dab6200b8958c2655c3747708f82243d3f32e',\\n  factoryData: '0xf14ddffc000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000',\\n  maxFeePerGas: 15000000000n,\\n  maxPriorityFeePerGas: 2000000000n,\\n  nonce: 0n,\\n  paymasterPostOpGasLimit: 0n,\\n  paymasterVerificationGasLimit: 0n,\\n  preVerificationGas: 53438n,\\n  sender: '0xE911628bF8428C23f179a07b081325cAe376DE1f',\\n  verificationGasLimit: 259350n,\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\"]],\"start\":9,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":75,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":83,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":121,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"(alias) toCoinbaseSmartAccount(parameters: ToCoinbaseSmartAccountParameters): Promise<ToCoinbaseSmartAccountReturnType>\\nimport toCoinbaseSmartAccount\",\"tags\":[[\"description\",\"Create a Coinbase Smart Account.\"],[\"param\",\"parameters - {@link ToCoinbaseSmartAccountParameters}\"],[\"returns\",\"Coinbase Smart Account. {@link ToCoinbaseSmartAccountReturnType}\"],[\"example\",\"import { toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { client } from './client.js'\\n\\nconst account = toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\"]],\"start\":137,\"length\":22,\"target\":\"toCoinbaseSmartAccount\",\"line\":3,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) client: Client\",\"start\":164,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: readonly (`0x${string}` | OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | WebAuthnAccount>)[]\",\"start\":174,\"length\":6,\"target\":\"owners\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":183,\"length\":5,\"target\":\"owner\",\"line\":5,\"character\":11},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":201,\"length\":9,\"target\":\"signature\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"const account: {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, {\\n        readonly inputs: readonly [{\\n            readonly name: \\\"owner\\\";\\n            readonly type: \\\"bytes\\\";\\n        }];\\n        readonly name: \\\"AlreadyOwner\\\";\\n        readonly type: \\\"error\\\";\\n    }, ... 43 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":219,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signUserOperation: (parameters: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}) => Promise<Hex>\",\"docs\":\"Signs the User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signUserOperation({\\n  chainId: 1,\\n  userOperation,\\n})\\n```\"]],\"start\":227,\"length\":17,\"target\":\"signUserOperation\",\"line\":8,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) callData: `0x${string}`\",\"docs\":\"The data to pass to the `sender` during the main execution call.\",\"start\":269,\"length\":8,\"target\":\"callData\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) callGasLimit: bigint\",\"docs\":\"The amount of gas to allocate the main execution call\",\"start\":295,\"length\":12,\"target\":\"callGasLimit\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) factory?: `0x${string}` | undefined\",\"docs\":\"Account factory. Only for new accounts.\",\"start\":320,\"length\":7,\"target\":\"factory\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) factoryData?: `0x${string}` | undefined\",\"docs\":\"Data for account factory.\",\"start\":377,\"length\":11,\"target\":\"factoryData\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxFeePerGas: bigint\",\"docs\":\"Maximum fee per gas.\",\"start\":534,\"length\":12,\"target\":\"maxFeePerGas\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxPriorityFeePerGas: bigint\",\"docs\":\"Maximum priority fee per gas.\",\"start\":564,\"length\":20,\"target\":\"maxPriorityFeePerGas\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) nonce: bigint\",\"docs\":\"Anti-replay parameter.\",\"start\":601,\"length\":5,\"target\":\"nonce\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) paymasterPostOpGasLimit?: bigint | undefined\",\"docs\":\"The amount of gas to allocate for the paymaster post-operation code.\",\"start\":614,\"length\":23,\"target\":\"paymasterPostOpGasLimit\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) paymasterVerificationGasLimit?: bigint | undefined\",\"docs\":\"The amount of gas to allocate for the paymaster validation code.\",\"start\":645,\"length\":29,\"target\":\"paymasterVerificationGasLimit\",\"line\":17,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) preVerificationGas: bigint\",\"docs\":\"Extra gas to pay the Bundler.\",\"start\":682,\"length\":18,\"target\":\"preVerificationGas\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) sender?: `0x${string}` | undefined\",\"docs\":\"The account making the operation.\",\"start\":712,\"length\":6,\"target\":\"sender\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) verificationGasLimit: bigint\",\"docs\":\"The amount of gas to allocate for the verification step.\",\"start\":768,\"length\":20,\"target\":\"verificationGasLimit\",\"line\":20,\"character\":2}],\"tags\":[]}}"
