"{\"value\":{\"code\":\"const signature = await walletClient.signMessage({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n  message: { raw: '0x68656c6c6f20776f726c64' }, // [!code focus:1]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":24,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<undefined>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":37,\"length\":11,\"target\":\"signMessage\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":53,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":110,\"length\":7,\"target\":\"message\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) raw: `0x${string}` | ByteArray\",\"docs\":\"Raw data representation of the message.\",\"start\":121,\"length\":3,\"target\":\"raw\",\"line\":2,\"character\":13}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,246]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import 'viem/window'\\n\\n// ---cut---\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const walletClient = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum!),\\n})\\n// ---cut---\\nconst signature = await walletClient.signMessage({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n  message: { raw: '0x68656c6c6f20776f726c64' }, // [!code focus:1]\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":24,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<undefined>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":37,\"length\":11,\"target\":\"signMessage\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":53,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":110,\"length\":7,\"target\":\"message\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) raw: `0x${string}` | ByteArray\",\"docs\":\"Raw data representation of the message.\",\"start\":121,\"length\":3,\"target\":\"raw\",\"line\":2,\"character\":13}],\"tags\":[]}}"
