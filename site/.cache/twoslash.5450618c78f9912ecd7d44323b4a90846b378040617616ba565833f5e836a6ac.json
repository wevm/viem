"{\"value\":{\"code\":\"const authorization = await client.signAuthorization({ \\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \\n}) \\n\\nconst hash = await client.execute({\\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n  authorizationList: [authorization], // [!code focus]\\n  batches: [\\n    {\\n      calls: [\\n        {\\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n          value: parseEther('1')\\n        },\\n      ]\\n    },\\n    {\\n      calls: [\\n        {\\n          data: '0xdeadbeef',\\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n        },\\n      ],\\n    },\\n  ], \\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & ... 1 more ... & WalletActions<...>>\",\"start\":28,\"length\":6,\"target\":\"client\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":35,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":58,\"length\":15,\"target\":\"contractAddress\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":133,\"length\":4,\"target\":\"hash\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & ... 1 more ... & WalletActions<...>>\",\"start\":146,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) execute: <readonly unknown[], undefined>(parameters: ExecuteParameters<readonly unknown[], {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined>) => Promise<ExecuteReturnType>\",\"docs\":\"Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\",\"tags\":[[\"example\",\"```ts\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7821Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7821Actions())\\n\\nconst hash = await client.execute({\\n  account,\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: 69420n,\\n    },\\n  }],\\n  to: account.address,\\n})\\n```\"],[\"example\",\"```ts\\n// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7821Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createClient({\\n  account,\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7821Actions())\\n\\nconst hash = await client.execute({\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: 69420n,\\n    },\\n  }],\\n  to: account.address,\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link ExecuteParameters}\"],[\"returns\",\"Transaction hash. {@link ExecuteReturnType}\"]],\"start\":153,\"length\":7,\"target\":\"execute\",\"line\":4,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Address that will execute the calls.\",\"start\":165,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorizationList?: AuthorizationList<number, boolean> | undefined\",\"start\":222,\"length\":17,\"target\":\"authorizationList\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":242,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) batches: ({\\n    calls: {\\n        to: string;\\n        value: bigint;\\n    }[];\\n} | {\\n    calls: {\\n        data: string;\\n        to: string;\\n    }[];\\n})[]\",\"start\":277,\"length\":7,\"target\":\"batches\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    to: string;\\n    value: bigint;\\n}[]\",\"start\":300,\"length\":5,\"target\":\"calls\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":329,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":389,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":10},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":396,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    data: string;\\n    to: string;\\n}[]\",\"start\":450,\"length\":5,\"target\":\"calls\",\"line\":17,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) data: string\",\"start\":479,\"length\":4,\"target\":\"data\",\"line\":19,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":509,\"length\":2,\"target\":\"to\",\"line\":20,\"character\":10}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,442]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":0,\"end\":13}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"// @noErrors\\nimport { createWalletClient, http, parseEther } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions, erc7821Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nexport const client = createWalletClient({\\n  account,\\n  chain: mainnet,\\n  transport: http(),\\n})\\n  .extend(eip7702Actions())\\n  .extend(erc7821Actions())\\n// ---cut---\\nconst authorization = await client.signAuthorization({ \\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \\n}) \\n\\nconst hash = await client.execute({\\n  address: '0xcb98643b8786950F0461f3B0edf99D88F274574D',\\n  authorizationList: [authorization], // [!code focus]\\n  batches: [\\n    {\\n      calls: [\\n        {\\n          to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n          value: parseEther('1')\\n        },\\n      ]\\n    },\\n    {\\n      calls: [\\n        {\\n          data: '0xdeadbeef',\\n          to: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n        },\\n      ],\\n    },\\n  ], \\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & ... 1 more ... & WalletActions<...>>\",\"start\":28,\"length\":6,\"target\":\"client\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":35,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":58,\"length\":15,\"target\":\"contractAddress\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":133,\"length\":4,\"target\":\"hash\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & ... 1 more ... & WalletActions<...>>\",\"start\":146,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) execute: <readonly unknown[], undefined>(parameters: ExecuteParameters<readonly unknown[], {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined>) => Promise<ExecuteReturnType>\",\"docs\":\"Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).\",\"tags\":[[\"example\",\"```ts\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7821Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7821Actions())\\n\\nconst hash = await client.execute({\\n  account,\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: 69420n,\\n    },\\n  }],\\n  to: account.address,\\n})\\n```\"],[\"example\",\"```ts\\n// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7821Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createClient({\\n  account,\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7821Actions())\\n\\nconst hash = await client.execute({\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: 69420n,\\n    },\\n  }],\\n  to: account.address,\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link ExecuteParameters}\"],[\"returns\",\"Transaction hash. {@link ExecuteReturnType}\"]],\"start\":153,\"length\":7,\"target\":\"execute\",\"line\":4,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Address that will execute the calls.\",\"start\":165,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorizationList?: AuthorizationList<number, boolean> | undefined\",\"start\":222,\"length\":17,\"target\":\"authorizationList\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":242,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) batches: ({\\n    calls: {\\n        to: string;\\n        value: bigint;\\n    }[];\\n} | {\\n    calls: {\\n        data: string;\\n        to: string;\\n    }[];\\n})[]\",\"start\":277,\"length\":7,\"target\":\"batches\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    to: string;\\n    value: bigint;\\n}[]\",\"start\":300,\"length\":5,\"target\":\"calls\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":329,\"length\":2,\"target\":\"to\",\"line\":11,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":389,\"length\":5,\"target\":\"value\",\"line\":12,\"character\":10},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":396,\"length\":10,\"target\":\"parseEther\",\"line\":12,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    data: string;\\n    to: string;\\n}[]\",\"start\":450,\"length\":5,\"target\":\"calls\",\"line\":17,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) data: string\",\"start\":479,\"length\":4,\"target\":\"data\",\"line\":19,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":509,\"length\":2,\"target\":\"to\",\"line\":20,\"character\":10}],\"tags\":[]}}"
