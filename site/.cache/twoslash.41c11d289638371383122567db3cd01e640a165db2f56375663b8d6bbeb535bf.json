"{\"value\":{\"code\":\"const unwatch = publicClient.watchPendingTransactions(\\n  { \\n    pollingInterval: 1_000, // [!code focus]\\n    onTransactions: hashes => console.log(hashes),\\n  }\\n)\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const unwatch: WatchPendingTransactionsReturnType\",\"start\":6,\"length\":7,\"target\":\"unwatch\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":16,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchPendingTransactions: (args: WatchPendingTransactionsParameters<HttpTransport<undefined, false>>) => WatchPendingTransactionsReturnType\",\"docs\":\"Watches and returns pending transaction hashes.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\\n- JSON-RPC Methods:\\n  - When `poll: true`\\n    - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\\n    - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newPendingTransactions\\\"` event.\",\"tags\":[[\"remarks\",\"This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\"],[\"param\",\"args - {@link WatchPendingTransactionsParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchPendingTransactions({\\n  onTransactions: (hashes) => console.log(hashes),\\n})\"]],\"start\":29,\"length\":24,\"target\":\"watchPendingTransactions\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) pollingInterval?: number | undefined\",\"docs\":\"Polling frequency (in ms). Defaults to Client's pollingInterval config.\",\"tags\":[[\"default\",\"client.pollingInterval\"]],\"start\":64,\"length\":15,\"target\":\"pollingInterval\",\"line\":2,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) onTransactions: OnTransactionsFn\",\"docs\":\"The callback to call when new transactions are received.\",\"start\":109,\"length\":14,\"target\":\"onTransactions\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) hashes: OnTransactionsParameter\",\"start\":125,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":20},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":135,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":30},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":143,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":38},{\"type\":\"hover\",\"text\":\"(parameter) hashes: OnTransactionsParameter\",\"start\":147,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":42}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,204]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":191,\"end\":204}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n// ---cut---\\n// @noErrors\\nconst unwatch = publicClient.watchPendingTransactions(\\n  { \\n    pollingInterval: 1_000, // [!code focus]\\n    onTransactions: hashes => console.log(hashes),\\n  }\\n)\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const unwatch: WatchPendingTransactionsReturnType\",\"start\":6,\"length\":7,\"target\":\"unwatch\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":16,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchPendingTransactions: (args: WatchPendingTransactionsParameters<HttpTransport<undefined, false>>) => WatchPendingTransactionsReturnType\",\"docs\":\"Watches and returns pending transaction hashes.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\\n- JSON-RPC Methods:\\n  - When `poll: true`\\n    - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\\n    - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newPendingTransactions\\\"` event.\",\"tags\":[[\"remarks\",\"This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\"],[\"param\",\"args - {@link WatchPendingTransactionsParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchPendingTransactions({\\n  onTransactions: (hashes) => console.log(hashes),\\n})\"]],\"start\":29,\"length\":24,\"target\":\"watchPendingTransactions\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) pollingInterval?: number | undefined\",\"docs\":\"Polling frequency (in ms). Defaults to Client's pollingInterval config.\",\"tags\":[[\"default\",\"client.pollingInterval\"]],\"start\":64,\"length\":15,\"target\":\"pollingInterval\",\"line\":2,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) onTransactions: OnTransactionsFn\",\"docs\":\"The callback to call when new transactions are received.\",\"start\":109,\"length\":14,\"target\":\"onTransactions\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) hashes: OnTransactionsParameter\",\"start\":125,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":20},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":135,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":30},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":143,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":38},{\"type\":\"hover\",\"text\":\"(parameter) hashes: OnTransactionsParameter\",\"start\":147,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":42}],\"tags\":[]}}"
