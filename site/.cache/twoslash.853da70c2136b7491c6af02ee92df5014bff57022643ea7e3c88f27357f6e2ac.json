"{\"value\":{\"code\":\"import { account, walletClient, publicClient } from './client'\\n\\nconst signature = await walletClient.signMessage({\\n  account,\\n  message: 'hello world',\\n})\\n// [!code focus:99]\\nconst valid = await publicClient.verifyMessage({\\n  address: account.address,\\n  message: 'hello world',\\n  signature,\\n})\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":32,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":70,\"length\":9,\"target\":\"signature\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":88,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<undefined>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":101,\"length\":11,\"target\":\"signMessage\",\"line\":2,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":117,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":128,\"length\":7,\"target\":\"message\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":181,\"length\":5,\"target\":\"valid\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":195,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) verifyMessage: (args: VerifyMessageParameters) => Promise<VerifyMessageReturnType>\",\"docs\":\"Verify that a message was signed by the provided address.\\n\\nCompatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/actions/public/verifyMessage\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyMessageParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyMessageReturnType}\"]],\"start\":208,\"length\":13,\"target\":\"verifyMessage\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the original message.\",\"start\":226,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":235,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":11},{\"type\":\"hover\",\"text\":\"any\",\"start\":243,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"docs\":\"The message to be verified.\",\"start\":254,\"length\":7,\"target\":\"message\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | Signature\",\"docs\":\"The signature that was generated by signing the message with the address's private key.\",\"start\":280,\"length\":9,\"target\":\"signature\",\"line\":10,\"character\":2},{\"type\":\"tag\",\"name\":\"log\",\"start\":294,\"length\":0,\"text\":\"true\",\"line\":13,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[853,867],[0,559]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"↓ JSON-RPC Account\",\"start\":355,\"end\":383},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"↓ Local Account\",\"start\":443,\"end\":468},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"true\",\"start\":853,\"end\":867}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport 'viem/window'\\n// ---cut---\\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\\nexport const walletClient = createWalletClient({\\n  transport: custom(window.ethereum!)\\n})\\n\\n// @log: ↓ JSON-RPC Account\\nexport const [account] = await walletClient.getAddresses()\\n\\n// @log: ↓ Local Account\\n\\n// export const account = privateKeyToAccount(...)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":520,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { account, walletClient, publicClient } from './client'\\n\\nconst signature = await walletClient.signMessage({\\n  account,\\n  message: 'hello world',\\n})\\n// [!code focus:99]\\nconst valid = await publicClient.verifyMessage({\\n  address: account.address,\\n  message: 'hello world',\\n  signature,\\n})\\n// @log: true\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":32,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":70,\"length\":9,\"target\":\"signature\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":88,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<undefined>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":101,\"length\":11,\"target\":\"signMessage\",\"line\":2,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":117,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":128,\"length\":7,\"target\":\"message\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":181,\"length\":5,\"target\":\"valid\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":195,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) verifyMessage: (args: VerifyMessageParameters) => Promise<VerifyMessageReturnType>\",\"docs\":\"Verify that a message was signed by the provided address.\\n\\nCompatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/actions/public/verifyMessage\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyMessageParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyMessageReturnType}\"]],\"start\":208,\"length\":13,\"target\":\"verifyMessage\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the original message.\",\"start\":226,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":235,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":11},{\"type\":\"hover\",\"text\":\"any\",\"start\":243,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"docs\":\"The message to be verified.\",\"start\":254,\"length\":7,\"target\":\"message\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | Signature\",\"docs\":\"The signature that was generated by signing the message with the address's private key.\",\"start\":280,\"length\":9,\"target\":\"signature\",\"line\":10,\"character\":2}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":294,\"length\":0,\"text\":\"true\",\"line\":13,\"character\":0}]}}"
