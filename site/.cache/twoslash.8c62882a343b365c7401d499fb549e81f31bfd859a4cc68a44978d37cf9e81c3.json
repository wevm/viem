"{\"value\":{\"code\":\"const abi = [{ // [!code focus]\\n  type: 'function', // [!code focus]\\n  name: 'balanceOf', // [!code focus]\\n  stateMutability: 'view', // [!code focus]\\n  inputs: [{ type: 'address' }], // [!code focus]\\n  outputs: [{ type: 'uint256' }], // [!code focus]\\n}] as const // [!code focus]\\n\\nconst result = client.readContract({\\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\\n  abi, \\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":6,\"length\":3,\"target\":\"abi\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) type: \\\"function\\\"\",\"start\":34,\"length\":4,\"target\":\"type\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: \\\"balanceOf\\\"\",\"start\":71,\"length\":4,\"target\":\"name\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) stateMutability: \\\"view\\\"\",\"start\":109,\"length\":15,\"target\":\"stateMutability\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) inputs: readonly [{\\n    readonly type: \\\"address\\\";\\n}]\",\"start\":153,\"length\":6,\"target\":\"inputs\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) type: \\\"address\\\"\",\"start\":164,\"length\":4,\"target\":\"type\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) outputs: readonly [{\\n    readonly type: \\\"uint256\\\";\\n}]\",\"start\":203,\"length\":7,\"target\":\"outputs\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) type: \\\"uint256\\\"\",\"start\":215,\"length\":4,\"target\":\"type\",\"line\":5,\"character\":14},{\"type\":\"hover\",\"text\":\"type const = readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":258,\"length\":5,\"target\":\"const\",\"line\":6,\"character\":6},{\"type\":\"tag\",\"name\":\"log\",\"start\":281,\"length\":0,\"text\":\"      ↑ const assertion\",\"line\":7,\"character\":0},{\"type\":\"hover\",\"text\":\"const result: Promise<bigint>\",\"start\":288,\"length\":6,\"target\":\"result\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":297,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}], \\\"balanceOf\\\", readonly [...]>(args: ReadContractParameters<...>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":304,\"length\":12,\"target\":\"readContract\",\"line\":8,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":321,\"length\":7,\"target\":\"address\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":378,\"length\":3,\"target\":\"abi\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"balanceOf\\\"\",\"start\":386,\"length\":12,\"target\":\"functionName\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`]\",\"start\":415,\"length\":4,\"target\":\"args\",\"line\":12,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[412,445],[0,131]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      ↑ const assertion\",\"start\":412,\"end\":445}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createPublicClient, http, parseAbi } from 'viem'\\n\\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\nconst abi = [{ // [!code focus]\\n  type: 'function', // [!code focus]\\n  name: 'balanceOf', // [!code focus]\\n  stateMutability: 'view', // [!code focus]\\n  inputs: [{ type: 'address' }], // [!code focus]\\n  outputs: [{ type: 'uint256' }], // [!code focus]\\n}] as const // [!code focus]\\n// @log:       ↑ const assertion\\n\\nconst result = client.readContract({\\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\\n  abi, \\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":6,\"length\":3,\"target\":\"abi\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) type: \\\"function\\\"\",\"start\":34,\"length\":4,\"target\":\"type\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: \\\"balanceOf\\\"\",\"start\":71,\"length\":4,\"target\":\"name\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) stateMutability: \\\"view\\\"\",\"start\":109,\"length\":15,\"target\":\"stateMutability\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) inputs: readonly [{\\n    readonly type: \\\"address\\\";\\n}]\",\"start\":153,\"length\":6,\"target\":\"inputs\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) type: \\\"address\\\"\",\"start\":164,\"length\":4,\"target\":\"type\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) outputs: readonly [{\\n    readonly type: \\\"uint256\\\";\\n}]\",\"start\":203,\"length\":7,\"target\":\"outputs\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) type: \\\"uint256\\\"\",\"start\":215,\"length\":4,\"target\":\"type\",\"line\":5,\"character\":14},{\"type\":\"hover\",\"text\":\"type const = readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":258,\"length\":5,\"target\":\"const\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"const result: Promise<bigint>\",\"start\":288,\"length\":6,\"target\":\"result\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":297,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}], \\\"balanceOf\\\", readonly [...]>(args: ReadContractParameters<...>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":304,\"length\":12,\"target\":\"readContract\",\"line\":8,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":321,\"length\":7,\"target\":\"address\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"balanceOf\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}]\",\"start\":378,\"length\":3,\"target\":\"abi\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"balanceOf\\\"\",\"start\":386,\"length\":12,\"target\":\"functionName\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`]\",\"start\":415,\"length\":4,\"target\":\"args\",\"line\":12,\"character\":2}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":281,\"length\":0,\"text\":\"      ↑ const assertion\",\"line\":7,\"character\":0}]}}"
