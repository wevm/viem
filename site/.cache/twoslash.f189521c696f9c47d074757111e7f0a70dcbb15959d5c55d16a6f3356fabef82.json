"{\"value\":{\"code\":\"import { createWalletClient, http } from 'viem'\\nimport { anvil } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental' \\n \\nconst walletClient = createWalletClient({\\n  chain: anvil,\\n  transport: http(),\\n}).extend(eip7702Actions()) \\n\\nconst authorization = await walletClient.signAuthorization({/* ... */}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) const anvil: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport anvil\",\"start\":57,\"length\":5,\"target\":\"anvil\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function eip7702Actions(): <account extends Account | undefined = Account | undefined>(client: Client<Transport, Chain | undefined, account>) => Eip7702Actions<account>\\nimport eip7702Actions\",\"docs\":\"A suite of EIP-7702 Actions.\",\"tags\":[[\"example\",\"import { createClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst hash = await client.signAuthorization({ ... })\"]],\"start\":93,\"length\":14,\"target\":\"eip7702Actions\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":144,\"length\":12,\"target\":\"walletClient\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":159,\"length\":18,\"target\":\"createWalletClient\",\"line\":4,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":182,\"length\":5,\"target\":\"chain\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const anvil: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport anvil\",\"start\":189,\"length\":5,\"target\":\"anvil\",\"line\":5,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":198,\"length\":9,\"target\":\"transport\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":209,\"length\":4,\"target\":\"http\",\"line\":6,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) extend: <Eip7702Actions<undefined>>(fn: (client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, WalletActions<...>>) => Eip7702Actions<...>) => Client<...>\",\"start\":220,\"length\":6,\"target\":\"extend\",\"line\":7,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) eip7702Actions(): <account extends Account | undefined = Account | undefined>(client: Client<Transport, Chain | undefined, account>) => Eip7702Actions<account>\\nimport eip7702Actions\",\"docs\":\"A suite of EIP-7702 Actions.\",\"tags\":[[\"example\",\"import { createClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst hash = await client.signAuthorization({ ... })\"]],\"start\":227,\"length\":14,\"target\":\"eip7702Actions\",\"line\":7,\"character\":10},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":253,\"length\":13,\"target\":\"authorization\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":275,\"length\":12,\"target\":\"walletClient\",\"line\":9,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":288,\"length\":17,\"target\":\"signAuthorization\",\"line\":9,\"character\":41}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,13]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":0,\"end\":13}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"// @noErrors\\nimport { createWalletClient, http } from 'viem'\\nimport { anvil } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental' \\n \\nconst walletClient = createWalletClient({\\n  chain: anvil,\\n  transport: http(),\\n}).extend(eip7702Actions()) \\n\\nconst authorization = await walletClient.signAuthorization({/* ... */}) // [!code focus]\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) const anvil: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport anvil\",\"start\":57,\"length\":5,\"target\":\"anvil\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function eip7702Actions(): <account extends Account | undefined = Account | undefined>(client: Client<Transport, Chain | undefined, account>) => Eip7702Actions<account>\\nimport eip7702Actions\",\"docs\":\"A suite of EIP-7702 Actions.\",\"tags\":[[\"example\",\"import { createClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst hash = await client.signAuthorization({ ... })\"]],\"start\":93,\"length\":14,\"target\":\"eip7702Actions\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":144,\"length\":12,\"target\":\"walletClient\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":159,\"length\":18,\"target\":\"createWalletClient\",\"line\":4,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":182,\"length\":5,\"target\":\"chain\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const anvil: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport anvil\",\"start\":189,\"length\":5,\"target\":\"anvil\",\"line\":5,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":198,\"length\":9,\"target\":\"transport\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":209,\"length\":4,\"target\":\"http\",\"line\":6,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) extend: <Eip7702Actions<undefined>>(fn: (client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, WalletActions<...>>) => Eip7702Actions<...>) => Client<...>\",\"start\":220,\"length\":6,\"target\":\"extend\",\"line\":7,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) eip7702Actions(): <account extends Account | undefined = Account | undefined>(client: Client<Transport, Chain | undefined, account>) => Eip7702Actions<account>\\nimport eip7702Actions\",\"docs\":\"A suite of EIP-7702 Actions.\",\"tags\":[[\"example\",\"import { createClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst hash = await client.signAuthorization({ ... })\"]],\"start\":227,\"length\":14,\"target\":\"eip7702Actions\",\"line\":7,\"character\":10},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":253,\"length\":13,\"target\":\"authorization\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":275,\"length\":12,\"target\":\"walletClient\",\"line\":9,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":288,\"length\":17,\"target\":\"signAuthorization\",\"line\":9,\"character\":41}],\"tags\":[]}}"
