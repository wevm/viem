"{\"value\":{\"code\":\"import { parseAbiItem } from 'viem'\\nimport { publicClient } from './client'\\n\\nconst filter = await publicClient.createEventFilter({ // [!code focus:99]\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await publicClient.getFilterChanges({ filter })\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbiItem<signature extends string | readonly string[] | readonly unknown[]>(signature: Narrow<signature> & ((signature extends string ? string extends signature ? unknown : Signature<signature> : never) | (signature extends readonly string[] ? signature extends readonly [] ? Error<\\\"At least one signature required.\\\"> : string[] extends signature ? unknown : Signatures<signature> : never))): ParseAbiItem<signature>\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":9,\"length\":12,\"target\":\"parseAbiItem\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":45,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    ... 6 more ...;\\n    strict: undefined;\\n}\",\"start\":83,\"length\":6,\"target\":\"filter\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":98,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createEventFilter: <{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}, [...], undefined, undefined, undefined, \\\"Transfer\\\", undefined>(args?: CreateEventFilterParameters<...> | undefined) => Promise<...>\",\"docs\":\"Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createEventFilter\\n- JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\",\"tags\":[[\"param\",\"args - {@link CreateEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\\n})\"]],\"start\":111,\"length\":17,\"target\":\"createEventFilter\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address?: `0x${string}` | `0x${string}`[] | undefined\",\"start\":153,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) event: {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}\",\"start\":210,\"length\":5,\"target\":\"event\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbiItem<\\\"event Transfer(address indexed, address indexed, uint256)\\\">(signature: \\\"event Transfer(address indexed, address indexed, uint256)\\\"): {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [...];\\n}\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":217,\"length\":12,\"target\":\"parseAbiItem\",\"line\":5,\"character\":9},{\"type\":\"hover\",\"text\":\"const logs: Log<bigint, number, false, {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}, undefined, [...], \\\"Transfer\\\">[]\",\"start\":301,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":314,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>(args: GetFilterChangesParameters<...>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":327,\"length\":16,\"target\":\"getFilterChanges\",\"line\":7,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}], ... 4 more ..., undefined>\",\"start\":346,\"length\":6,\"target\":\"filter\",\"line\":7,\"character\":51},{\"type\":\"tag\",\"name\":\"log\",\"start\":356,\"length\":0,\"text\":\"Output: [{ ... }, { ... }, { ... }]\",\"line\":9,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[1199,1244],[0,843]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: [{ ... }, { ... }, { ... }]\",\"start\":1199,\"end\":1244}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":201,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":402,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":603,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":804,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseAbiItem } from 'viem'\\nimport { publicClient } from './client'\\n\\nconst filter = await publicClient.createEventFilter({ // [!code focus:99]\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await publicClient.getFilterChanges({ filter })\\n// @log: Output: [{ ... }, { ... }, { ... }]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbiItem<signature extends string | readonly string[] | readonly unknown[]>(signature: Narrow<signature> & ((signature extends string ? string extends signature ? unknown : Signature<signature> : never) | (signature extends readonly string[] ? signature extends readonly [] ? Error<\\\"At least one signature required.\\\"> : string[] extends signature ? unknown : Signatures<signature> : never))): ParseAbiItem<signature>\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":9,\"length\":12,\"target\":\"parseAbiItem\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":45,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    ... 6 more ...;\\n    strict: undefined;\\n}\",\"start\":83,\"length\":6,\"target\":\"filter\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":98,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createEventFilter: <{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}, [...], undefined, undefined, undefined, \\\"Transfer\\\", undefined>(args?: CreateEventFilterParameters<...> | undefined) => Promise<...>\",\"docs\":\"Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createEventFilter\\n- JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\",\"tags\":[[\"param\",\"args - {@link CreateEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\\n})\"]],\"start\":111,\"length\":17,\"target\":\"createEventFilter\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address?: `0x${string}` | `0x${string}`[] | undefined\",\"start\":153,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) event: {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}\",\"start\":210,\"length\":5,\"target\":\"event\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbiItem<\\\"event Transfer(address indexed, address indexed, uint256)\\\">(signature: \\\"event Transfer(address indexed, address indexed, uint256)\\\"): {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [...];\\n}\\nimport parseAbiItem\",\"docs\":\"Parses human-readable ABI item (e.g. error, event, function) into \\n{@link \\nAbi\\n}\\n item\",\"tags\":[[\"param\",\"signature - Human-readable ABI item\"],[\"returns\",\"Parsed {@link Abi} item\"],[\"example\",\"const abiItem = parseAbiItem('function balanceOf(address owner) view returns (uint256)')\\n//    ^? const abiItem: { name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\";...\"],[\"example\",\"const abiItem = parseAbiItem([\\n  //  ^? const abiItem: { name: \\\"foo\\\"; type: \\\"function\\\"; stateMutability: \\\"view\\\"; inputs:...\\n  'function foo(Baz bar) view returns (string)',\\n  'struct Baz { string name; }',\\n])\"]],\"start\":217,\"length\":12,\"target\":\"parseAbiItem\",\"line\":5,\"character\":9},{\"type\":\"hover\",\"text\":\"const logs: Log<bigint, number, false, {\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}, undefined, [...], \\\"Transfer\\\">[]\",\"start\":301,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":314,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}], \\\"Transfer\\\", undefined, undefined, undefined>(args: GetFilterChangesParameters<...>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":327,\"length\":16,\"target\":\"getFilterChanges\",\"line\":7,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<\\\"event\\\", [{\\n    readonly name: \\\"Transfer\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"uint256\\\";\\n    }];\\n}], ... 4 more ..., undefined>\",\"start\":346,\"length\":6,\"target\":\"filter\",\"line\":7,\"character\":51}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":356,\"length\":0,\"text\":\"Output: [{ ... }, { ... }, { ... }]\",\"line\":9,\"character\":0}]}}"
