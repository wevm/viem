"{\"value\":{\"code\":\"import { publicClient } from './client'\\n\\nconst unwatch = publicClient.watchBlocks( // [!code focus:99]\\n  { onBlock: block => console.log(block) }\\n)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchBlocksReturnType\",\"start\":47,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":57,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchBlocks: <false, \\\"latest\\\">(args: WatchBlocksParameters<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, false, \\\"latest\\\">) => WatchBlocksReturnType\",\"docs\":\"Watches and returns information for incoming blocks.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchBlocks\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\\n- JSON-RPC Methods:\\n  - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newHeads\\\"` event.\",\"tags\":[[\"param\",\"args - {@link WatchBlocksParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchBlocks({\\n  onBlock: (block) => console.log(block),\\n})\"]],\"start\":70,\"length\":11,\"target\":\"watchBlocks\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) onBlock: OnBlock<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, false, \\\"latest\\\">\",\"docs\":\"The callback to call when a new block is received.\",\"start\":107,\"length\":7,\"target\":\"onBlock\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) block: {\\n    number: bigint;\\n    hash: `0x${string}`;\\n    nonce: `0x${string}`;\\n    logsBloom: `0x${string}`;\\n    baseFeePerGas: bigint | null;\\n    blobGasUsed: bigint;\\n    difficulty: bigint;\\n    excessBlobGas: bigint;\\n    extraData: Hex;\\n    ... 17 more ...;\\n    transactions: `0x${string}`[];\\n}\",\"start\":116,\"length\":5,\"target\":\"block\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":125,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":133,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":30},{\"type\":\"hover\",\"text\":\"(parameter) block: {\\n    number: bigint;\\n    hash: `0x${string}`;\\n    nonce: `0x${string}`;\\n    logsBloom: `0x${string}`;\\n    baseFeePerGas: bigint | null;\\n    blobGasUsed: bigint;\\n    difficulty: bigint;\\n    excessBlobGas: bigint;\\n    extraData: Hex;\\n    ... 17 more ...;\\n    transactions: `0x${string}`[];\\n}\",\"start\":137,\"length\":5,\"target\":\"block\",\"line\":3,\"character\":34},{\"type\":\"tag\",\"name\":\"log\",\"start\":148,\"length\":0,\"text\":\"> {\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":149,\"length\":0,\"text\":\" baseFeePerGas: 10789405161n,\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":150,\"length\":0,\"text\":\" difficulty: 11569232145203128n,\",\"line\":7,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":151,\"length\":0,\"text\":\" extraData: '0x75732d656173742d38',\",\"line\":8,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":152,\"length\":0,\"text\":\" ...\",\"line\":9,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":153,\"length\":0,\"text\":\"}\",\"line\":10,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":154,\"length\":0,\"text\":\"> {\",\"line\":11,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":155,\"length\":0,\"text\":\" baseFeePerGas: 12394051511n,\",\"line\":12,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":156,\"length\":0,\"text\":\" difficulty: 11512315412421123n,\",\"line\":13,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":157,\"length\":0,\"text\":\" extraData: '0x5123ab1512dd14aa',\",\"line\":14,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":158,\"length\":0,\"text\":\" ...\",\"line\":15,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":159,\"length\":0,\"text\":\"}\",\"line\":17,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[714,725],[699,713],[655,698],[612,654],[572,611],[558,571],[546,557],[531,545],[485,530],[442,484],[402,441],[388,401],[0,240]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"> {\",\"start\":388,\"end\":401},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" baseFeePerGas: 10789405161n,\",\"start\":402,\"end\":441},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" difficulty: 11569232145203128n,\",\"start\":442,\"end\":484},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" extraData: '0x75732d656173742d38',\",\"start\":485,\"end\":530},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" ...\",\"start\":531,\"end\":545},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"}\",\"start\":546,\"end\":557},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"> {\",\"start\":558,\"end\":571},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" baseFeePerGas: 12394051511n,\",\"start\":572,\"end\":611},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" difficulty: 11512315412421123n,\",\"start\":612,\"end\":654},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" extraData: '0x5123ab1512dd14aa',\",\"start\":655,\"end\":698},{\"type\":\"tag\",\"name\":\"log\",\"value\":\" ...\",\"start\":699,\"end\":713},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"}\",\"start\":714,\"end\":725}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":201,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { publicClient } from './client'\\n\\nconst unwatch = publicClient.watchBlocks( // [!code focus:99]\\n  { onBlock: block => console.log(block) }\\n)\\n// @log: > {\\n\\n// @log:  baseFeePerGas: 10789405161n,\\n\\n// @log:  difficulty: 11569232145203128n,\\n\\n// @log:  extraData: '0x75732d656173742d38',\\n\\n// @log:  ...\\n\\n// @log: }\\n\\n// @log: > {\\n\\n// @log:  baseFeePerGas: 12394051511n,\\n\\n// @log:  difficulty: 11512315412421123n,\\n\\n// @log:  extraData: '0x5123ab1512dd14aa',\\n\\n// @log:  ...\\n\\n// @log: }\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchBlocksReturnType\",\"start\":47,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":57,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchBlocks: <false, \\\"latest\\\">(args: WatchBlocksParameters<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, false, \\\"latest\\\">) => WatchBlocksReturnType\",\"docs\":\"Watches and returns information for incoming blocks.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchBlocks\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\\n- JSON-RPC Methods:\\n  - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newHeads\\\"` event.\",\"tags\":[[\"param\",\"args - {@link WatchBlocksParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchBlocks({\\n  onBlock: (block) => console.log(block),\\n})\"]],\"start\":70,\"length\":11,\"target\":\"watchBlocks\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) onBlock: OnBlock<{\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, false, \\\"latest\\\">\",\"docs\":\"The callback to call when a new block is received.\",\"start\":107,\"length\":7,\"target\":\"onBlock\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) block: {\\n    number: bigint;\\n    hash: `0x${string}`;\\n    nonce: `0x${string}`;\\n    logsBloom: `0x${string}`;\\n    baseFeePerGas: bigint | null;\\n    blobGasUsed: bigint;\\n    difficulty: bigint;\\n    excessBlobGas: bigint;\\n    extraData: Hex;\\n    ... 17 more ...;\\n    transactions: `0x${string}`[];\\n}\",\"start\":116,\"length\":5,\"target\":\"block\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":125,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":133,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":30},{\"type\":\"hover\",\"text\":\"(parameter) block: {\\n    number: bigint;\\n    hash: `0x${string}`;\\n    nonce: `0x${string}`;\\n    logsBloom: `0x${string}`;\\n    baseFeePerGas: bigint | null;\\n    blobGasUsed: bigint;\\n    difficulty: bigint;\\n    excessBlobGas: bigint;\\n    extraData: Hex;\\n    ... 17 more ...;\\n    transactions: `0x${string}`[];\\n}\",\"start\":137,\"length\":5,\"target\":\"block\",\"line\":3,\"character\":34}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":148,\"length\":0,\"text\":\"> {\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":149,\"length\":0,\"text\":\" baseFeePerGas: 10789405161n,\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":150,\"length\":0,\"text\":\" difficulty: 11569232145203128n,\",\"line\":7,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":151,\"length\":0,\"text\":\" extraData: '0x75732d656173742d38',\",\"line\":8,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":152,\"length\":0,\"text\":\" ...\",\"line\":9,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":153,\"length\":0,\"text\":\"}\",\"line\":10,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":154,\"length\":0,\"text\":\"> {\",\"line\":11,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":155,\"length\":0,\"text\":\" baseFeePerGas: 12394051511n,\",\"line\":12,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":156,\"length\":0,\"text\":\" difficulty: 11512315412421123n,\",\"line\":13,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":157,\"length\":0,\"text\":\" extraData: '0x5123ab1512dd14aa',\",\"line\":14,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":158,\"length\":0,\"text\":\" ...\",\"line\":15,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":159,\"length\":0,\"text\":\"}\",\"line\":17,\"character\":0}]}}"
