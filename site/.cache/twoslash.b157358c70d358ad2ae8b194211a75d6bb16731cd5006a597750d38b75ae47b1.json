"{\"value\":{\"code\":\"import { walletClient } from './client'\\n \\nconst authorization = await walletClient.prepareAuthorization({ // [!code focus]\\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]\\n}) // [!code focus]\\n\\n\\n\\n\\n\\nconst signedAuthorization = await walletClient.signAuthorization(authorization)\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":9,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const authorization: PrepareAuthorizationReturnType\",\"start\":48,\"length\":13,\"target\":\"authorization\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":70,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) prepareAuthorization: (parameters: PrepareAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<PrepareAuthorizationReturnType>\",\"docs\":\"Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\\nThis Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\\n\\nWith the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link PrepareAuthorizationParameters}\"],[\"returns\",\"The prepared Authorization object. {@link PrepareAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst authorization = await client.prepareAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst authorization = await client.prepareAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":83,\"length\":20,\"target\":\"prepareAuthorization\",\"line\":2,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) contractAddress?: `0x${string}` | undefined\",\"docs\":\"Address of the contract to delegate to.\",\"tags\":[[\"alias\",\"`address`\"]],\"start\":125,\"length\":15,\"target\":\"contractAddress\",\"line\":3,\"character\":2},{\"type\":\"tag\",\"name\":\"log\",\"start\":225,\"length\":0,\"text\":\"{\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":226,\"length\":0,\"text\":\"  chainId: 1,\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":227,\"length\":0,\"text\":\"  contractAddress: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\",\",\"line\":7,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":228,\"length\":0,\"text\":\"  nonce: 1,\",\"line\":8,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":229,\"length\":0,\"text\":\"}\",\"line\":9,\"character\":0},{\"type\":\"hover\",\"text\":\"const signedAuthorization: SignAuthorizationReturnType\",\"start\":236,\"length\":19,\"target\":\"signedAuthorization\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":264,\"length\":12,\"target\":\"walletClient\",\"line\":10,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":277,\"length\":17,\"target\":\"signAuthorization\",\"line\":10,\"character\":47},{\"type\":\"hover\",\"text\":\"const authorization: PrepareAuthorizationReturnType\",\"start\":295,\"length\":13,\"target\":\"authorization\",\"line\":10,\"character\":65}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[987,998],[965,986],[890,964],[866,889],[854,865],[0,629]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"{\",\"start\":854,\"end\":865},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  chainId: 1,\",\"start\":866,\"end\":889},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  contractAddress: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\",\",\"start\":890,\"end\":964},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  nonce: 1,\",\"start\":965,\"end\":986},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"}\",\"start\":987,\"end\":998}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const walletClient = createWalletClient({\\n  account: privateKeyToAccount('0x...'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":295,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const walletClient = createWalletClient({\\n  account: privateKeyToAccount('0x...'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":590,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { walletClient } from './client'\\n \\nconst authorization = await walletClient.prepareAuthorization({ // [!code focus]\\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]\\n}) // [!code focus]\\n// @log: {\\n\\n// @log:   chainId: 1,\\n\\n// @log:   contractAddress: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\",\\n\\n// @log:   nonce: 1,\\n\\n// @log: }\\n\\nconst signedAuthorization = await walletClient.signAuthorization(authorization)\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":9,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const authorization: PrepareAuthorizationReturnType\",\"start\":48,\"length\":13,\"target\":\"authorization\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":70,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) prepareAuthorization: (parameters: PrepareAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<PrepareAuthorizationReturnType>\",\"docs\":\"Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\\nThis Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\\n\\nWith the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link PrepareAuthorizationParameters}\"],[\"returns\",\"The prepared Authorization object. {@link PrepareAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst authorization = await client.prepareAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst authorization = await client.prepareAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":83,\"length\":20,\"target\":\"prepareAuthorization\",\"line\":2,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) contractAddress?: `0x${string}` | undefined\",\"docs\":\"Address of the contract to delegate to.\",\"tags\":[[\"alias\",\"`address`\"]],\"start\":125,\"length\":15,\"target\":\"contractAddress\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"const signedAuthorization: SignAuthorizationReturnType\",\"start\":236,\"length\":19,\"target\":\"signedAuthorization\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 29 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":264,\"length\":12,\"target\":\"walletClient\",\"line\":10,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":277,\"length\":17,\"target\":\"signAuthorization\",\"line\":10,\"character\":47},{\"type\":\"hover\",\"text\":\"const authorization: PrepareAuthorizationReturnType\",\"start\":295,\"length\":13,\"target\":\"authorization\",\"line\":10,\"character\":65}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":225,\"length\":0,\"text\":\"{\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":226,\"length\":0,\"text\":\"  chainId: 1,\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":227,\"length\":0,\"text\":\"  contractAddress: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\",\",\"line\":7,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":228,\"length\":0,\"text\":\"  nonce: 1,\",\"line\":8,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":229,\"length\":0,\"text\":\"}\",\"line\":9,\"character\":0}]}}"
