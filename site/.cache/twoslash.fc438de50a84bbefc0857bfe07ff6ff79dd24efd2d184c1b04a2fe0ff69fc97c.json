"{\"value\":{\"code\":\"const authorization = await walletClient.signAuthorization({ \\n  account,\\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \\n}) \\n\\nconst hash = await walletClient.sendTransaction({\\n  account,\\n  authorizationList: [authorization], // [!code focus]\\n  data: '0xdeadbeef',\\n  to: account.address,\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":28,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":41,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":64,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":75,\"length\":15,\"target\":\"contractAddress\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":150,\"length\":4,\"target\":\"hash\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":163,\"length\":12,\"target\":\"walletClient\",\"line\":5,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    readonly authorizationList: readonly [...];\\n    readonly data: \\\"0xdeadbeef\\\";\\n    readonly to: `0x${string}`;\\n}, undefined>(args: SendTransactionParameters<...>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":176,\"length\":15,\"target\":\"sendTransaction\",\"line\":5,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account: ({\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} & `0x${string}`) | ({\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} & {\\n    ...;\\n})\",\"start\":196,\"length\":7,\"target\":\"account\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorizationList: readonly [SignAuthorizationReturnType]\",\"start\":207,\"length\":17,\"target\":\"authorizationList\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":227,\"length\":13,\"target\":\"authorization\",\"line\":7,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0xdeadbeef\\\"\",\"start\":262,\"length\":4,\"target\":\"data\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":284,\"length\":2,\"target\":\"to\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":288,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":296,\"length\":7,\"target\":\"address\",\"line\":9,\"character\":14}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,365]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nexport const walletClient = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n// ---cut---\\nconst authorization = await walletClient.signAuthorization({ \\n  account,\\n  contractAddress: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', \\n}) \\n\\nconst hash = await walletClient.sendTransaction({\\n  account,\\n  authorizationList: [authorization], // [!code focus]\\n  data: '0xdeadbeef',\\n  to: account.address,\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":28,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":41,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":64,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":75,\"length\":15,\"target\":\"contractAddress\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":150,\"length\":4,\"target\":\"hash\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":163,\"length\":12,\"target\":\"walletClient\",\"line\":5,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendTransaction: <{\\n    readonly account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    readonly authorizationList: readonly [...];\\n    readonly data: \\\"0xdeadbeef\\\";\\n    readonly to: `0x${string}`;\\n}, undefined>(args: SendTransactionParameters<...>) => Promise<SendTransactionReturnType>\",\"docs\":\"Creates, signs, and sends a new transaction to the network.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/sendTransaction\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\\n  - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\",\"tags\":[[\"param\",\"args - {@link SendTransactionParameters}\"],[\"returns\",\"The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.sendTransaction({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst hash = await client.sendTransaction({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n,\\n})\"]],\"start\":176,\"length\":15,\"target\":\"sendTransaction\",\"line\":5,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account: ({\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} & `0x${string}`) | ({\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} & {\\n    ...;\\n})\",\"start\":196,\"length\":7,\"target\":\"account\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorizationList: readonly [SignAuthorizationReturnType]\",\"start\":207,\"length\":17,\"target\":\"authorizationList\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":227,\"length\":13,\"target\":\"authorization\",\"line\":7,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0xdeadbeef\\\"\",\"start\":262,\"length\":4,\"target\":\"data\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":284,\"length\":2,\"target\":\"to\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":288,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":296,\"length\":7,\"target\":\"address\",\"line\":9,\"character\":14}],\"tags\":[]}}"
