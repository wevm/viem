"{\"value\":{\"code\":\"// The below will send a single Batch JSON-RPC HTTP request to the RPC Provider.\\nconst [blockNumber, balance, ensName] = await Promise.all([\\n  client.getBlockNumber(),\\n  client.getBalance({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\\n  client.getEnsName({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\\n])\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const blockNumber: bigint\",\"start\":88,\"length\":11,\"target\":\"blockNumber\",\"line\":1,\"character\":7},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":101,\"length\":7,\"target\":\"balance\",\"line\":1,\"character\":20},{\"type\":\"hover\",\"text\":\"const ensName: GetEnsNameReturnType\",\"start\":110,\"length\":7,\"target\":\"ensName\",\"line\":1,\"character\":29},{\"type\":\"hover\",\"text\":\"var Promise: PromiseConstructor\",\"docs\":\"Represents the completion of an asynchronous operation\",\"start\":127,\"length\":7,\"target\":\"Promise\",\"line\":1,\"character\":46},{\"type\":\"hover\",\"text\":\"(method) PromiseConstructor.all<[Promise<bigint>, Promise<bigint>, Promise<GetEnsNameReturnType>]>(values: [Promise<bigint>, Promise<bigint>, Promise<...>]): Promise<...> (+1 overload)\",\"docs\":\"Creates a Promise that is resolved with an array of results when all of the provided Promises\\nresolve, or rejected when any Promise is rejected.\",\"tags\":[[\"param\",\"values An array of Promises.\"],[\"returns\",\"A new Promise.\"]],\"start\":135,\"length\":3,\"target\":\"all\",\"line\":1,\"character\":54},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":143,\"length\":6,\"target\":\"client\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getBlockNumber: (args?: GetBlockNumberParameters | undefined) => Promise<GetBlockNumberReturnType>\",\"docs\":\"Returns the number of the most recent block seen.\\n\\n- Docs: https://viem.sh/docs/actions/public/getBlockNumber\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\\n- JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\",\"tags\":[[\"param\",\"args - {@link GetBlockNumberParameters}\"],[\"returns\",\"The number of the block. {@link GetBlockNumberReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst blockNumber = await client.getBlockNumber()\\n// 69420n\"]],\"start\":150,\"length\":14,\"target\":\"getBlockNumber\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":170,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\",\"docs\":\"Returns the balance of an address in wei.\\n\\n- Docs: https://viem.sh/docs/actions/public/getBalance\\n- JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\",\"tags\":[[\"remarks\",\"You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\\n\\n```ts\\nconst balance = await getBalance(client, {\\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  blockTag: 'safe'\\n})\\nconst balanceAsEther = formatEther(balance)\\n// \\\"6.942\\\"\\n```\"],[\"param\",\"args - {@link GetBalanceParameters}\"],[\"returns\",\"The balance of the address in wei. {@link GetBalanceReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst balance = await client.getBalance({\\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\\n// 10000000000000000000000n (wei)\"]],\"start\":177,\"length\":10,\"target\":\"getBalance\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address of the account.\",\"start\":190,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":250,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\",\"docs\":\"Gets primary name for specified address.\\n\\n- Docs: https://viem.sh/docs/ens/actions/getEnsName\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\",\"tags\":[[\"remarks\",\"Calls `reverse(bytes)` on ENS Universal Resolver Contract to \\\"reverse resolve\\\" the address to the primary ENS name.\"],[\"param\",\"args - {@link GetEnsNameParameters}\"],[\"returns\",\"Name or `null` if not found. {@link GetEnsNameReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst ensName = await client.getEnsName({\\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\\n})\\n// 'wevm.eth'\"]],\"start\":257,\"length\":10,\"target\":\"getEnsName\",\"line\":4,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Address to get ENS name for.\",\"start\":270,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":22}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,221]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http('https://eth-mainnet.g.alchemy.com/v2/...'), \\n})\\n// ---cut---\\n// The below will send a single Batch JSON-RPC HTTP request to the RPC Provider.\\nconst [blockNumber, balance, ensName] = await Promise.all([\\n  client.getBlockNumber(),\\n  client.getBalance({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\\n  client.getEnsName({ address: '0xd2135CfB216b74109775236E36d4b433F1DF507B' }),\\n])\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const blockNumber: bigint\",\"start\":88,\"length\":11,\"target\":\"blockNumber\",\"line\":1,\"character\":7},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":101,\"length\":7,\"target\":\"balance\",\"line\":1,\"character\":20},{\"type\":\"hover\",\"text\":\"const ensName: GetEnsNameReturnType\",\"start\":110,\"length\":7,\"target\":\"ensName\",\"line\":1,\"character\":29},{\"type\":\"hover\",\"text\":\"var Promise: PromiseConstructor\",\"docs\":\"Represents the completion of an asynchronous operation\",\"start\":127,\"length\":7,\"target\":\"Promise\",\"line\":1,\"character\":46},{\"type\":\"hover\",\"text\":\"(method) PromiseConstructor.all<[Promise<bigint>, Promise<bigint>, Promise<GetEnsNameReturnType>]>(values: [Promise<bigint>, Promise<bigint>, Promise<...>]): Promise<...> (+1 overload)\",\"docs\":\"Creates a Promise that is resolved with an array of results when all of the provided Promises\\nresolve, or rejected when any Promise is rejected.\",\"tags\":[[\"param\",\"values An array of Promises.\"],[\"returns\",\"A new Promise.\"]],\"start\":135,\"length\":3,\"target\":\"all\",\"line\":1,\"character\":54},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":143,\"length\":6,\"target\":\"client\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getBlockNumber: (args?: GetBlockNumberParameters | undefined) => Promise<GetBlockNumberReturnType>\",\"docs\":\"Returns the number of the most recent block seen.\\n\\n- Docs: https://viem.sh/docs/actions/public/getBlockNumber\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\\n- JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\",\"tags\":[[\"param\",\"args - {@link GetBlockNumberParameters}\"],[\"returns\",\"The number of the block. {@link GetBlockNumberReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst blockNumber = await client.getBlockNumber()\\n// 69420n\"]],\"start\":150,\"length\":14,\"target\":\"getBlockNumber\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":170,\"length\":6,\"target\":\"client\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\",\"docs\":\"Returns the balance of an address in wei.\\n\\n- Docs: https://viem.sh/docs/actions/public/getBalance\\n- JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\",\"tags\":[[\"remarks\",\"You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\\n\\n```ts\\nconst balance = await getBalance(client, {\\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  blockTag: 'safe'\\n})\\nconst balanceAsEther = formatEther(balance)\\n// \\\"6.942\\\"\\n```\"],[\"param\",\"args - {@link GetBalanceParameters}\"],[\"returns\",\"The balance of the address in wei. {@link GetBalanceReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst balance = await client.getBalance({\\n  address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\\n// 10000000000000000000000n (wei)\"]],\"start\":177,\"length\":10,\"target\":\"getBalance\",\"line\":3,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address of the account.\",\"start\":190,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":250,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\",\"docs\":\"Gets primary name for specified address.\\n\\n- Docs: https://viem.sh/docs/ens/actions/getEnsName\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\",\"tags\":[[\"remarks\",\"Calls `reverse(bytes)` on ENS Universal Resolver Contract to \\\"reverse resolve\\\" the address to the primary ENS name.\"],[\"param\",\"args - {@link GetEnsNameParameters}\"],[\"returns\",\"Name or `null` if not found. {@link GetEnsNameReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst ensName = await client.getEnsName({\\n  address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\\n})\\n// 'wevm.eth'\"]],\"start\":257,\"length\":10,\"target\":\"getEnsName\",\"line\":4,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Address to get ENS name for.\",\"start\":270,\"length\":7,\"target\":\"address\",\"line\":4,\"character\":22}],\"tags\":[]}}"
