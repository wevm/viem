"{\"value\":{\"code\":\"const gas = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{\\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    value: parseEther('1')\\n  }],\\n  maxFeePerGas: 420n, // [!code focus]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const gas: {\\n    preVerificationGas: bigint;\\n    verificationGasLimit: bigint;\\n    callGasLimit: bigint;\\n}\",\"start\":6,\"length\":3,\"target\":\"gas\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, undefined, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\\nimport bundlerClient\",\"start\":18,\"length\":13,\"target\":\"bundlerClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(property) estimateUserOperationGas: <[{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}>(parameters: EstimateUserOperationGasParameters<...>) => Promise<...>\",\"docs\":\"Returns an estimate of gas values necessary to execute the User Operation.\\n\\n- Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link EstimateUserOperationGasParameters}\"],[\"returns\",\"The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = await toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":32,\"length\":24,\"target\":\"estimateUserOperationGas\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account?: (object & Assign_<SmartAccountImplementation<Abi, EntryPointVersion, object>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}) | {\\n    ...;\\n} | undefined\",\"start\":61,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":72,\"length\":5,\"target\":\"calls\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":86,\"length\":2,\"target\":\"to\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":140,\"length\":5,\"target\":\"value\",\"line\":4,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":147,\"length\":10,\"target\":\"parseEther\",\"line\":4,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) maxFeePerGas: bigint\",\"start\":171,\"length\":12,\"target\":\"maxFeePerGas\",\"line\":6,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,694]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\\nexport const account = await toCoinbaseSmartAccount({\\n  client,\\n  owners: [privateKeyToAccount('0x...')],\\n})\\n\\nexport const bundlerClient = createBundlerClient({\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc')\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":558,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseEther } from 'viem'\\nimport { account, bundlerClient } from './config'\\n// ---cut---\\nconst gas = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{\\n    to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    value: parseEther('1')\\n  }],\\n  maxFeePerGas: 420n, // [!code focus]\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const gas: {\\n    preVerificationGas: bigint;\\n    verificationGasLimit: bigint;\\n    callGasLimit: bigint;\\n}\",\"start\":6,\"length\":3,\"target\":\"gas\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, undefined, {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}, undefined>\\nimport bundlerClient\",\"start\":18,\"length\":13,\"target\":\"bundlerClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(property) estimateUserOperationGas: <[{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}], {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}>(parameters: EstimateUserOperationGasParameters<...>) => Promise<...>\",\"docs\":\"Returns an estimate of gas values necessary to execute the User Operation.\\n\\n- Docs: https://viem.sh/actions/bundler/estimateUserOperationGas\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link EstimateUserOperationGasParameters}\"],[\"returns\",\"The gas estimate (in wei). {@link EstimateUserOperationGasReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = await toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.estimateUserOperationGas({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":32,\"length\":24,\"target\":\"estimateUserOperationGas\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account?: (object & Assign_<SmartAccountImplementation<Abi, EntryPointVersion, object>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}) | {\\n    ...;\\n} | undefined\",\"start\":61,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>]\",\"start\":72,\"length\":5,\"target\":\"calls\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":86,\"length\":2,\"target\":\"to\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":140,\"length\":5,\"target\":\"value\",\"line\":4,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":147,\"length\":10,\"target\":\"parseEther\",\"line\":4,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) maxFeePerGas: bigint\",\"start\":171,\"length\":12,\"target\":\"maxFeePerGas\",\"line\":6,\"character\":2}],\"tags\":[]}}"
