"{\"value\":{\"code\":\"import { publicClient } from './client'\\n\\nconst filter = await publicClient.createPendingTransactionFilter() // [!code focus:99]\\nconst hashes = await publicClient.getFilterChanges({ filter })\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    type: \\\"transaction\\\";\\n}\",\"start\":47,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":62,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\",\"docs\":\"Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\\n- JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\",\"tags\":[[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\n// { id: \\\"0x345a6572337856574a76364e457a4366\\\", type: 'transaction' }\"]],\"start\":75,\"length\":30,\"target\":\"createPendingTransactionFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"const hashes: `0x${string}`[]\",\"start\":134,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":149,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <\\\"transaction\\\", Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>(args: GetFilterChangesParameters<\\\"transaction\\\", Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":162,\"length\":16,\"target\":\"getFilterChanges\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    type: \\\"transaction\\\";\\n}\",\"start\":181,\"length\":6,\"target\":\"filter\",\"line\":3,\"character\":53},{\"type\":\"tag\",\"name\":\"log\",\"start\":191,\"length\":0,\"text\":\"Output: [\\\"0x89b3aa1c01ca4da5d15eca9fab459d062db5c0c9b76609acb0741901f01f6d19\\\", ...]\",\"line\":5,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[1034,1127],[0,843]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: [\\\"0x89b3aa1c01ca4da5d15eca9fab459d062db5c0c9b76609acb0741901f01f6d19\\\", ...]\",\"start\":1034,\"end\":1127}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":201,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":402,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":603,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":804,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { publicClient } from './client'\\n\\nconst filter = await publicClient.createPendingTransactionFilter() // [!code focus:99]\\nconst hashes = await publicClient.getFilterChanges({ filter })\\n// @log: Output: [\\\"0x89b3aa1c01ca4da5d15eca9fab459d062db5c0c9b76609acb0741901f01f6d19\\\", ...]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    type: \\\"transaction\\\";\\n}\",\"start\":47,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":62,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\",\"docs\":\"Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\\n\\n- Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\\n- JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\",\"tags\":[[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\n// { id: \\\"0x345a6572337856574a76364e457a4366\\\", type: 'transaction' }\"]],\"start\":75,\"length\":30,\"target\":\"createPendingTransactionFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"const hashes: `0x${string}`[]\",\"start\":134,\"length\":6,\"target\":\"hashes\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":149,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <\\\"transaction\\\", Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>(args: GetFilterChangesParameters<\\\"transaction\\\", Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":162,\"length\":16,\"target\":\"getFilterChanges\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) filter: {\\n    id: Hex;\\n    request: EIP1193RequestFn<readonly [{\\n        Method: \\\"eth_getFilterChanges\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[] | Hex[];\\n    }, {\\n        Method: \\\"eth_getFilterLogs\\\";\\n        Parameters: [filterId: Quantity];\\n        ReturnType: RpcLog[];\\n    }, {\\n        ...;\\n    }]>;\\n    type: \\\"transaction\\\";\\n}\",\"start\":181,\"length\":6,\"target\":\"filter\",\"line\":3,\"character\":53}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":191,\"length\":0,\"text\":\"Output: [\\\"0x89b3aa1c01ca4da5d15eca9fab459d062db5c0c9b76609acb0741901f01f6d19\\\", ...]\",\"line\":5,\"character\":0}]}}"
