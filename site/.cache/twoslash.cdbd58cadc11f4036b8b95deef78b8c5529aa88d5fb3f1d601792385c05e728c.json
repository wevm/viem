"{\"value\":{\"code\":\"const authorization = await walletClient.signAuthorization({\\n  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\\n})\\n\\nconst valid = await verifyAuthorization({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  authorization, // [!code focus]\\n}) \",\"nodes\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 28 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":28,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":41,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) authorization: string\",\"start\":63,\"length\":13,\"target\":\"authorization\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":133,\"length\":5,\"target\":\"valid\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) verifyAuthorization({ address, authorization, signature, }: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType>\\nimport verifyAuthorization\",\"docs\":\"Verify that an Authorization object was signed by the provided address.\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/utilities/verifyAuthorization\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyAuthorizationParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\"]],\"start\":147,\"length\":19,\"target\":\"verifyAuthorization\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the Authorization object.\",\"start\":171,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorization: OneOf<SignedAuthorization | AuthorizationRequest | Authorization>\",\"docs\":\"The Authorization object.\\n\\n- If an unsigned `authorization` is provided, the `signature` property is required.\\n- If a signed `authorization` is provided, the `signature` property does not need to be provided.\",\"start\":228,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,343]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const walletClient = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":202,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { verifyAuthorization } from 'viem/utils'\\nimport { walletClient } from './client'\\n// ---cut---\\nconst authorization = await walletClient.signAuthorization({\\n  authorization: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\\n})\\n\\nconst valid = await verifyAuthorization({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  authorization, // [!code focus]\\n}) \",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":6,\"length\":13,\"target\":\"authorization\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 28 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":28,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<undefined>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":41,\"length\":17,\"target\":\"signAuthorization\",\"line\":0,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) authorization: string\",\"start\":63,\"length\":13,\"target\":\"authorization\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":133,\"length\":5,\"target\":\"valid\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) verifyAuthorization({ address, authorization, signature, }: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType>\\nimport verifyAuthorization\",\"docs\":\"Verify that an Authorization object was signed by the provided address.\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/utilities/verifyAuthorization\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyAuthorizationParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}\"]],\"start\":147,\"length\":19,\"target\":\"verifyAuthorization\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the Authorization object.\",\"start\":171,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) authorization: OneOf<SignedAuthorization | AuthorizationRequest | Authorization>\",\"docs\":\"The Authorization object.\\n\\n- If an unsigned `authorization` is provided, the `signature` property is required.\\n- If a signed `authorization` is provided, the `signature` property does not need to be provided.\",\"start\":228,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":2}],\"tags\":[]}}"
