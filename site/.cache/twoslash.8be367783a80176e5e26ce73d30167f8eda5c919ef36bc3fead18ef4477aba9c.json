"{\"value\":{\"code\":\"import { recoverTransactionAddress } from 'viem'\\nimport { walletClient } from './client'\\n\\nconst request = await walletClient.prepareTransactionRequest({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n\\n})\\n\\nconst serializedTransaction = await walletClient.signTransaction(request)\\n\\nconst address = await recoverTransactionAddress({ // [!code focus:99]\\n  serializedTransaction,\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function recoverTransactionAddress(parameters: RecoverTransactionAddressParameters): Promise<RecoverTransactionAddressReturnType>\\nimport recoverTransactionAddress\",\"start\":9,\"length\":25,\"target\":\"recoverTransactionAddress\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":58,\"length\":12,\"target\":\"walletClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const request: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":96,\"length\":7,\"target\":\"request\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":112,\"length\":12,\"target\":\"walletClient\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) prepareTransactionRequest: <{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: 1000000000000000000n;\\n}, undefined, undefined>(args: PrepareTransactionRequestParameters<undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    ... 7 more ...;\\n    type: \\\"local\\\";\\n}, undefined, undefined, {\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: 1000000000000000000n;\\n}>) => Promise<...>\",\"docs\":\"Prepares a transaction request for signing.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\",\"tags\":[[\"param\",\"args - {@link PrepareTransactionRequestParameters}\"],[\"returns\",\"The transaction request. {@link PrepareTransactionRequestReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\"]],\"start\":125,\"length\":25,\"target\":\"prepareTransactionRequest\",\"line\":3,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":155,\"length\":2,\"target\":\"to\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) value: 1000000000000000000n\",\"start\":207,\"length\":5,\"target\":\"value\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const serializedTransaction: `0x02${string}` | `0x01${string}` | `0x03${string}` | `0x04${string}` | TransactionSerializedLegacy\",\"start\":245,\"length\":21,\"target\":\"serializedTransaction\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":275,\"length\":12,\"target\":\"walletClient\",\"line\":8,\"character\":36},{\"type\":\"hover\",\"text\":\"(property) signTransaction: <undefined, {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}>(args: ({\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} & ... 2 more ... & {\\n    ...;\\n}) | ... 4 more ... | ({\\n    ...;\\n} & ... 2 more ... & {\\n    ...;\\n})) => Promise<...>\",\"docs\":\"Signs a transaction.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signTransaction\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\",\"tags\":[[\"param\",\"args - {@link SignTransactionParameters}\"],[\"returns\",\"The signed message. {@link SignTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\\nconst signature = await client.signTransaction(request)\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\\nconst signature = await client.signTransaction(request)\"]],\"start\":288,\"length\":15,\"target\":\"signTransaction\",\"line\":8,\"character\":49},{\"type\":\"hover\",\"text\":\"const request: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":304,\"length\":7,\"target\":\"request\",\"line\":8,\"character\":65},{\"type\":\"hover\",\"text\":\"const address: `0x${string}`\",\"start\":320,\"length\":7,\"target\":\"address\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) recoverTransactionAddress(parameters: RecoverTransactionAddressParameters): Promise<RecoverTransactionAddressReturnType>\\nimport recoverTransactionAddress\",\"start\":336,\"length\":25,\"target\":\"recoverTransactionAddress\",\"line\":10,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) serializedTransaction: `0x02${string}` | `0x01${string}` | `0x03${string}` | `0x04${string}` | TransactionSerializedLegacy\",\"start\":386,\"length\":21,\"target\":\"serializedTransaction\",\"line\":11,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,277]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\n\\nexport const walletClient = createWalletClient({\\n  account: privateKeyToAccount('0x...'),\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":238,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { recoverTransactionAddress } from 'viem'\\nimport { walletClient } from './client'\\n\\nconst request = await walletClient.prepareTransactionRequest({\\n  to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  value: 1000000000000000000n\\n})\\n\\nconst serializedTransaction = await walletClient.signTransaction(request)\\n\\nconst address = await recoverTransactionAddress({ // [!code focus:99]\\n  serializedTransaction,\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function recoverTransactionAddress(parameters: RecoverTransactionAddressParameters): Promise<RecoverTransactionAddressReturnType>\\nimport recoverTransactionAddress\",\"start\":9,\"length\":25,\"target\":\"recoverTransactionAddress\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":58,\"length\":12,\"target\":\"walletClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const request: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":96,\"length\":7,\"target\":\"request\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":112,\"length\":12,\"target\":\"walletClient\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) prepareTransactionRequest: <{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: 1000000000000000000n;\\n}, undefined, undefined>(args: PrepareTransactionRequestParameters<undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    ... 7 more ...;\\n    type: \\\"local\\\";\\n}, undefined, undefined, {\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: 1000000000000000000n;\\n}>) => Promise<...>\",\"docs\":\"Prepares a transaction request for signing.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\",\"tags\":[[\"param\",\"args - {@link PrepareTransactionRequestParameters}\"],[\"returns\",\"The transaction request. {@link PrepareTransactionRequestReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\"]],\"start\":125,\"length\":25,\"target\":\"prepareTransactionRequest\",\"line\":3,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":155,\"length\":2,\"target\":\"to\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) value: 1000000000000000000n\",\"start\":207,\"length\":5,\"target\":\"value\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const serializedTransaction: `0x02${string}` | `0x01${string}` | `0x03${string}` | `0x04${string}` | TransactionSerializedLegacy\",\"start\":245,\"length\":21,\"target\":\"serializedTransaction\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":275,\"length\":12,\"target\":\"walletClient\",\"line\":8,\"character\":36},{\"type\":\"hover\",\"text\":\"(property) signTransaction: <undefined, {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}>(args: ({\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} & ... 2 more ... & {\\n    ...;\\n}) | ... 4 more ... | ({\\n    ...;\\n} & ... 2 more ... & {\\n    ...;\\n})) => Promise<...>\",\"docs\":\"Signs a transaction.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signTransaction\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\",\"tags\":[[\"param\",\"args - {@link SignTransactionParameters}\"],[\"returns\",\"The signed message. {@link SignTransactionReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\\nconst signature = await client.signTransaction(request)\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst request = await client.prepareTransactionRequest({\\n  to: '0x0000000000000000000000000000000000000000',\\n  value: 1n,\\n})\\nconst signature = await client.signTransaction(request)\"]],\"start\":288,\"length\":15,\"target\":\"signTransaction\",\"line\":8,\"character\":49},{\"type\":\"hover\",\"text\":\"const request: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 18 more ...;\\n    maxPriorityFeePerGas: never;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":304,\"length\":7,\"target\":\"request\",\"line\":8,\"character\":65},{\"type\":\"hover\",\"text\":\"const address: `0x${string}`\",\"start\":320,\"length\":7,\"target\":\"address\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) recoverTransactionAddress(parameters: RecoverTransactionAddressParameters): Promise<RecoverTransactionAddressReturnType>\\nimport recoverTransactionAddress\",\"start\":336,\"length\":25,\"target\":\"recoverTransactionAddress\",\"line\":10,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) serializedTransaction: `0x02${string}` | `0x01${string}` | `0x03${string}` | `0x04${string}` | TransactionSerializedLegacy\",\"start\":386,\"length\":21,\"target\":\"serializedTransaction\",\"line\":11,\"character\":2}],\"tags\":[]}}"
