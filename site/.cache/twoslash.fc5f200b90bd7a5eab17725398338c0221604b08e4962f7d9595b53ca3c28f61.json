"{\"value\":{\"code\":\"const hash = await walletClient.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":6,\"length\":4,\"target\":\"hash\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<CustomTransport, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://era.zksync.network/\\\";\\n            readonly apiUrl: \\\"https://api-era.zksync.network/api\\\";\\n        };\\n        readonly native: {\\n            readonly name: \\\"ZKsync Explorer\\\";\\n            readonly url: \\\"https://explorer.zksync.io/\\\";\\n            readonly apiUrl: \\\"https://block-explorer-api.mainnet.zksync.io/api\\\";\\n        };\\n    };\\n    ... 11 more ...;\\n    readonly network: \\\"zksync-era\\\";\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":19,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"uint32\\\";\\n        readonly name: \\\"tokenId\\\";\\n    }];\\n    readonly outputs: readonly [];\\n}], \\\"mint\\\", [...], undefined>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction â€“ it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link WriteContractParameters }\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType }\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { eip712WalletActions } from 'viem/zksync'\\n\\nconst client = createWalletClient({\\n  chain: zksync,\\n  transport: custom(window.ethereum),\\n}).extend(eip712WalletActions())\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, http, parseAbi } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { eip712WalletActions } from 'viem/zksync'\\n\\nconst client = createWalletClient({\\n  chain: zksync,\\n  transport: http(),\\n}).extend(eip712WalletActions())\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"],[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":32,\"length\":13,\"target\":\"writeContract\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":50,\"length\":7,\"target\":\"address\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"uint32\\\";\\n        readonly name: \\\"tokenId\\\";\\n    }];\\n    readonly outputs: readonly [];\\n}]\",\"start\":107,\"length\":3,\"target\":\"abi\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function mint(uint32 tokenId) nonpayable\\\"]>(signatures: [\\\"function mint(uint32 tokenId) nonpayable\\\"]): readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [];\\n}]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":112,\"length\":8,\"target\":\"parseAbi\",\"line\":2,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\"\",\"start\":170,\"length\":12,\"target\":\"functionName\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: [number]\",\"start\":194,\"length\":4,\"target\":\"args\",\"line\":4,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,330]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import 'viem/window'\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { eip712WalletActions } from 'viem/zksync'\\n\\nconst walletClient = createWalletClient({\\n  account: '0x',\\n  chain: zksync,\\n  transport: custom(window.ethereum!),\\n}).extend(eip712WalletActions())\\n// ---cut---\\nconst hash = await walletClient.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":6,\"length\":4,\"target\":\"hash\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const walletClient: Client<CustomTransport, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://era.zksync.network/\\\";\\n            readonly apiUrl: \\\"https://api-era.zksync.network/api\\\";\\n        };\\n        readonly native: {\\n            readonly name: \\\"ZKsync Explorer\\\";\\n            readonly url: \\\"https://explorer.zksync.io/\\\";\\n            readonly apiUrl: \\\"https://block-explorer-api.mainnet.zksync.io/api\\\";\\n        };\\n    };\\n    ... 11 more ...;\\n    readonly network: \\\"zksync-era\\\";\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":19,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"uint32\\\";\\n        readonly name: \\\"tokenId\\\";\\n    }];\\n    readonly outputs: readonly [];\\n}], \\\"mint\\\", [...], undefined>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction â€“ it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link WriteContractParameters }\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType }\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { eip712WalletActions } from 'viem/zksync'\\n\\nconst client = createWalletClient({\\n  chain: zksync,\\n  transport: custom(window.ethereum),\\n}).extend(eip712WalletActions())\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, http, parseAbi } from 'viem'\\nimport { zksync } from 'viem/chains'\\nimport { eip712WalletActions } from 'viem/zksync'\\n\\nconst client = createWalletClient({\\n  chain: zksync,\\n  transport: http(),\\n}).extend(eip712WalletActions())\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"],[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":32,\"length\":13,\"target\":\"writeContract\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":50,\"length\":7,\"target\":\"address\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"uint32\\\";\\n        readonly name: \\\"tokenId\\\";\\n    }];\\n    readonly outputs: readonly [];\\n}]\",\"start\":107,\"length\":3,\"target\":\"abi\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function mint(uint32 tokenId) nonpayable\\\"]>(signatures: [\\\"function mint(uint32 tokenId) nonpayable\\\"]): readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [];\\n}]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":112,\"length\":8,\"target\":\"parseAbi\",\"line\":2,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\"\",\"start\":170,\"length\":12,\"target\":\"functionName\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: [number]\",\"start\":194,\"length\":4,\"target\":\"args\",\"line\":4,\"character\":2}],\"tags\":[]}}"
