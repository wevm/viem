"{\"value\":{\"mdx\":\"---\\ndescription: A Contract Instance is a type-safe interface for performing contract-related actions with a specific ABI and address, created by the getContract function.\\n---\\n\\n# Contract Instances\\n\\nA Contract Instance is a type-safe interface for performing contract-related actions with a specific ABI and address, created by the `getContract` function.\\n\\n## Import\\n\\n```ts\\nimport { getContract } from 'viem'\\n```\\n\\n## Usage\\n\\nYou can create a Contract Instance with the `getContract` function by passing in a [ABI](/docs/glossary/types#abi), address, and [Public](/docs/clients/public) and/or [Wallet Client](/docs/clients/wallet). Once created, you can call contract methods, fetch for events, listen to events, etc.\\n\\n:::code-group\\n\\n```ts [example.ts]\\nimport { getContract } from 'viem'\\nimport { wagmiAbi } from './abi'\\nimport { publicClient, walletClient } from './client'\\n\\n// 1. Create contract instance\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  // 1a. Insert a single client\\n  client: publicClient,\\n  // 1b. Or public and/or wallet clients\\n  client: { public: publicClient, wallet: walletClient }\\n})\\n\\n// 2. Call contract methods, fetch events, listen to events, etc.\\nconst result = await contract.read.totalSupply()\\nconst logs = await contract.getEvents.Transfer()\\nconst unwatch = contract.watchEvent.Transfer(\\n  { from: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e' },\\n  { onLogs(logs) { console.log(logs) } }\\n)\\n```\\n\\n```ts [client.ts]\\nimport { createPublicClient, createWalletClient, http, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { EthereumProvider } from '@walletconnect/ethereum-provider'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\n// eg: Metamask\\nexport const walletClient = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum!),\\n})\\n\\n// eg: WalletConnect\\nconst provider = await EthereumProvider.init({\\n  projectId: \\\"abcd1234\\\",\\n  showQrModal: true,\\n  chains: [1],\\n})\\n\\nexport const walletClientWC = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(provider),\\n})\\n```\\n\\n```ts [abi.ts]\\nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: 'totalSupply',\\n    outputs: [{ type: 'uint256' }],\\n    stateMutability: 'view',\\n    type: 'function',\\n  },\\n  {\\n    name: 'Transfer',\\n    type: 'event',\\n    inputs: [\\n      {\\n        indexed: true,\\n        name: 'from',\\n        type: 'address',\\n      },\\n      { indexed: true, name: 'to', type: 'address' },\\n      {\\n        indexed: true,\\n        name: 'tokenId',\\n        type: 'uint256',\\n      },\\n    ],\\n  },\\n  ...\\n] as const;\\n```\\n\\n:::\\n\\nUsing Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](/docs/contract/readContract), [`writeContract`](/docs/contract/writeContract), [`estimateContractGas`](/docs/contract/estimateContractGas), etc. Switch between the tabs below to see the difference between standalone Contract Actions and Contract Instance Actions:\\n\\n:::code-group\\n\\n```ts [contract-instance.ts]\\nimport { getContract } from 'viem'\\nimport { wagmiAbi } from './abi'\\nimport { publicClient, walletClient } from './client'\\n\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  client: {\\n    public: publicClient,\\n    wallet: walletClient,\\n  }\\n})\\n\\nconst balance = await contract.read.balanceOf([\\n  '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n])\\nconst hash = await contract.write.mint([69420])\\nconst logs = await contract.getEvents.Transfer()\\nconst unwatch = contract.watchEvent.Transfer(\\n  {\\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\\n  },\\n  { onLogs: logs => console.log(logs) }\\n)\\n```\\n\\n```ts [contract-actions.ts]\\nimport { wagmiAbi } from './abi'\\nimport { publicClient, walletClient } from './client'\\n\\nconst balance = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\nconst hash = await walletClient.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'mint',\\n  args: [69420]\\n})\\nconst unwatch = publicClient.watchContractEvent({\\n  address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\\n  abi: wagmiAbi,\\n  eventName: 'Transfer',\\n  args: {\\n    from: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\\n    to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac'\\n  },\\n  onLogs: logs => console.log(logs)\\n})\\n```\\n\\n:::\\n\\n:::tip\\nWhile Contract Instances are great for reducing code duplication, they pull in multiple contract actions (e.g. `createContractEventFilter`, `estimateContractGas`, `readContract`, `simulateContract`, `watchContractEvent`, `writeContract`), so they can be a bit heavier than individual calls. If you only need a couple contract methods and you care about minimizing bundle size to the fullest extent, you may want to use individual calls instead.\\n:::\\n\\n## Return Value\\n\\nContract instance object. Type is inferred.\\n\\nDepending on if you create a contract instance with a Public Client, Wallet Client, or both, the methods available on the contract instance will vary.\\n\\n#### With Public Client\\n\\nIf you pass in a [`publicClient`](https://viem.sh/docs/clients/public), the following methods are available:\\n\\n- [`createEventFilter`](/docs/contract/createContractEventFilter)\\n- [`estimateGas`](/docs/contract/estimateContractGas)\\n- [`getEvents`](/docs/contract/getContractEvents)\\n- [`read`](/docs/contract/readContract)\\n- [`simulate`](/docs/contract/simulateContract)\\n- [`watchEvent`](/docs/contract/watchContractEvent)\\n\\n#### With Wallet Client\\n\\nIf you pass in a [`walletClient`](/docs/clients/wallet), the following methods are available:\\n\\n- [`estimateGas`](/docs/contract/estimateContractGas)\\n- [`write`](/docs/contract/writeContract)\\n\\n#### Calling methods\\n\\nIf you are using [TypeScript](/docs/typescript) with viem, your editor will be able to provide autocomplete suggestions for the methods available on the contract instance, as well as the arguments and other options for each method.\\n\\nIn general, contract instance methods follow the following format:\\n\\n```ts\\n// function\\ncontract.(estimateGas|read|simulate|write).(functionName)(args, options)\\n\\n// event\\ncontract.(createEventFilter|getEvents|watchEvent).(eventName)(args, options)\\n```\\n\\nIf the contract function/event you are using does not accept arguments (e.g. function has no inputs, event has no indexed inputs), then you can omit the `args` parameter so `options` is the first and only parameter.\\n\\n## Parameters\\n\\n### address\\n\\n- **Type:** [`Address`](/docs/glossary/types#address)\\n\\nThe contract address.\\n\\n```ts\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]\\n  abi: wagmiAbi,\\n  client: publicClient\\n})\\n```\\n\\n### abi\\n\\n- **Type:** [`Abi`](/docs/glossary/types#abi)\\n\\nThe contract's ABI.\\n\\n```ts\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi, // [!code focus]\\n  client: publicClient\\n})\\n```\\n\\n### client\\n\\n- **Type:** [`Client | { public: Client; wallet: Client }`](/docs/clients/public)\\n\\nThe Client used for performing [contract actions](/docs/contract/getContract#return-value).\\n\\n```ts\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  client: publicClient, // [!code focus]\\n})\\n```\\n\\nYou can also pass in multiple clients (ie. a Wallet Client and a Public Client):\\n\\n```ts\\nconst contract = getContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  client: { // [!code focus]\\n    public: publicClient, // [!code focus]\\n    wallet: walletClient // [!code focus]\\n  }, // [!code focus]\\n})\\n```\\n\",\"document\":[{\"href\":\"/docs/contract/getContract#contract-instances\",\"html\":\"</header>\\n<p>A Contract Instance is a type-safe interface for performing contract-related actions with a specific ABI and address, created by the <code>getContract</code> function.</p>\\n\",\"id\":\"pages/docs/contract/getContract.md#contract-instances\",\"isPage\":true,\"text\":\"\\nA Contract Instance is a type-safe interface for performing contract-related actions with a specific ABI and address, created by the getContract function.\\n\",\"title\":\"Contract Instances\",\"titles\":[]},{\"href\":\"/docs/contract/getContract#import\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getContract } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/getContract.md#import\",\"isPage\":false,\"text\":\"\\nimport { getContract } from &#x27;viem&#x27;\\n\",\"title\":\"Import\",\"titles\":[\"Contract Instances\"]},{\"href\":\"/docs/contract/getContract#usage\",\"html\":\"\\n<p>You can create a Contract Instance with the <code>getContract</code> function by passing in a <a href=\\\"/docs/glossary/types#abi\\\">ABI</a>, address, and <a href=\\\"/docs/clients/public\\\">Public</a> and/or <a href=\\\"/docs/clients/wallet\\\">Wallet Client</a>. Once created, you can call contract methods, fetch for events, listen to events, etc.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getContract } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient, walletClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./client&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 1. Create contract instance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // 1a. Insert a single client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: publicClient,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // 1b. Or public and/or wallet clients</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: { public: publicClient, wallet: walletClient }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 2. Call contract methods, fetch events, listen to events, etc.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.read.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">totalSupply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> logs</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.getEvents.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Transfer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> unwatch</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.watchEvent.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Transfer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  { from: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xA0Cf798816D4b9b9866b5330EEa46a18382f251e&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  { </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">onLogs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">logs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) { console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(logs) } }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"client.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"client.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, createWalletClient, http, custom } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { EthereumProvider } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;@walletconnect/ethereum-provider&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// eg: Metamask</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> walletClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createWalletClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">custom</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(window.ethereum</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// eg: WalletConnect</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> provider</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> EthereumProvider.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">init</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  projectId: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;abcd1234&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  showQrModal: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chains: [</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> walletClientWC</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createWalletClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">custom</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(provider),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"abi.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"abi.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> wagmiAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;view&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Transfer&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;event&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        indexed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;from&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { indexed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;to&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        indexed: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;tokenId&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span></code></pre></div></div>\\n<p>Using Contract Instances can make it easier to work with contracts if you don&#x27;t want to pass the <code>abi</code> and <code>address</code> properties every time you perform contract actions, e.g. <a href=\\\"/docs/contract/readContract\\\"><code>readContract</code></a>, <a href=\\\"/docs/contract/writeContract\\\"><code>writeContract</code></a>, <a href=\\\"/docs/contract/estimateContractGas\\\"><code>estimateContractGas</code></a>, etc. Switch between the tabs below to see the difference between standalone Contract Actions and Contract Instance Actions:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"contract-instance.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"contract-instance.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { getContract } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient, walletClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./client&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    public: publicClient,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    wallet: walletClient,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> balance</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.read.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">balanceOf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">  &#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.write.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">mint</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">69420</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> logs</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.getEvents.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Transfer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> unwatch</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> contract.watchEvent.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Transfer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    from: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xd8da6bf26964af9d7eed9e03e53415d37aa96045&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    to: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  { </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">onLogs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">logs</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(logs) }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre></div><div data-title=\\\"contract-actions.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"contract-actions.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient, walletClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./client&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> balance</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> walletClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">69420</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> unwatch</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">watchContractEvent</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xfba3912ca04dd458c843e2ee08967fc04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  eventName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Transfer&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    from: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xd8da6bf26964af9d7eed9e03e53415d37aa96045&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    to: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">  onLogs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">logs</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(logs)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div></div>\\n<aside data-callout=\\\"tip\\\"><p>While Contract Instances are great for reducing code duplication, they pull in multiple contract actions (e.g. <code>createContractEventFilter</code>, <code>estimateContractGas</code>, <code>readContract</code>, <code>simulateContract</code>, <code>watchContractEvent</code>, <code>writeContract</code>), so they can be a bit heavier than individual calls. If you only need a couple contract methods and you care about minimizing bundle size to the fullest extent, you may want to use individual calls instead.</p></aside>\\n\",\"id\":\"pages/docs/contract/getContract.md#usage\",\"isPage\":false,\"text\":\"\\nYou can create a Contract Instance with the getContract function by passing in a ABI, address, and Public and/or Wallet Client. Once created, you can call contract methods, fetch for events, listen to events, etc.\\nimport { getContract } from &#x27;viem&#x27;\\nimport { wagmiAbi } from &#x27;./abi&#x27;\\nimport { publicClient, walletClient } from &#x27;./client&#x27;\\n \\n// 1. Create contract instance\\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  // 1a. Insert a single client\\n  client: publicClient,\\n  // 1b. Or public and/or wallet clients\\n  client: { public: publicClient, wallet: walletClient }\\n})\\n \\n// 2. Call contract methods, fetch events, listen to events, etc.\\nconst result = await contract.read.totalSupply()\\nconst logs = await contract.getEvents.Transfer()\\nconst unwatch = contract.watchEvent.Transfer(\\n  { from: &#x27;0xA0Cf798816D4b9b9866b5330EEa46a18382f251e&#x27; },\\n  { onLogs(logs) { console.log(logs) } }\\n)import { createPublicClient, createWalletClient, http, custom } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\nimport { EthereumProvider } from &#x27;@walletconnect/ethereum-provider&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n \\n// eg: Metamask\\nexport const walletClient = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum!),\\n})\\n \\n// eg: WalletConnect\\nconst provider = await EthereumProvider.init({\\n  projectId: &quot;abcd1234&quot;,\\n  showQrModal: true,\\n  chains: [1],\\n})\\n \\nexport const walletClientWC = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(provider),\\n})export const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: &#x27;totalSupply&#x27;,\\n    outputs: [{ type: &#x27;uint256&#x27; }],\\n    stateMutability: &#x27;view&#x27;,\\n    type: &#x27;function&#x27;,\\n  },\\n  {\\n    name: &#x27;Transfer&#x27;,\\n    type: &#x27;event&#x27;,\\n    inputs: [\\n      {\\n        indexed: true,\\n        name: &#x27;from&#x27;,\\n        type: &#x27;address&#x27;,\\n      },\\n      { indexed: true, name: &#x27;to&#x27;, type: &#x27;address&#x27; },\\n      {\\n        indexed: true,\\n        name: &#x27;tokenId&#x27;,\\n        type: &#x27;uint256&#x27;,\\n      },\\n    ],\\n  },\\n  ...\\n] as const;\\nUsing Contract Instances can make it easier to work with contracts if you don&#x27;t want to pass the abi and address properties every time you perform contract actions, e.g. readContract, writeContract, estimateContractGas, etc. Switch between the tabs below to see the difference between standalone Contract Actions and Contract Instance Actions:\\nimport { getContract } from &#x27;viem&#x27;\\nimport { wagmiAbi } from &#x27;./abi&#x27;\\nimport { publicClient, walletClient } from &#x27;./client&#x27;\\n \\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  client: {\\n    public: publicClient,\\n    wallet: walletClient,\\n  }\\n})\\n \\nconst balance = await contract.read.balanceOf([\\n  &#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;,\\n])\\nconst hash = await contract.write.mint([69420])\\nconst logs = await contract.getEvents.Transfer()\\nconst unwatch = contract.watchEvent.Transfer(\\n  {\\n    from: &#x27;0xd8da6bf26964af9d7eed9e03e53415d37aa96045&#x27;,\\n    to: &#x27;0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac&#x27;\\n  },\\n  { onLogs: logs =&gt; console.log(logs) }\\n)import { wagmiAbi } from &#x27;./abi&#x27;\\nimport { publicClient, walletClient } from &#x27;./client&#x27;\\n \\nconst balance = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})\\nconst hash = await walletClient.writeContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;mint&#x27;,\\n  args: [69420]\\n})\\nconst unwatch = publicClient.watchContractEvent({\\n  address: &#x27;0xfba3912ca04dd458c843e2ee08967fc04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  eventName: &#x27;Transfer&#x27;,\\n  args: {\\n    from: &#x27;0xd8da6bf26964af9d7eed9e03e53415d37aa96045&#x27;,\\n    to: &#x27;0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac&#x27;\\n  },\\n  onLogs: logs =&gt; console.log(logs)\\n})\\nWhile Contract Instances are great for reducing code duplication, they pull in multiple contract actions (e.g. createContractEventFilter, estimateContractGas, readContract, simulateContract, watchContractEvent, writeContract), so they can be a bit heavier than individual calls. If you only need a couple contract methods and you care about minimizing bundle size to the fullest extent, you may want to use individual calls instead.\\n\",\"title\":\"Usage\",\"titles\":[\"Contract Instances\"]},{\"href\":\"/docs/contract/getContract#return-value\",\"html\":\"\\n<p>Contract instance object. Type is inferred.</p>\\n<p>Depending on if you create a contract instance with a Public Client, Wallet Client, or both, the methods available on the contract instance will vary.</p>\\n\",\"id\":\"pages/docs/contract/getContract.md#return-value\",\"isPage\":false,\"text\":\"\\nContract instance object. Type is inferred.\\nDepending on if you create a contract instance with a Public Client, Wallet Client, or both, the methods available on the contract instance will vary.\\n\",\"title\":\"Return Value\",\"titles\":[\"Contract Instances\"]},{\"href\":\"/docs/contract/getContract#with-public-client\",\"html\":\"\\n<p>If you pass in a <a href=\\\"https://viem.sh/docs/clients/public\\\"><code>publicClient</code></a>, the following methods are available:</p>\\n<ul>\\n<li><a href=\\\"/docs/contract/createContractEventFilter\\\"><code>createEventFilter</code></a></li>\\n<li><a href=\\\"/docs/contract/estimateContractGas\\\"><code>estimateGas</code></a></li>\\n<li><a href=\\\"/docs/contract/getContractEvents\\\"><code>getEvents</code></a></li>\\n<li><a href=\\\"/docs/contract/readContract\\\"><code>read</code></a></li>\\n<li><a href=\\\"/docs/contract/simulateContract\\\"><code>simulate</code></a></li>\\n<li><a href=\\\"/docs/contract/watchContractEvent\\\"><code>watchEvent</code></a></li>\\n</ul>\\n\",\"id\":\"pages/docs/contract/getContract.md#with-public-client\",\"isPage\":false,\"text\":\"\\nIf you pass in a publicClient, the following methods are available:\\n\\ncreateEventFilter\\nestimateGas\\ngetEvents\\nread\\nsimulate\\nwatchEvent\\n\\n\",\"title\":\"With Public Client\",\"titles\":[\"Contract Instances\",\"Return Value\",null]},{\"href\":\"/docs/contract/getContract#with-wallet-client\",\"html\":\"\\n<p>If you pass in a <a href=\\\"/docs/clients/wallet\\\"><code>walletClient</code></a>, the following methods are available:</p>\\n<ul>\\n<li><a href=\\\"/docs/contract/estimateContractGas\\\"><code>estimateGas</code></a></li>\\n<li><a href=\\\"/docs/contract/writeContract\\\"><code>write</code></a></li>\\n</ul>\\n\",\"id\":\"pages/docs/contract/getContract.md#with-wallet-client\",\"isPage\":false,\"text\":\"\\nIf you pass in a walletClient, the following methods are available:\\n\\nestimateGas\\nwrite\\n\\n\",\"title\":\"With Wallet Client\",\"titles\":[\"Contract Instances\",\"Return Value\",null]},{\"href\":\"/docs/contract/getContract#calling-methods\",\"html\":\"\\n<p>If you are using <a href=\\\"/docs/typescript\\\">TypeScript</a> with viem, your editor will be able to provide autocomplete suggestions for the methods available on the contract instance, as well as the arguments and other options for each method.</p>\\n<p>In general, contract instance methods follow the following format:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// function</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">contract.(estimateGas</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">|</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">read</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">|</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">simulate</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">|</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">write).(functionName)(args, options)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// event</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">contract.(createEventFilter</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">|</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">getEvents</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">|</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">watchEvent).(eventName)(args, options)</span></span></code></pre>\\n<p>If the contract function/event you are using does not accept arguments (e.g. function has no inputs, event has no indexed inputs), then you can omit the <code>args</code> parameter so <code>options</code> is the first and only parameter.</p>\\n\",\"id\":\"pages/docs/contract/getContract.md#calling-methods\",\"isPage\":false,\"text\":\"\\nIf you are using TypeScript with viem, your editor will be able to provide autocomplete suggestions for the methods available on the contract instance, as well as the arguments and other options for each method.\\nIn general, contract instance methods follow the following format:\\n// function\\ncontract.(estimateGas|read|simulate|write).(functionName)(args, options)\\n \\n// event\\ncontract.(createEventFilter|getEvents|watchEvent).(eventName)(args, options)\\nIf the contract function/event you are using does not accept arguments (e.g. function has no inputs, event has no indexed inputs), then you can omit the args parameter so options is the first and only parameter.\\n\",\"title\":\"Calling methods\",\"titles\":[\"Contract Instances\",\"Return Value\",null]},{\"href\":\"/docs/contract/getContract#parameters\",\"html\":\"\\n\",\"id\":\"pages/docs/contract/getContract.md#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"Contract Instances\"]},{\"href\":\"/docs/contract/getContract#address\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#address\\\"><code>Address</code></a></li>\\n</ul>\\n<p>The contract address.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: publicClient</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/getContract.md#address\",\"isPage\":false,\"text\":\"\\n\\nType: Address\\n\\nThe contract address.\\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;, \\n  abi: wagmiAbi,\\n  client: publicClient\\n})\\n\",\"title\":\"address\",\"titles\":[\"Contract Instances\",\"Parameters\"]},{\"href\":\"/docs/contract/getContract#abi\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#abi\\\"><code>Abi</code></a></li>\\n</ul>\\n<p>The contract&#x27;s ABI.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: publicClient</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/getContract.md#abi\",\"isPage\":false,\"text\":\"\\n\\nType: Abi\\n\\nThe contract&#x27;s ABI.\\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi, \\n  client: publicClient\\n})\\n\",\"title\":\"abi\",\"titles\":[\"Contract Instances\",\"Parameters\"]},{\"href\":\"/docs/contract/getContract#client\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/clients/public\\\"><code>Client | { public: Client; wallet: Client }</code></a></li>\\n</ul>\\n<p>The Client used for performing <a href=\\\"/docs/contract/getContract#return-value\\\">contract actions</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: publicClient, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n<p>You can also pass in multiple clients (ie. a Wallet Client and a Public Client):</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> contract</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    public: publicClient, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    wallet: walletClient </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/docs/contract/getContract.md#client\",\"isPage\":false,\"text\":\"\\n\\nType: Client | { public: Client; wallet: Client }\\n\\nThe Client used for performing contract actions.\\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  client: publicClient, \\n})\\nYou can also pass in multiple clients (ie. a Wallet Client and a Public Client):\\nconst contract = getContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  client: { \\n    public: publicClient, \\n    wallet: walletClient \\n  }, \\n})\",\"title\":\"client\",\"titles\":[\"Contract Instances\",\"Parameters\"]}]}}"
