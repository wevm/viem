"{\"value\":{\"mdx\":\"---\\ndescription: Encodes the function name and parameters into an ABI encoded value (4 byte selector & arguments).\\n---\\n\\n# encodeFunctionData\\n\\nEncodes the function name and parameters into an ABI encoded value (4 byte selector & arguments).\\n\\n## Install\\n\\n```ts\\nimport { encodeFunctionData } from 'viem'\\n```\\n\\n## Usage\\n\\nBelow is a very basic example of how to encode a function to calldata.\\n\\n:::code-group\\n\\n```ts [example.ts]\\nimport { encodeFunctionData } from 'viem'\\nimport { wagmiAbi } from './abi.ts'\\n\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply'\\n})\\n```\\n\\n```ts [abi.ts]\\nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: \\\"totalSupply\\\",\\n    outputs: [{ name: \\\"\\\", type: \\\"uint256\\\" }],\\n    stateMutability: \\\"view\\\",\\n    type: \\\"function\\\",\\n  },\\n  ...\\n] as const;\\n```\\n\\n:::\\n\\n### Passing Arguments\\n\\nIf your function requires argument(s), you can pass them through with the `args` attribute.\\n\\nTypeScript types for `args` will be inferred from the function name & ABI, to guard you from inserting the wrong values.\\n\\nFor example, the `balanceOf` function name below requires an **address** argument, and it is typed as `[\\\"0x${string}\\\"]`.\\n\\n:::code-group\\n\\n```ts [example.ts]\\nimport { encodeFunctionData } from 'viem'\\nimport { wagmiAbi } from './abi'\\n\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\n```\\n\\n```ts [abi.ts]\\nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [{ name: \\\"owner\\\", type: \\\"address\\\" }],\\n    name: \\\"balanceOf\\\",\\n    outputs: [{ name: \\\"\\\", type: \\\"uint256\\\" }],\\n    stateMutability: \\\"view\\\",\\n    type: \\\"function\\\",\\n  },\\n  ...\\n] as const;\\n```\\n\\n:::\\n\\n### Without `functionName`\\n\\nIf your `abi` contains only one ABI item, you can omit the `functionName` (it becomes optional):\\n\\n```ts\\nimport { encodeFunctionData } from 'viem'\\n\\nconst abiItem = {\\n  inputs: [{ name: 'owner', type: 'address' }],\\n  name: 'balanceOf',\\n  outputs: [{ name: '', type: 'uint256' }],\\n  stateMutability: 'view',\\n  type: 'function',\\n}\\n\\nconst data = encodeFunctionData({\\n  abi: [abiItem],\\n  functionName: 'balanceOf', // [!code --]\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\n```\\n\\n### Preparation (Performance Optimization)\\n\\nIf you are calling the same function multiple times, you can prepare the function selector once and reuse it.\\n\\n```ts\\nimport { prepareEncodeFunctionData, encodeFunctionData } from 'viem'\\n\\nconst transfer = prepareEncodeFunctionData({\\n  abi: erc20Abi,\\n  functionName: 'transfer',\\n})\\n\\nfor (const address of addresses) {\\n  const data = encodeFunctionData({\\n    ...transfer,\\n    args: [address, 69420n],\\n  })\\n}\\n```\\n\\n## Return Value\\n\\n[`Hex`](/docs/glossary/types#hex)\\n\\nABI encoded data (4byte function selector & arguments).\\n\\n## Parameters\\n\\n### abi\\n\\n- **Type:** [`Abi`](/docs/glossary/types#abi)\\n\\nThe contract's ABI.\\n\\n```ts\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi, // [!code focus]\\n  functionName: 'totalSupply',\\n})\\n```\\n\\n### functionName\\n\\n- **Type:** `string`\\n\\nThe function to encode from the ABI.\\n\\n```ts\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply', // [!code focus]\\n})\\n```\\n\\n### args (optional)\\n\\n- **Type:** Inferred from ABI.\\n\\nArguments to pass to function call.\\n\\n```ts\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'] // [!code focus]\\n})\\n```\",\"document\":[{\"href\":\"/docs/contract/encodeFunctionData#encodefunctiondata\",\"html\":\"</header>\\n<p>Encodes the function name and parameters into an ABI encoded value (4 byte selector &amp; arguments).</p>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#encodefunctiondata\",\"isPage\":true,\"text\":\"\\nEncodes the function name and parameters into an ABI encoded value (4 byte selector &amp; arguments).\\n\",\"title\":\"encodeFunctionData\",\"titles\":[]},{\"href\":\"/docs/contract/encodeFunctionData#install\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeFunctionData } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#install\",\"isPage\":false,\"text\":\"\\nimport { encodeFunctionData } from &#x27;viem&#x27;\\n\",\"title\":\"Install\",\"titles\":[\"encodeFunctionData\"]},{\"href\":\"/docs/contract/encodeFunctionData#usage\",\"html\":\"\\n<p>Below is a very basic example of how to encode a function to calldata.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeFunctionData } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi.ts&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"abi.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"abi.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> wagmiAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;totalSupply&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;uint256&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;view&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;function&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span></code></pre></div></div>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#usage\",\"isPage\":false,\"text\":\"\\nBelow is a very basic example of how to encode a function to calldata.\\nimport { encodeFunctionData } from &#x27;viem&#x27;\\nimport { wagmiAbi } from &#x27;./abi.ts&#x27;\\n \\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;\\n})export const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: &quot;totalSupply&quot;,\\n    outputs: [{ name: &quot;&quot;, type: &quot;uint256&quot; }],\\n    stateMutability: &quot;view&quot;,\\n    type: &quot;function&quot;,\\n  },\\n  ...\\n] as const;\\n\",\"title\":\"Usage\",\"titles\":[\"encodeFunctionData\"]},{\"href\":\"/docs/contract/encodeFunctionData#passing-arguments\",\"html\":\"\\n<p>If your function requires argument(s), you can pass them through with the <code>args</code> attribute.</p>\\n<p>TypeScript types for <code>args</code> will be inferred from the function name &amp; ABI, to guard you from inserting the wrong values.</p>\\n<p>For example, the <code>balanceOf</code> function name below requires an <strong>address</strong> argument, and it is typed as <code>[&quot;0x${string}&quot;]</code>.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeFunctionData } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"abi.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"abi.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> wagmiAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;owner&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;address&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;balanceOf&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;uint256&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;view&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;function&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span></code></pre></div></div>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#passing-arguments\",\"isPage\":false,\"text\":\"\\nIf your function requires argument(s), you can pass them through with the args attribute.\\nTypeScript types for args will be inferred from the function name &amp; ABI, to guard you from inserting the wrong values.\\nFor example, the balanceOf function name below requires an address argument, and it is typed as [&quot;0x${string}&quot;].\\nimport { encodeFunctionData } from &#x27;viem&#x27;\\nimport { wagmiAbi } from &#x27;./abi&#x27;\\n \\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})export const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [{ name: &quot;owner&quot;, type: &quot;address&quot; }],\\n    name: &quot;balanceOf&quot;,\\n    outputs: [{ name: &quot;&quot;, type: &quot;uint256&quot; }],\\n    stateMutability: &quot;view&quot;,\\n    type: &quot;function&quot;,\\n  },\\n  ...\\n] as const;\\n\",\"title\":\"Passing Arguments\",\"titles\":[\"encodeFunctionData\",\"Usage\"]},{\"href\":\"/docs/contract/encodeFunctionData#without-functionname\",\"html\":\"\\n<p>If your <code>abi</code> contains only one ABI item, you can omit the <code>functionName</code> (it becomes optional):</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-diff\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeFunctionData } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> abiItem</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  inputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;owner&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  outputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;view&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: [abiItem],</span></span>\\n<span class=\\\"line diff remove\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#without-functionname\",\"isPage\":false,\"text\":\"\\nIf your abi contains only one ABI item, you can omit the functionName (it becomes optional):\\nimport { encodeFunctionData } from &#x27;viem&#x27;\\n \\nconst abiItem = {\\n  inputs: [{ name: &#x27;owner&#x27;, type: &#x27;address&#x27; }],\\n  name: &#x27;balanceOf&#x27;,\\n  outputs: [{ name: &#x27;&#x27;, type: &#x27;uint256&#x27; }],\\n  stateMutability: &#x27;view&#x27;,\\n  type: &#x27;function&#x27;,\\n}\\n \\nconst data = encodeFunctionData({\\n  abi: [abiItem],\\n  functionName: &#x27;balanceOf&#x27;, \\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})\\n\",\"title\":\"Without functionName\",\"titles\":[\"encodeFunctionData\",\"Usage\"]},{\"href\":\"/docs/contract/encodeFunctionData#preparation-performance-optimization\",\"html\":\"\\n<p>If you are calling the same function multiple times, you can prepare the function selector once and reuse it.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { prepareEncodeFunctionData, encodeFunctionData } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> transfer</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> prepareEncodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: erc20Abi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;transfer&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> address</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> of</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> addresses) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    ...</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">transfer,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    args: [address, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">69420</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">n</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#preparation-performance-optimization\",\"isPage\":false,\"text\":\"\\nIf you are calling the same function multiple times, you can prepare the function selector once and reuse it.\\nimport { prepareEncodeFunctionData, encodeFunctionData } from &#x27;viem&#x27;\\n \\nconst transfer = prepareEncodeFunctionData({\\n  abi: erc20Abi,\\n  functionName: &#x27;transfer&#x27;,\\n})\\n \\nfor (const address of addresses) {\\n  const data = encodeFunctionData({\\n    ...transfer,\\n    args: [address, 69420n],\\n  })\\n}\\n\",\"title\":\"Preparation (Performance Optimization)\",\"titles\":[\"encodeFunctionData\",\"Usage\"]},{\"href\":\"/docs/contract/encodeFunctionData#return-value\",\"html\":\"\\n<p><a href=\\\"/docs/glossary/types#hex\\\"><code>Hex</code></a></p>\\n<p>ABI encoded data (4byte function selector &amp; arguments).</p>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#return-value\",\"isPage\":false,\"text\":\"\\nHex\\nABI encoded data (4byte function selector &amp; arguments).\\n\",\"title\":\"Return Value\",\"titles\":[\"encodeFunctionData\"]},{\"href\":\"/docs/contract/encodeFunctionData#parameters\",\"html\":\"\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"encodeFunctionData\"]},{\"href\":\"/docs/contract/encodeFunctionData#abi\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#abi\\\"><code>Abi</code></a></li>\\n</ul>\\n<p>The contract&#x27;s ABI.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#abi\",\"isPage\":false,\"text\":\"\\n\\nType: Abi\\n\\nThe contract&#x27;s ABI.\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi, \\n  functionName: &#x27;totalSupply&#x27;,\\n})\\n\",\"title\":\"abi\",\"titles\":[\"encodeFunctionData\",\"Parameters\"]},{\"href\":\"/docs/contract/encodeFunctionData#functionname\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>The function to encode from the ABI.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/encodeFunctionData.md#functionname\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nThe function to encode from the ABI.\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;, \\n})\\n\",\"title\":\"functionName\",\"titles\":[\"encodeFunctionData\",\"Parameters\"]},{\"href\":\"/docs/contract/encodeFunctionData#args-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> Inferred from ABI.</li>\\n</ul>\\n<p>Arguments to pass to function call.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/docs/contract/encodeFunctionData.md#args-optional\",\"isPage\":false,\"text\":\"\\n\\nType: Inferred from ABI.\\n\\nArguments to pass to function call.\\nconst data = encodeFunctionData({\\n  abi: wagmiAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;] \\n})\",\"title\":\"args (optional)\",\"titles\":[\"encodeFunctionData\",\"Parameters\"]}]}}"
