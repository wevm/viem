"{\"value\":{\"code\":\"import { formatUnits } from 'viem'\\nimport { publicClient, account } from './config'\\nimport { usdcAddress, usdcAbi } from './contract'\\n\\nconst balance = await publicClient.readContract({\\n  address: usdcAddress,\\n  abi: usdcAbi,\\n  functionName: 'balanceOf',\\n  args: [account.address],\\n})\\n\\nconsole.log(`Your USDC balance: ${formatUnits(balance, 6)} USDC`)\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function formatUnits(value: bigint, decimals: number): string\\nimport formatUnits\",\"docs\":\"Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\\n\\n- Docs: https://viem.sh/docs/utilities/formatUnits\",\"tags\":[[\"example\",\"import { formatUnits } from 'viem'\\n\\nformatUnits(420000000000n, 9)\\n// '420'\"]],\"start\":9,\"length\":11,\"target\":\"formatUnits\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":44,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":58,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":23},{\"type\":\"hover\",\"text\":\"(alias) const usdcAddress: \\\"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\\\"\\nimport usdcAddress\",\"start\":93,\"length\":11,\"target\":\"usdcAddress\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const usdcAbi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport usdcAbi\",\"start\":106,\"length\":7,\"target\":\"usdcAbi\",\"line\":2,\"character\":22},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":141,\"length\":7,\"target\":\"balance\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":157,\"length\":12,\"target\":\"publicClient\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"balanceOf\\\", readonly [...]>(args: ReadContractParameters<...>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":170,\"length\":12,\"target\":\"readContract\",\"line\":4,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":187,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const usdcAddress: \\\"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\\\"\\nimport usdcAddress\",\"start\":196,\"length\":11,\"target\":\"usdcAddress\",\"line\":5,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\",\"start\":211,\"length\":3,\"target\":\"abi\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const usdcAbi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport usdcAbi\",\"start\":216,\"length\":7,\"target\":\"usdcAbi\",\"line\":6,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"symbol\\\" | \\\"name\\\" | \\\"allowance\\\" | \\\"balanceOf\\\" | \\\"decimals\\\" | \\\"totalSupply\\\"\",\"start\":227,\"length\":12,\"target\":\"functionName\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`]\",\"start\":256,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":263,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":271,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":17},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\"]],\"start\":285,\"length\":7,\"target\":\"console\",\"line\":11,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":293,\"length\":3,\"target\":\"log\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) formatUnits(value: bigint, decimals: number): string\\nimport formatUnits\",\"docs\":\"Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\\n\\n- Docs: https://viem.sh/docs/utilities/formatUnits\",\"tags\":[[\"example\",\"import { formatUnits } from 'viem'\\n\\nformatUnits(420000000000n, 9)\\n// '420'\"]],\"start\":319,\"length\":11,\"target\":\"formatUnits\",\"line\":11,\"character\":34},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":331,\"length\":7,\"target\":\"balance\",\"line\":11,\"character\":46}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,3004]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nimport { erc20Abi } from 'viem'\\n\\nexport const usdcAbi = erc20Abi\\nexport const usdcAddress = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":163,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { sepolia } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const publicClient = createPublicClient({\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":593,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nimport { erc20Abi } from 'viem'\\n\\nexport const usdcAbi = erc20Abi\\nexport const usdcAddress = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":756,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { sepolia } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const publicClient = createPublicClient({\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1186,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nimport { erc20Abi } from 'viem'\\n\\nexport const usdcAbi = erc20Abi\\nexport const usdcAddress = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1349,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { sepolia } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const publicClient = createPublicClient({\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1779,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nimport { erc20Abi } from 'viem'\\n\\nexport const usdcAbi = erc20Abi\\nexport const usdcAddress = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1942,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { sepolia } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const publicClient = createPublicClient({\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2372,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nimport { erc20Abi } from 'viem'\\n\\nexport const usdcAbi = erc20Abi\\nexport const usdcAddress = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2535,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { sepolia } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n\\nexport const publicClient = createPublicClient({\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: sepolia,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2965,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { formatUnits } from 'viem'\\nimport { publicClient, account } from './config'\\nimport { usdcAddress, usdcAbi } from './contract'\\n\\nconst balance = await publicClient.readContract({\\n  address: usdcAddress,\\n  abi: usdcAbi,\\n  functionName: 'balanceOf',\\n  args: [account.address],\\n})\\n\\nconsole.log(`Your USDC balance: ${formatUnits(balance, 6)} USDC`)\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function formatUnits(value: bigint, decimals: number): string\\nimport formatUnits\",\"docs\":\"Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\\n\\n- Docs: https://viem.sh/docs/utilities/formatUnits\",\"tags\":[[\"example\",\"import { formatUnits } from 'viem'\\n\\nformatUnits(420000000000n, 9)\\n// '420'\"]],\"start\":9,\"length\":11,\"target\":\"formatUnits\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":44,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":58,\"length\":7,\"target\":\"account\",\"line\":1,\"character\":23},{\"type\":\"hover\",\"text\":\"(alias) const usdcAddress: \\\"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\\\"\\nimport usdcAddress\",\"start\":93,\"length\":11,\"target\":\"usdcAddress\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const usdcAbi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport usdcAbi\",\"start\":106,\"length\":7,\"target\":\"usdcAbi\",\"line\":2,\"character\":22},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":141,\"length\":7,\"target\":\"balance\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 65 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":157,\"length\":12,\"target\":\"publicClient\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}], \\\"balanceOf\\\", readonly [...]>(args: ReadContractParameters<...>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":170,\"length\":12,\"target\":\"readContract\",\"line\":4,\"character\":35},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":187,\"length\":7,\"target\":\"address\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const usdcAddress: \\\"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\\\"\\nimport usdcAddress\",\"start\":196,\"length\":11,\"target\":\"usdcAddress\",\"line\":5,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\",\"start\":211,\"length\":3,\"target\":\"abi\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const usdcAbi: readonly [{\\n    readonly type: \\\"event\\\";\\n    readonly name: \\\"Approval\\\";\\n    readonly inputs: readonly [{\\n        readonly indexed: true;\\n        readonly name: \\\"owner\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly indexed: true;\\n        readonly name: \\\"spender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n}, ... 9 more ..., {\\n    ...;\\n}]\\nimport usdcAbi\",\"start\":216,\"length\":7,\"target\":\"usdcAbi\",\"line\":6,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"symbol\\\" | \\\"name\\\" | \\\"allowance\\\" | \\\"balanceOf\\\" | \\\"decimals\\\" | \\\"totalSupply\\\"\",\"start\":227,\"length\":12,\"target\":\"functionName\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`]\",\"start\":256,\"length\":4,\"target\":\"args\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    ... 5 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":263,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":271,\"length\":7,\"target\":\"address\",\"line\":8,\"character\":17},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\"]],\"start\":285,\"length\":7,\"target\":\"console\",\"line\":11,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":293,\"length\":3,\"target\":\"log\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) formatUnits(value: bigint, decimals: number): string\\nimport formatUnits\",\"docs\":\"Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\\n\\n- Docs: https://viem.sh/docs/utilities/formatUnits\",\"tags\":[[\"example\",\"import { formatUnits } from 'viem'\\n\\nformatUnits(420000000000n, 9)\\n// '420'\"]],\"start\":319,\"length\":11,\"target\":\"formatUnits\",\"line\":11,\"character\":34},{\"type\":\"hover\",\"text\":\"const balance: bigint\",\"start\":331,\"length\":7,\"target\":\"balance\",\"line\":11,\"character\":46}],\"tags\":[]}}"
