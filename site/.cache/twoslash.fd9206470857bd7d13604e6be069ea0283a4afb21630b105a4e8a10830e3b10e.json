"{\"value\":{\"code\":\"import { publicClient } from './client'\\n\\nconst unwatch = publicClient.watchBlockNumber( // [!code focus:99]\\n  { onBlockNumber: blockNumber => console.log(blockNumber) }\\n)\\n\\n\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchBlockNumberReturnType\",\"start\":47,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":57,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchBlockNumber: (args: WatchBlockNumberParameters) => WatchBlockNumberReturnType\",\"docs\":\"Watches and returns incoming block numbers.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchBlockNumber\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\\n- JSON-RPC Methods:\\n  - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newHeads\\\"` event.\",\"tags\":[[\"param\",\"args - {@link WatchBlockNumberParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchBlockNumber({\\n  onBlockNumber: (blockNumber) => console.log(blockNumber),\\n})\"]],\"start\":70,\"length\":16,\"target\":\"watchBlockNumber\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) onBlockNumber: OnBlockNumberFn\",\"docs\":\"The callback to call when a new block number is received.\",\"start\":112,\"length\":13,\"target\":\"onBlockNumber\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) blockNumber: bigint\",\"start\":127,\"length\":11,\"target\":\"blockNumber\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":142,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":150,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":42},{\"type\":\"hover\",\"text\":\"(parameter) blockNumber: bigint\",\"start\":154,\"length\":11,\"target\":\"blockNumber\",\"line\":3,\"character\":46},{\"type\":\"tag\",\"name\":\"log\",\"start\":171,\"length\":0,\"text\":\"> 69420n\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":172,\"length\":0,\"text\":\"> 69421n\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":173,\"length\":0,\"text\":\"> 69422n\",\"line\":8,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[449,467],[430,448],[411,429],[0,240]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"> 69420n\",\"start\":411,\"end\":429},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"> 69421n\",\"start\":430,\"end\":448},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"> 69422n\",\"start\":449,\"end\":467}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":201,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { publicClient } from './client'\\n\\nconst unwatch = publicClient.watchBlockNumber( // [!code focus:99]\\n  { onBlockNumber: blockNumber => console.log(blockNumber) }\\n)\\n// @log: > 69420n\\n\\n// @log: > 69421n\\n\\n// @log: > 69422n\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchBlockNumberReturnType\",\"start\":47,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":57,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchBlockNumber: (args: WatchBlockNumberParameters) => WatchBlockNumberReturnType\",\"docs\":\"Watches and returns incoming block numbers.\\n\\n- Docs: https://viem.sh/docs/actions/public/watchBlockNumber\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\\n- JSON-RPC Methods:\\n  - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\\n  - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\\\"newHeads\\\"` event.\",\"tags\":[[\"param\",\"args - {@link WatchBlockNumberParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = await client.watchBlockNumber({\\n  onBlockNumber: (blockNumber) => console.log(blockNumber),\\n})\"]],\"start\":70,\"length\":16,\"target\":\"watchBlockNumber\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) onBlockNumber: OnBlockNumberFn\",\"docs\":\"The callback to call when a new block number is received.\",\"start\":112,\"length\":13,\"target\":\"onBlockNumber\",\"line\":3,\"character\":4},{\"type\":\"hover\",\"text\":\"(parameter) blockNumber: bigint\",\"start\":127,\"length\":11,\"target\":\"blockNumber\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":142,\"length\":7,\"target\":\"console\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":150,\"length\":3,\"target\":\"log\",\"line\":3,\"character\":42},{\"type\":\"hover\",\"text\":\"(parameter) blockNumber: bigint\",\"start\":154,\"length\":11,\"target\":\"blockNumber\",\"line\":3,\"character\":46}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":171,\"length\":0,\"text\":\"> 69420n\",\"line\":5,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":172,\"length\":0,\"text\":\"> 69421n\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":173,\"length\":0,\"text\":\"> 69422n\",\"line\":8,\"character\":0}]}}"
