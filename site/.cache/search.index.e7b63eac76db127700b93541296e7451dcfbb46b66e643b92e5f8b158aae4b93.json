"{\"value\":{\"mdx\":\"# JSON-RPC Account [A function to create a JSON-RPC Account.]\\n\\nA JSON-RPC Account is an Account whose signing keys are stored on the external Wallet. It **defers** signing of transactions & messages to the target Wallet over JSON-RPC. An example of such Wallet could be a Browser Extension Wallet, or Mobile Wallet over WalletConnect.\\n\\n## Usage\\n\\nA JSON-RPC Account can just be initialized as an [Address](/docs/glossary/types#address) string. In the usage below, we are extracting the address from a Browser Extension Wallet (e.g. MetaMask) with the `window.ethereum` Provider via `eth_requestAccounts`:\\n\\n```ts twoslash\\n// @noErrors\\nimport 'viem/window'\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst [address] = await window.ethereum.request({ // [!code focus:3]\\n  method: 'eth_requestAccounts' \\n})\\n\\nconst client = createWalletClient({\\n  account: address, // [!code focus]\\n  chain: mainnet,\\n  transport: custom(window.ethereum!)\\n})\\n```\\n\",\"document\":[{\"href\":\"/docs/accounts/jsonRpc#json-rpc-account\",\"html\":\"<div role=\\\"doc-subtitle\\\">A function to create a JSON-RPC Account.</div></header>\\n<p>A JSON-RPC Account is an Account whose signing keys are stored on the external Wallet. It <strong>defers</strong> signing of transactions &amp; messages to the target Wallet over JSON-RPC. An example of such Wallet could be a Browser Extension Wallet, or Mobile Wallet over WalletConnect.</p>\\n\",\"id\":\"pages/docs/accounts/jsonRpc.md#json-rpc-account\",\"isPage\":true,\"text\":\"A function to create a JSON-RPC Account.\\nA JSON-RPC Account is an Account whose signing keys are stored on the external Wallet. It defers signing of transactions &amp; messages to the target Wallet over JSON-RPC. An example of such Wallet could be a Browser Extension Wallet, or Mobile Wallet over WalletConnect.\\n\",\"title\":\"JSON-RPC Account\",\"titles\":[]},{\"href\":\"/docs/accounts/jsonRpc#usage\",\"html\":\"\\n<p>A JSON-RPC Account can just be initialized as an <a href=\\\"/docs/glossary/types#address\\\">Address</a> string. In the usage below, we are extracting the address from a Browser Extension Wallet (e.g. MetaMask) with the <code>window.ethereum</code> Provider via <code>eth_requestAccounts</code>:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/window&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createWalletClient, custom } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">address</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> window.ethereum.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">request</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  method: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;eth_requestAccounts&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createWalletClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  account: address, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">custom</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(window.ethereum</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/docs/accounts/jsonRpc.md#usage\",\"isPage\":false,\"text\":\"\\nA JSON-RPC Account can just be initialized as an Address string. In the usage below, we are extracting the address from a Browser Extension Wallet (e.g. MetaMask) with the window.ethereum Provider via eth_requestAccounts:\\n// @noErrors\\nimport &#x27;viem/window&#x27;\\nimport { createWalletClient, custom } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nconst [address] = await window.ethereum.request({ \\n  method: &#x27;eth_requestAccounts&#x27; \\n})\\n \\nconst client = createWalletClient({\\n  account: address, \\n  chain: mainnet,\\n  transport: custom(window.ethereum!)\\n})\",\"title\":\"Usage\",\"titles\":[\"JSON-RPC Account\"]}]}}"
