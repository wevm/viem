"{\"value\":{\"mdx\":\"---\\ndescription: Defines a KZG interface.\\n---\\n\\n# defineKzg\\n\\nDefines a [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) compatible [KZG interface](https://notes.ethereum.org/@vbuterin/proto_danksharding_faq#How-%E2%80%9Ccomplicated%E2%80%9D-and-%E2%80%9Cnew%E2%80%9D-is-KZG). The KZG interface is used in the blob transaction signing process to generate KZG commitments & proofs.\\n\\n`defineKzg` accepts a KZG interface that implements two functions:\\n\\n- `blobToKzgCommitment`: A function that takes a blob and returns it's KZG commitment.\\n- `computeBlobKzgProof`: A function that takes a blob and it's commitment, and returns the KZG proof.\\n\\nA couple of KZG implementations we recommend are:\\n- [c-kzg](https://github.com/ethereum/c-kzg-4844): Node.js bindings to c-kzg.\\n- [kzg-wasm](https://github.com/ethereumjs/kzg-wasm): WebAssembly bindings to c-kzg.\\n\\n## Import\\n\\n```ts twoslash\\nimport { defineKzg } from 'viem'\\n```\\n\\n## Usage\\n\\n```ts twoslash\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { defineKzg } from 'viem'\\nimport { mainnetTrustedSetupPath } from 'viem/node'\\n\\ncKzg.loadTrustedSetup(mainnetTrustedSetupPath)\\n\\nconst kzg = defineKzg(cKzg)\\n```\\n\\n## Returns\\n\\n`Kzg`\\n\\nThe KZG interface.\\n\\n## Parameters\\n\\n### blobToKzgCommitment\\n\\n- **Type:** `(blob: ByteArray) => ByteArray`\\n\\nConvert a blob to a KZG commitment.\\n\\n### computeBlobKzgProof\\n\\n- **Type:** `(blob: ByteArray, commitment: ByteArray) => ByteArray`\\n\\nGiven a blob, return the KZG proof that is used to verify it against the commitment.\",\"document\":[{\"href\":\"/docs/utilities/defineKzg#definekzg\",\"html\":\"</header>\\n<p>Defines a <a href=\\\"https://eips.ethereum.org/EIPS/eip-4844\\\">EIP-4844</a> compatible <a href=\\\"https://notes.ethereum.org/@vbuterin/proto_danksharding_faq#How-%E2%80%9Ccomplicated%E2%80%9D-and-%E2%80%9Cnew%E2%80%9D-is-KZG\\\">KZG interface</a>. The KZG interface is used in the blob transaction signing process to generate KZG commitments &amp; proofs.</p>\\n<p><code>defineKzg</code> accepts a KZG interface that implements two functions:</p>\\n<ul>\\n<li><code>blobToKzgCommitment</code>: A function that takes a blob and returns it&#x27;s KZG commitment.</li>\\n<li><code>computeBlobKzgProof</code>: A function that takes a blob and it&#x27;s commitment, and returns the KZG proof.</li>\\n</ul>\\n<p>A couple of KZG implementations we recommend are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/ethereum/c-kzg-4844\\\">c-kzg</a>: Node.js bindings to c-kzg.</li>\\n<li><a href=\\\"https://github.com/ethereumjs/kzg-wasm\\\">kzg-wasm</a>: WebAssembly bindings to c-kzg.</li>\\n</ul>\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#definekzg\",\"isPage\":true,\"text\":\"\\nDefines a EIP-4844 compatible KZG interface. The KZG interface is used in the blob transaction signing process to generate KZG commitments &amp; proofs.\\ndefineKzg accepts a KZG interface that implements two functions:\\n\\nblobToKzgCommitment: A function that takes a blob and returns it&#x27;s KZG commitment.\\ncomputeBlobKzgProof: A function that takes a blob and it&#x27;s commitment, and returns the KZG proof.\\n\\nA couple of KZG implementations we recommend are:\\n\\nc-kzg: Node.js bindings to c-kzg.\\nkzg-wasm: WebAssembly bindings to c-kzg.\\n\\n\",\"title\":\"defineKzg\",\"titles\":[]},{\"href\":\"/docs/utilities/defineKzg#import\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineKzg } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span></code></pre>\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#import\",\"isPage\":false,\"text\":\"\\nimport { defineKzg } from &#x27;viem&#x27;\\n\",\"title\":\"Import\",\"titles\":[\"defineKzg\"]},{\"href\":\"/docs/utilities/defineKzg#usage\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> *</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> cKzg </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;c-kzg&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineKzg } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnetTrustedSetupPath } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/node&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">cKzg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">loadTrustedSetup</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(mainnetTrustedSetupPath)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> kzg</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineKzg</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(cKzg)</span></span></code></pre>\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#usage\",\"isPage\":false,\"text\":\"\\n// @noErrors\\nimport * as cKzg from &#x27;c-kzg&#x27;\\nimport { defineKzg } from &#x27;viem&#x27;\\nimport { mainnetTrustedSetupPath } from &#x27;viem/node&#x27;\\n \\ncKzg.loadTrustedSetup(mainnetTrustedSetupPath)\\n \\nconst kzg = defineKzg(cKzg)\\n\",\"title\":\"Usage\",\"titles\":[\"defineKzg\"]},{\"href\":\"/docs/utilities/defineKzg#returns\",\"html\":\"\\n<p><code>Kzg</code></p>\\n<p>The KZG interface.</p>\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#returns\",\"isPage\":false,\"text\":\"\\nKzg\\nThe KZG interface.\\n\",\"title\":\"Returns\",\"titles\":[\"defineKzg\"]},{\"href\":\"/docs/utilities/defineKzg#parameters\",\"html\":\"\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"defineKzg\"]},{\"href\":\"/docs/utilities/defineKzg#blobtokzgcommitment\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>(blob: ByteArray) =&gt; ByteArray</code></li>\\n</ul>\\n<p>Convert a blob to a KZG commitment.</p>\\n\",\"id\":\"pages/docs/utilities/defineKzg.md#blobtokzgcommitment\",\"isPage\":false,\"text\":\"\\n\\nType: (blob: ByteArray) =&gt; ByteArray\\n\\nConvert a blob to a KZG commitment.\\n\",\"title\":\"blobToKzgCommitment\",\"titles\":[\"defineKzg\",\"Parameters\"]},{\"href\":\"/docs/utilities/defineKzg#computeblobkzgproof\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>(blob: ByteArray, commitment: ByteArray) =&gt; ByteArray</code></li>\\n</ul>\\n<p>Given a blob, return the KZG proof that is used to verify it against the commitment.</p>\",\"id\":\"pages/docs/utilities/defineKzg.md#computeblobkzgproof\",\"isPage\":false,\"text\":\"\\n\\nType: (blob: ByteArray, commitment: ByteArray) =&gt; ByteArray\\n\\nGiven a blob, return the KZG proof that is used to verify it against the commitment.\",\"title\":\"computeBlobKzgProof\",\"titles\":[\"defineKzg\",\"Parameters\"]}]}}"
