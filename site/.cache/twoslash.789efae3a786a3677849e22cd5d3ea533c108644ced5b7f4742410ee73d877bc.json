"{\"value\":{\"code\":\"const transport = fallback([alchemy, infura], {\\n  shouldThrow: (err: Error) => { // [!code focus]\\n    return err.message.includes('sad times') // [!code focus]\\n  }, // [!code focus]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const transport: FallbackTransport<readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>]>\",\"start\":6,\"length\":9,\"target\":\"transport\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) fallback<readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>]>(transports_: readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>], config?: FallbackTransportConfig): FallbackTransport<...>\\nimport fallback\",\"start\":18,\"length\":8,\"target\":\"fallback\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"const alchemy: HttpTransport<undefined, false>\",\"start\":28,\"length\":7,\"target\":\"alchemy\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"const infura: HttpTransport<undefined, false>\",\"start\":37,\"length\":6,\"target\":\"infura\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) shouldThrow?: ((error: Error) => boolean | undefined) | undefined\",\"docs\":\"Callback on whether an error should throw or try the next transport in the fallback.\",\"start\":50,\"length\":11,\"target\":\"shouldThrow\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(parameter) err: Error\",\"start\":64,\"length\":3,\"target\":\"err\",\"line\":1,\"character\":16},{\"type\":\"hover\",\"text\":\"interface Error\",\"start\":69,\"length\":5,\"target\":\"Error\",\"line\":1,\"character\":21},{\"type\":\"hover\",\"text\":\"(parameter) err: Error\",\"start\":109,\"length\":3,\"target\":\"err\",\"line\":2,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) Error.message: string\",\"start\":113,\"length\":7,\"target\":\"message\",\"line\":2,\"character\":15},{\"type\":\"hover\",\"text\":\"(method) String.includes(searchString: string, position?: number): boolean\",\"docs\":\"Returns true if searchString appears as a substring of the result of converting this\\nobject to a String, at one or more positions that are\\ngreater than or equal to position; otherwise, returns false.\",\"tags\":[[\"param\",\"searchString search string\"],[\"param\",\"position If position is undefined, 0 is assumed, so as to search all of the String.\"]],\"start\":121,\"length\":8,\"target\":\"includes\",\"line\":2,\"character\":23}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,160]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createPublicClient, fallback, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nconst alchemy = http('') \\nconst infura = http('') \\n// ---cut---\\nconst transport = fallback([alchemy, infura], {\\n  shouldThrow: (err: Error) => { // [!code focus]\\n    return err.message.includes('sad times') // [!code focus]\\n  }, // [!code focus]\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const transport: FallbackTransport<readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>]>\",\"start\":6,\"length\":9,\"target\":\"transport\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) fallback<readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>]>(transports_: readonly [HttpTransport<undefined, false>, HttpTransport<undefined, false>], config?: FallbackTransportConfig): FallbackTransport<...>\\nimport fallback\",\"start\":18,\"length\":8,\"target\":\"fallback\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"const alchemy: HttpTransport<undefined, false>\",\"start\":28,\"length\":7,\"target\":\"alchemy\",\"line\":0,\"character\":28},{\"type\":\"hover\",\"text\":\"const infura: HttpTransport<undefined, false>\",\"start\":37,\"length\":6,\"target\":\"infura\",\"line\":0,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) shouldThrow?: ((error: Error) => boolean | undefined) | undefined\",\"docs\":\"Callback on whether an error should throw or try the next transport in the fallback.\",\"start\":50,\"length\":11,\"target\":\"shouldThrow\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(parameter) err: Error\",\"start\":64,\"length\":3,\"target\":\"err\",\"line\":1,\"character\":16},{\"type\":\"hover\",\"text\":\"interface Error\",\"start\":69,\"length\":5,\"target\":\"Error\",\"line\":1,\"character\":21},{\"type\":\"hover\",\"text\":\"(parameter) err: Error\",\"start\":109,\"length\":3,\"target\":\"err\",\"line\":2,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) Error.message: string\",\"start\":113,\"length\":7,\"target\":\"message\",\"line\":2,\"character\":15},{\"type\":\"hover\",\"text\":\"(method) String.includes(searchString: string, position?: number): boolean\",\"docs\":\"Returns true if searchString appears as a substring of the result of converting this\\nobject to a String, at one or more positions that are\\ngreater than or equal to position; otherwise, returns false.\",\"tags\":[[\"param\",\"searchString search string\"],[\"param\",\"position If position is undefined, 0 is assumed, so as to search all of the String.\"]],\"start\":121,\"length\":8,\"target\":\"includes\",\"line\":2,\"character\":23}],\"tags\":[]}}"
