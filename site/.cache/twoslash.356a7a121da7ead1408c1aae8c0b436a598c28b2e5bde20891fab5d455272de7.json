"{\"value\":{\"code\":\"import { \\n  blobsToCommitments, \\n  blobsToProofs,\\n  toBlobSidecars, \\n  toBlobs \\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x...' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg }) // [!code focus]\\n\\nconst sidecars = toBlobSidecars({ \\n  blobs,\\n  commitments,\\n  proofs, // [!code focus]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":12,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function blobsToProofs<const blobs extends readonly ByteArray[] | readonly Hex[], const commitments extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: blobsToProofsParameters<blobs, commitments, to>): blobsToProofsReturnType<to>\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":35,\"length\":13,\"target\":\"blobsToProofs\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":52,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":71,\"length\":7,\"target\":\"toBlobs\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":103,\"length\":3,\"target\":\"kzg\",\"line\":6,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":129,\"length\":5,\"target\":\"blobs\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x...\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x...\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":137,\"length\":7,\"target\":\"toBlobs\",\"line\":8,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":147,\"length\":4,\"target\":\"data\",\"line\":8,\"character\":24},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":170,\"length\":11,\"target\":\"commitments\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":184,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":9,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":205,\"length\":5,\"target\":\"blobs\",\"line\":9,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":212,\"length\":3,\"target\":\"kzg\",\"line\":9,\"character\":48},{\"type\":\"hover\",\"text\":\"const proofs: `0x${string}`[]\",\"start\":225,\"length\":6,\"target\":\"proofs\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToProofs<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\">(parameters: blobsToProofsParameters<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): `0x${string}`[]\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":234,\"length\":13,\"target\":\"blobsToProofs\",\"line\":10,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into proofs.\",\"start\":250,\"length\":5,\"target\":\"blobs\",\"line\":10,\"character\":31},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly `0x${string}`[]\",\"docs\":\"Commitments for the blobs.\",\"start\":257,\"length\":11,\"target\":\"commitments\",\"line\":10,\"character\":38},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"computeBlobKzgProof\\\">\",\"docs\":\"KZG implementation.\",\"start\":270,\"length\":3,\"target\":\"kzg\",\"line\":10,\"character\":51},{\"type\":\"hover\",\"text\":\"const sidecars: BlobSidecars<`0x${string}`>\",\"start\":301,\"length\":8,\"target\":\"sidecars\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobSidecars<undefined, readonly `0x${string}`[], \\\"hex\\\">(parameters: ToBlobSidecarsParameters<undefined, readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): BlobSidecars<`0x${string}`>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":312,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":12,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs.\",\"start\":332,\"length\":5,\"target\":\"blobs\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly ByteArray[] | readonly `0x${string}`[]\",\"docs\":\"Commitment for each blob.\",\"start\":341,\"length\":11,\"target\":\"commitments\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) proofs: readonly ByteArray[] | readonly `0x${string}`[]\",\"docs\":\"Proof for each blob.\",\"start\":356,\"length\":6,\"target\":\"proofs\",\"line\":15,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,457]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":22,\"end\":35},{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":231,\"end\":244}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"kzg.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/kzg.ts\",\"content\":\"// @filename: kzg.ts\\n\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { setupKzg } from 'viem'\\nimport { mainnetTrustedSetupPath } from 'viem/node'\\n\\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":209,\"filename\":\"kzg.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/kzg.ts\",\"content\":\"// @filename: kzg.ts\\n\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { setupKzg } from 'viem'\\nimport { mainnetTrustedSetupPath } from 'viem/node'\\n\\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":418,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { \\n  blobsToCommitments, \\n  blobsToProofs,\\n  toBlobSidecars, \\n  toBlobs \\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x...' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg }) // [!code focus]\\n\\nconst sidecars = toBlobSidecars({ \\n  blobs,\\n  commitments,\\n  proofs, // [!code focus]\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":12,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function blobsToProofs<const blobs extends readonly ByteArray[] | readonly Hex[], const commitments extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: blobsToProofsParameters<blobs, commitments, to>): blobsToProofsReturnType<to>\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":35,\"length\":13,\"target\":\"blobsToProofs\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":52,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":71,\"length\":7,\"target\":\"toBlobs\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":103,\"length\":3,\"target\":\"kzg\",\"line\":6,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":129,\"length\":5,\"target\":\"blobs\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x...\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x...\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":137,\"length\":7,\"target\":\"toBlobs\",\"line\":8,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":147,\"length\":4,\"target\":\"data\",\"line\":8,\"character\":24},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":170,\"length\":11,\"target\":\"commitments\",\"line\":9,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":184,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":9,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":205,\"length\":5,\"target\":\"blobs\",\"line\":9,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":212,\"length\":3,\"target\":\"kzg\",\"line\":9,\"character\":48},{\"type\":\"hover\",\"text\":\"const proofs: `0x${string}`[]\",\"start\":225,\"length\":6,\"target\":\"proofs\",\"line\":10,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToProofs<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\">(parameters: blobsToProofsParameters<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): `0x${string}`[]\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":234,\"length\":13,\"target\":\"blobsToProofs\",\"line\":10,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into proofs.\",\"start\":250,\"length\":5,\"target\":\"blobs\",\"line\":10,\"character\":31},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly `0x${string}`[]\",\"docs\":\"Commitments for the blobs.\",\"start\":257,\"length\":11,\"target\":\"commitments\",\"line\":10,\"character\":38},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"computeBlobKzgProof\\\">\",\"docs\":\"KZG implementation.\",\"start\":270,\"length\":3,\"target\":\"kzg\",\"line\":10,\"character\":51},{\"type\":\"hover\",\"text\":\"const sidecars: BlobSidecars<`0x${string}`>\",\"start\":301,\"length\":8,\"target\":\"sidecars\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobSidecars<undefined, readonly `0x${string}`[], \\\"hex\\\">(parameters: ToBlobSidecarsParameters<undefined, readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): BlobSidecars<`0x${string}`>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":312,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":12,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs.\",\"start\":332,\"length\":5,\"target\":\"blobs\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly ByteArray[] | readonly `0x${string}`[]\",\"docs\":\"Commitment for each blob.\",\"start\":341,\"length\":11,\"target\":\"commitments\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) proofs: readonly ByteArray[] | readonly `0x${string}`[]\",\"docs\":\"Proof for each blob.\",\"start\":356,\"length\":6,\"target\":\"proofs\",\"line\":15,\"character\":2}],\"tags\":[]}}"
