"{\"value\":{\"code\":\"import { parseAbi } from 'viem'\\nimport { publicClient } from './config'\\n\\nconst data = await publicClient.readContract({\\n  abi: parseAbi(['function name() view returns (string)']),\\n  code: '0x...', // Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\\n  functionName: 'name'\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":41,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const data: string\",\"start\":79,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":92,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}], \\\"name\\\", readonly []>(args: ReadContractParameters<readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}], \\\"name\\\", readonly []>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":105,\"length\":12,\"target\":\"readContract\",\"line\":3,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}]\",\"start\":122,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function name() view returns (string)\\\"]>(signatures: [\\\"function name() view returns (string)\\\"]): readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [...];\\n}]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":127,\"length\":8,\"target\":\"parseAbi\",\"line\":4,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) code: `0x${string}`\",\"start\":182,\"length\":4,\"target\":\"code\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"name\\\"\",\"start\":296,\"length\":12,\"target\":\"functionName\",\"line\":6,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,611]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const account = {\\n  address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  abi: parseAbi(['function entryPoint() view returns (address)'])\\n} as const\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":371,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":572,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseAbi } from 'viem'\\nimport { publicClient } from './config'\\n\\nconst data = await publicClient.readContract({\\n  abi: parseAbi(['function name() view returns (string)']),\\n  code: '0x...', // Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\\n  functionName: 'name'\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":41,\"length\":12,\"target\":\"publicClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const data: string\",\"start\":79,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":92,\"length\":12,\"target\":\"publicClient\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) readContract: <readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}], \\\"name\\\", readonly []>(args: ReadContractParameters<readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}], \\\"name\\\", readonly []>) => Promise<...>\",\"docs\":\"Calls a read-only function on a contract, and returns the response.\\n\\n- Docs: https://viem.sh/docs/contract/readContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\",\"tags\":[[\"remarks\",\"A \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link ReadContractParameters}\"],[\"returns\",\"The response from the contract. Type is inferred. {@link ReadContractReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { readContract } from 'viem/contract'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\\n  functionName: 'balanceOf',\\n  args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\\n})\\n// 424122n\"]],\"start\":105,\"length\":12,\"target\":\"readContract\",\"line\":3,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [{\\n        readonly type: \\\"string\\\";\\n    }];\\n}]\",\"start\":122,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function name() view returns (string)\\\"]>(signatures: [\\\"function name() view returns (string)\\\"]): readonly [{\\n    readonly name: \\\"name\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"view\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [...];\\n}]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":127,\"length\":8,\"target\":\"parseAbi\",\"line\":4,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) code: `0x${string}`\",\"start\":182,\"length\":4,\"target\":\"code\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"name\\\"\",\"start\":296,\"length\":12,\"target\":\"functionName\",\"line\":6,\"character\":2}],\"tags\":[]}}"
