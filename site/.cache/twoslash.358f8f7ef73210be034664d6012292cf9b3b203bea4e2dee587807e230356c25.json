"{\"value\":{\"code\":\"import { account, walletClient } from './config'\\n \\nconst signature_1 = await walletClient.signMessage({ // [!code focus:99]\\n  account,\\n  message: 'hello world',\\n})\\n\\nconst signature_2 = await walletClient.signMessage({\\n  account,\\n  // Hex data representation of message.\\n  message: { raw: '0x68656c6c6f20776f726c64' },\\n})\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"import account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"const signature_1: `0x${string}`\",\"start\":57,\"length\":11,\"target\":\"signature_1\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":77,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":90,\"length\":11,\"target\":\"signMessage\",\"line\":2,\"character\":39},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":126,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":137,\"length\":7,\"target\":\"message\",\"line\":4,\"character\":2},{\"type\":\"tag\",\"name\":\"log\",\"start\":164,\"length\":0,\"text\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"line\":6,\"character\":0},{\"type\":\"hover\",\"text\":\"const signature_2: `0x${string}`\",\"start\":171,\"length\":11,\"target\":\"signature_2\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":191,\"length\":12,\"target\":\"walletClient\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":204,\"length\":11,\"target\":\"signMessage\",\"line\":7,\"character\":39},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":220,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":272,\"length\":7,\"target\":\"message\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) raw: `0x${string}` | ByteArray\",\"docs\":\"Raw data representation of the message.\",\"start\":283,\"length\":3,\"target\":\"raw\",\"line\":10,\"character\":13},{\"type\":\"tag\",\"name\":\"log\",\"start\":321,\"length\":0,\"text\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"line\":13,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[750,902],[441,593],[0,277]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"start\":441,\"end\":593},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"start\":750,\"end\":902}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\n\\nexport const walletClient = createWalletClient({\\n  account: privateKeyToAccount('0x...'),\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":238,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { account, walletClient } from './config'\\n \\nconst signature_1 = await walletClient.signMessage({ // [!code focus:99]\\n  account,\\n  message: 'hello world',\\n})\\n// @log: Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\\n\\nconst signature_2 = await walletClient.signMessage({\\n  account,\\n  // Hex data representation of message.\\n  message: { raw: '0x68656c6c6f20776f726c64' },\\n})\\n// @log: Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"import account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"const signature_1: `0x${string}`\",\"start\":57,\"length\":11,\"target\":\"signature_1\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":77,\"length\":12,\"target\":\"walletClient\",\"line\":2,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":90,\"length\":11,\"target\":\"signMessage\",\"line\":2,\"character\":39},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":126,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":137,\"length\":7,\"target\":\"message\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"const signature_2: `0x${string}`\",\"start\":171,\"length\":11,\"target\":\"signature_2\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: {\\n        address: Address;\\n        nonceManager?: NonceManager | undefined;\\n        sign: (parameters: {\\n            hash: Hash;\\n        }) => Promise<Hex>;\\n        ... 6 more ...;\\n        type: \\\"local\\\";\\n    };\\n    ... 27 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":191,\"length\":12,\"target\":\"walletClient\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) signMessage: (args: SignMessageParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignMessageReturnType>\",\"docs\":\"Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signMessage\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\\n\\nWith the calculated signature, you can:\\n- use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\\n- use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\",\"tags\":[[\"param\",\"args - {@link SignMessageParameters}\"],[\"returns\",\"The signed message. {@link SignMessageReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signMessage({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  message: 'hello world',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signMessage({\\n  message: 'hello world',\\n})\"]],\"start\":204,\"length\":11,\"target\":\"signMessage\",\"line\":7,\"character\":39},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"start\":220,\"length\":7,\"target\":\"account\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: SignableMessage\",\"start\":272,\"length\":7,\"target\":\"message\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) raw: `0x${string}` | ByteArray\",\"docs\":\"Raw data representation of the message.\",\"start\":283,\"length\":3,\"target\":\"raw\",\"line\":10,\"character\":13}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":164,\"length\":0,\"text\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"line\":6,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":321,\"length\":0,\"text\":\"Output: \\\"0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b\\\"\",\"line\":13,\"character\":0}]}}"
