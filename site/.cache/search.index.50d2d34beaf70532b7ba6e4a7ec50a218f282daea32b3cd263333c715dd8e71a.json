"{\"value\":{\"mdx\":\"# Formatters [Configure chain-based formatters in Viem]\\n\\nYou can modify how Blocks & Transactions are formatted by using the `formatters` property on the Chain.\\n\\nThis is useful for chains that have a different Block or Transaction structure than Mainnet (e.g. Celo & OP Stack chains).\\n\\n## Usage\\n\\n```tsx\\nimport { \\n  defineBlock,\\n  defineChain,\\n  defineTransaction, \\n  defineTransactionReceipt, \\n  defineTransactionRequest \\n} from 'viem' \\n\\nexport const example = defineChain({\\n  /* ... */\\n  formatters: { \\n    block: defineBlock(/* ... */),\\n    transaction: defineTransaction(/* ... */),\\n    transactionReceipt: defineTransactionReceipt(/* ... */),\\n    transactionRequest: defineTransactionRequest(/* ... */),\\n  } \\n})\\n```\\n\\n## API\\n\\n### `formatters.block`\\n\\nYou can modify how Blocks are formatted by using the `formatters.block` property on the Chain.\\n\\nYou can either pass in the Block overrides, or the whole Block itself to the `format` function of `defineBlock`. You can also exclude certain properties with `exclude`.\\n\\n```ts\\nimport { defineBlock, defineChain, hexToBigInt } from 'viem'\\n\\ntype RpcBlockOverrides = { // [!code focus:6]\\n  secondaryFee: `0x${string}`\\n}\\ntype BlockOverrides = {\\n  secondaryFee: bigint\\n}\\n\\nconst example = defineChain({\\n  /* ... */\\n  formatters: { // [!code focus:10]\\n    block: defineBlock({\\n      exclude: ['difficulty'],\\n      format(args: RpcBlockOverrides): BlockOverrides {\\n        return {\\n          secondaryFee: hexToBigInt(args.secondaryFee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n\\nconst block = await client.getBlock() // [!code focus:2]\\n//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }\\n```\\n\\n### `formatters.transaction`\\n\\nYou can modify how Transactions are formatted by using the `formatters.transaction` property on the Chain.\\n\\nYou can either pass in the Transaction overrides, or the whole Transaction itself to the `format` function of `defineTransaction`. You can also exclude certain properties with `exclude`.\\n\\n```ts\\nimport { defineTransaction, defineChain, hexToBigInt } from 'viem'\\n\\ntype RpcTransactionOverrides = { // [!code focus:6]\\n  mint: `0x${string}`\\n}\\ntype TransactionOverrides = {\\n  mint: bigint\\n}\\n\\nconst example = defineChain({\\n  /* ... */\\n  formatters: { // [!code focus:10]\\n    transaction: defineTransaction({\\n      exclude: ['gasPrice'],\\n      format(args: RpcTransactionOverrides): TransactionOverrides {\\n        return {\\n          mint: hexToBigInt(args.mint)\\n        }\\n      },\\n    }),\\n  },\\n})\\n\\nconst transaction = await client.getTransaction({ hash: '0x...' }) // [!code focus:2]\\n//    ^? { ..., gasPrice: never, mint: bigint, ... }\\n```\\n\\n### `formatters.transactionReceipt`\\n\\nYou can modify how Transaction Receipts are formatted by using the `formatters.transactionReceipt` property on the Chain.\\n\\nYou can either pass in the Transaction Receipt overrides, or the whole Transaction Receipt itself to the `format` function of `defineTransactionReceipt`. You can also exclude certain properties with `exclude`.\\n\\n```ts\\nimport { defineTransactionReceipt, defineChain, hexToBigInt } from 'viem'\\n\\ntype RpcTransactionReceiptOverrides = { // [!code focus:6]\\n  l1Fee: `0x${string}`\\n}\\ntype TransactionReceiptOverrides = {\\n  l1Fee: bigint\\n}\\n\\nconst example = defineChain({\\n  /* ... */\\n  formatters: { // [!code focus:11]\\n    transactionReceipt: defineTransactionReceipt({\\n      exclude: ['effectiveGasPrice'],\\n      format(args: RpcTransactionReceiptOverrides): \\n        TransactionReceiptOverrides {\\n        return {\\n          l1Fee: hexToBigInt(args.l1Fee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n\\nconst receipt = await client.getTransactionReceipt({ hash: '0x...' }) // [!code focus:2]\\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\\n```\\n\\n### `formatters.transactionRequest`\\n\\nYou can modify how Transaction Requests are formatted by using the `formatters.transactionRequest` property on the Chain.\\n\\nYou can either pass in the Transaction Request overrides, or the whole Transaction Request itself to the `format` function of `defineTransactionRequest`. You can also exclude certain properties with `exclude`.\\n\\n```ts\\nimport { defineTransactionRequest, defineChain, hexToBigInt } from 'viem'\\n\\ntype RpcTransactionRequestOverrides = { // [!code focus:6]\\n  secondaryFee: `0x${string}`\\n}\\ntype TransactionRequestOverrides = {\\n  secondaryFee: bigint\\n}\\n\\nconst example = defineChain({\\n  /* ... */\\n  formatters: { // [!code focus:11]\\n    transactionRequest: defineTransactionRequest({\\n      exclude: ['effectiveGasPrice'],\\n      format(args: TransactionRequestOverrides): \\n        RpcTransactionRequestOverrides {\\n        return {\\n          secondaryFee: numberToHex(args.secondaryFee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n\\nconst receipt = await client.getTransactionReceipt({ hash: '0x...' }) // [!code focus:2]\\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\\n```\\n\",\"document\":[{\"href\":\"/docs/chains/formatters#formatters\",\"html\":\"<div role=\\\"doc-subtitle\\\">Configure chain-based formatters in Viem</div></header>\\n<p>You can modify how Blocks &amp; Transactions are formatted by using the <code>formatters</code> property on the Chain.</p>\\n<p>This is useful for chains that have a different Block or Transaction structure than Mainnet (e.g. Celo &amp; OP Stack chains).</p>\\n\",\"id\":\"pages/docs/chains/formatters.md#formatters\",\"isPage\":true,\"text\":\"Configure chain-based formatters in Viem\\nYou can modify how Blocks &amp; Transactions are formatted by using the formatters property on the Chain.\\nThis is useful for chains that have a different Block or Transaction structure than Mainnet (e.g. Celo &amp; OP Stack chains).\\n\",\"title\":\"Formatters\",\"titles\":[]},{\"href\":\"/docs/chains/formatters#usage\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  defineBlock,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  defineChain,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  defineTransaction, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  defineTransactionReceipt, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  defineTransactionRequest </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  formatters: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    block: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineBlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transaction: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransaction</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transactionReceipt: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransactionReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transactionRequest: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransactionRequest</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">/* ... */</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/formatters.md#usage\",\"isPage\":false,\"text\":\"\\nimport { \\n  defineBlock,\\n  defineChain,\\n  defineTransaction, \\n  defineTransactionReceipt, \\n  defineTransactionRequest \\n} from &#x27;viem&#x27; \\n \\nexport const example = defineChain({\\n  /* ... */\\n  formatters: { \\n    block: defineBlock(/* ... */),\\n    transaction: defineTransaction(/* ... */),\\n    transactionReceipt: defineTransactionReceipt(/* ... */),\\n    transactionRequest: defineTransactionRequest(/* ... */),\\n  } \\n})\\n\",\"title\":\"Usage\",\"titles\":[\"Formatters\"]},{\"href\":\"/docs/chains/formatters#api\",\"html\":\"\\n\",\"id\":\"pages/docs/chains/formatters.md#api\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"API\",\"titles\":[\"Formatters\"]},{\"href\":\"/docs/chains/formatters#formattersblock\",\"html\":\"\\n<p>You can modify how Blocks are formatted by using the <code>formatters.block</code> property on the Chain.</p>\\n<p>You can either pass in the Block overrides, or the whole Block itself to the <code>format</code> function of <code>defineBlock</code>. You can also exclude certain properties with <code>exclude</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineBlock, defineChain, hexToBigInt } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcBlockOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  secondaryFee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `0x${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">string</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> BlockOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  secondaryFee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> bigint</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  formatters: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    block: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineBlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      exclude: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;difficulty&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      format</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">args</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcBlockOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> BlockOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          secondaryFee: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">hexToBigInt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(args.secondaryFee)</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> block</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getBlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/formatters.md#formattersblock\",\"isPage\":false,\"text\":\"\\nYou can modify how Blocks are formatted by using the formatters.block property on the Chain.\\nYou can either pass in the Block overrides, or the whole Block itself to the format function of defineBlock. You can also exclude certain properties with exclude.\\nimport { defineBlock, defineChain, hexToBigInt } from &#x27;viem&#x27;\\n \\ntype RpcBlockOverrides = { \\n  secondaryFee: `0x${string}`\\n}\\ntype BlockOverrides = {\\n  secondaryFee: bigint\\n}\\n \\nconst example = defineChain({\\n  /* ... */\\n  formatters: { \\n    block: defineBlock({\\n      exclude: [&#x27;difficulty&#x27;],\\n      format(args: RpcBlockOverrides): BlockOverrides {\\n        return {\\n          secondaryFee: hexToBigInt(args.secondaryFee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n \\nconst block = await client.getBlock() \\n//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }\\n\",\"title\":\"formatters.block\",\"titles\":[\"Formatters\",\"API\"]},{\"href\":\"/docs/chains/formatters#formatterstransaction\",\"html\":\"\\n<p>You can modify how Transactions are formatted by using the <code>formatters.transaction</code> property on the Chain.</p>\\n<p>You can either pass in the Transaction overrides, or the whole Transaction itself to the <code>format</code> function of <code>defineTransaction</code>. You can also exclude certain properties with <code>exclude</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineTransaction, defineChain, hexToBigInt } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcTransactionOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  mint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `0x${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">string</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TransactionOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  mint</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> bigint</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  formatters: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transaction: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransaction</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      exclude: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;gasPrice&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      format</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">args</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcTransactionOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TransactionOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          mint: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">hexToBigInt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(args.mint)</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> transaction</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getTransaction</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ hash: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x...&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^? { ..., gasPrice: never, mint: bigint, ... }</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/formatters.md#formatterstransaction\",\"isPage\":false,\"text\":\"\\nYou can modify how Transactions are formatted by using the formatters.transaction property on the Chain.\\nYou can either pass in the Transaction overrides, or the whole Transaction itself to the format function of defineTransaction. You can also exclude certain properties with exclude.\\nimport { defineTransaction, defineChain, hexToBigInt } from &#x27;viem&#x27;\\n \\ntype RpcTransactionOverrides = { \\n  mint: `0x${string}`\\n}\\ntype TransactionOverrides = {\\n  mint: bigint\\n}\\n \\nconst example = defineChain({\\n  /* ... */\\n  formatters: { \\n    transaction: defineTransaction({\\n      exclude: [&#x27;gasPrice&#x27;],\\n      format(args: RpcTransactionOverrides): TransactionOverrides {\\n        return {\\n          mint: hexToBigInt(args.mint)\\n        }\\n      },\\n    }),\\n  },\\n})\\n \\nconst transaction = await client.getTransaction({ hash: &#x27;0x...&#x27; }) \\n//    ^? { ..., gasPrice: never, mint: bigint, ... }\\n\",\"title\":\"formatters.transaction\",\"titles\":[\"Formatters\",\"API\"]},{\"href\":\"/docs/chains/formatters#formatterstransactionreceipt\",\"html\":\"\\n<p>You can modify how Transaction Receipts are formatted by using the <code>formatters.transactionReceipt</code> property on the Chain.</p>\\n<p>You can either pass in the Transaction Receipt overrides, or the whole Transaction Receipt itself to the <code>format</code> function of <code>defineTransactionReceipt</code>. You can also exclude certain properties with <code>exclude</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineTransactionReceipt, defineChain, hexToBigInt } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcTransactionReceiptOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  l1Fee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `0x${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">string</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TransactionReceiptOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  l1Fee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> bigint</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  formatters: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transactionReceipt: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransactionReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      exclude: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;effectiveGasPrice&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      format</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">args</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcTransactionReceiptOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">        TransactionReceiptOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          l1Fee: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">hexToBigInt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(args.l1Fee)</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> receipt</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getTransactionReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ hash: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x...&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/formatters.md#formatterstransactionreceipt\",\"isPage\":false,\"text\":\"\\nYou can modify how Transaction Receipts are formatted by using the formatters.transactionReceipt property on the Chain.\\nYou can either pass in the Transaction Receipt overrides, or the whole Transaction Receipt itself to the format function of defineTransactionReceipt. You can also exclude certain properties with exclude.\\nimport { defineTransactionReceipt, defineChain, hexToBigInt } from &#x27;viem&#x27;\\n \\ntype RpcTransactionReceiptOverrides = { \\n  l1Fee: `0x${string}`\\n}\\ntype TransactionReceiptOverrides = {\\n  l1Fee: bigint\\n}\\n \\nconst example = defineChain({\\n  /* ... */\\n  formatters: { \\n    transactionReceipt: defineTransactionReceipt({\\n      exclude: [&#x27;effectiveGasPrice&#x27;],\\n      format(args: RpcTransactionReceiptOverrides): \\n        TransactionReceiptOverrides {\\n        return {\\n          l1Fee: hexToBigInt(args.l1Fee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n \\nconst receipt = await client.getTransactionReceipt({ hash: &#x27;0x...&#x27; }) \\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\\n\",\"title\":\"formatters.transactionReceipt\",\"titles\":[\"Formatters\",\"API\"]},{\"href\":\"/docs/chains/formatters#formatterstransactionrequest\",\"html\":\"\\n<p>You can modify how Transaction Requests are formatted by using the <code>formatters.transactionRequest</code> property on the Chain.</p>\\n<p>You can either pass in the Transaction Request overrides, or the whole Transaction Request itself to the <code>format</code> function of <code>defineTransactionRequest</code>. You can also exclude certain properties with <code>exclude</code>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineTransactionRequest, defineChain, hexToBigInt } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RpcTransactionRequestOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  secondaryFee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `0x${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">string</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TransactionRequestOverrides</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">  secondaryFee</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> bigint</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  formatters: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transactionRequest: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">defineTransactionRequest</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      exclude: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;effectiveGasPrice&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      format</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">args</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TransactionRequestOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">        RpcTransactionRequestOverrides</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          secondaryFee: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">numberToHex</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(args.secondaryFee)</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> receipt</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getTransactionReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ hash: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x...&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre>\",\"id\":\"pages/docs/chains/formatters.md#formatterstransactionrequest\",\"isPage\":false,\"text\":\"\\nYou can modify how Transaction Requests are formatted by using the formatters.transactionRequest property on the Chain.\\nYou can either pass in the Transaction Request overrides, or the whole Transaction Request itself to the format function of defineTransactionRequest. You can also exclude certain properties with exclude.\\nimport { defineTransactionRequest, defineChain, hexToBigInt } from &#x27;viem&#x27;\\n \\ntype RpcTransactionRequestOverrides = { \\n  secondaryFee: `0x${string}`\\n}\\ntype TransactionRequestOverrides = {\\n  secondaryFee: bigint\\n}\\n \\nconst example = defineChain({\\n  /* ... */\\n  formatters: { \\n    transactionRequest: defineTransactionRequest({\\n      exclude: [&#x27;effectiveGasPrice&#x27;],\\n      format(args: TransactionRequestOverrides): \\n        RpcTransactionRequestOverrides {\\n        return {\\n          secondaryFee: numberToHex(args.secondaryFee)\\n        }\\n      },\\n    }),\\n  },\\n})\\n \\nconst receipt = await client.getTransactionReceipt({ hash: &#x27;0x...&#x27; }) \\n//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }\",\"title\":\"formatters.transactionRequest\",\"titles\":[\"Formatters\",\"API\"]}]}}"
