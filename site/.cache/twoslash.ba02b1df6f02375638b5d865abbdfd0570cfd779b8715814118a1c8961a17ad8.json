"{\"value\":{\"code\":\"import { parseEther } from 'viem'\\nimport { bundlerClient } from './config.js'\\n \\nconst hash = await bundlerClient.sendUserOperation({ \\n  account, \\n  calls: [{ \\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', \\n    value: parseEther('0.001') \\n  }] \\n}) \\n \\nconst receipt = await bundlerClient.waitForUserOperationReceipt({ hash }) \",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":43,\"length\":13,\"target\":\"bundlerClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":86,\"length\":4,\"target\":\"hash\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":99,\"length\":13,\"target\":\"bundlerClient\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendUserOperation: <[{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}], any>(parameters: any) => Promise<SendUserOperationReturnType>\",\"docs\":\"Broadcasts a User Operation to the Bundler.\\n\\n- Docs: https://viem.sh/actions/bundler/sendUserOperation\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SendUserOperationParameters}\"],[\"returns\",\"The User Operation hash. {@link SendUserOperationReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.sendUserOperation({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":113,\"length\":17,\"target\":\"sendUserOperation\",\"line\":3,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account: any\",\"start\":136,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    to: string;\\n    value: bigint;\\n}[]\",\"start\":148,\"length\":5,\"target\":\"calls\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":163,\"length\":2,\"target\":\"to\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":218,\"length\":5,\"target\":\"value\",\"line\":7,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":225,\"length\":10,\"target\":\"parseEther\",\"line\":7,\"character\":11},{\"type\":\"hover\",\"text\":\"const receipt: {\\n    actualGasCost: bigint;\\n    actualGasUsed: bigint;\\n    entryPoint: Address;\\n    logs: Log<bigint, number, false>[];\\n    nonce: bigint;\\n    paymaster?: `0x${string}` | undefined;\\n    reason?: string | undefined | undefined;\\n    receipt: TransactionReceipt<...>;\\n    sender: Address;\\n    success: boolean;\\n    userOpHash: Hash;\\n}\",\"start\":264,\"length\":7,\"target\":\"receipt\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":280,\"length\":13,\"target\":\"bundlerClient\",\"line\":11,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) waitForUserOperationReceipt: (parameters: WaitForUserOperationReceiptParameters) => Promise<WaitForUserOperationReceiptReturnType>\",\"docs\":\"Waits for the User Operation to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the User Operation receipt.\\n\\n- Docs: https://viem.sh/docs/actions/bundler/waitForUserOperationReceipt\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link WaitForUserOperationReceiptParameters}\"],[\"returns\",\"The receipt. {@link WaitForUserOperationReceiptReturnType}\"],[\"example\",\"import { createBundlerClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst receipt = await client.waitForUserOperationReceipt({\\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\\n})\"]],\"start\":294,\"length\":27,\"target\":\"waitForUserOperationReceipt\",\"line\":11,\"character\":36},{\"type\":\"hover\",\"text\":\"(property) hash: `0x${string}`\",\"docs\":\"The hash of the User Operation.\",\"start\":324,\"length\":4,\"target\":\"hash\",\"line\":11,\"character\":66}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,1627]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":25,\"end\":38},{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":520,\"end\":533}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\n\\n// @noErrors\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst owner = privateKeyToAccount('0x...')\\n\\nexport const account = await toCoinbaseSmartAccount({ \\n  client, \\n  owners: [owner]\\n}) \\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":495,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\n\\n// @noErrors\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { createBundlerClient, toCoinbaseSmartAccount } from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst owner = privateKeyToAccount('0x...')\\n\\nexport const account = await toCoinbaseSmartAccount({ \\n  client, \\n  owners: [owner]\\n}) \\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":990,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { \\n  createBundlerClient, \\n  toCoinbaseSmartAccount \\n} from 'viem/account-abstraction'\\nimport { mainnet } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\n \\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n \\nconst owner = privateKeyToAccount('0x...')\\n \\nconst account = await toCoinbaseSmartAccount({ \\n  client, \\n  owners: [owner]\\n}) \\n\\nexport const bundlerClient = createBundlerClient({\\n  account,\\n  client,\\n  transport: http('https://public.pimlico.io/v2/1/rpc'),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1588,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseEther } from 'viem'\\nimport { bundlerClient } from './config.js'\\n \\nconst hash = await bundlerClient.sendUserOperation({ \\n  account, \\n  calls: [{ \\n    to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', \\n    value: parseEther('0.001') \\n  }] \\n}) \\n \\nconst receipt = await bundlerClient.waitForUserOperationReceipt({ hash }) \",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":43,\"length\":13,\"target\":\"bundlerClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":86,\"length\":4,\"target\":\"hash\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":99,\"length\":13,\"target\":\"bundlerClient\",\"line\":3,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) sendUserOperation: <[{\\n    readonly to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\";\\n    readonly value: bigint;\\n}], any>(parameters: any) => Promise<SendUserOperationReturnType>\",\"docs\":\"Broadcasts a User Operation to the Bundler.\\n\\n- Docs: https://viem.sh/actions/bundler/sendUserOperation\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SendUserOperationParameters}\"],[\"returns\",\"The User Operation hash. {@link SendUserOperationReturnType}\"],[\"example\",\"import { createBundlerClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { toSmartAccount } from 'viem/accounts'\\n\\nconst account = toSmartAccount({ ... })\\n\\nconst bundlerClient = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst values = await bundlerClient.sendUserOperation({\\n  account,\\n  calls: [{ to: '0x...', value: parseEther('1') }],\\n})\"]],\"start\":113,\"length\":17,\"target\":\"sendUserOperation\",\"line\":3,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) account: any\",\"start\":136,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: {\\n    to: string;\\n    value: bigint;\\n}[]\",\"start\":148,\"length\":5,\"target\":\"calls\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: string\",\"start\":163,\"length\":2,\"target\":\"to\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":218,\"length\":5,\"target\":\"value\",\"line\":7,\"character\":4},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":225,\"length\":10,\"target\":\"parseEther\",\"line\":7,\"character\":11},{\"type\":\"hover\",\"text\":\"const receipt: {\\n    actualGasCost: bigint;\\n    actualGasUsed: bigint;\\n    entryPoint: Address;\\n    logs: Log<bigint, number, false>[];\\n    nonce: bigint;\\n    paymaster?: `0x${string}` | undefined;\\n    reason?: string | undefined | undefined;\\n    receipt: TransactionReceipt<...>;\\n    sender: Address;\\n    success: boolean;\\n    userOpHash: Hash;\\n}\",\"start\":264,\"length\":7,\"target\":\"receipt\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const bundlerClient: BundlerClient<HttpTransport<undefined, false>, undefined, {\\n    abi: readonly [{\\n        readonly inputs: readonly [];\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly type: \\\"constructor\\\";\\n    }, ... 44 more ..., {\\n        ...;\\n    }];\\n    ... 18 more ...;\\n    type: \\\"smart\\\";\\n}, {\\n    ...;\\n}, undefined>\\nimport bundlerClient\",\"start\":280,\"length\":13,\"target\":\"bundlerClient\",\"line\":11,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) waitForUserOperationReceipt: (parameters: WaitForUserOperationReceiptParameters) => Promise<WaitForUserOperationReceiptReturnType>\",\"docs\":\"Waits for the User Operation to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the User Operation receipt.\\n\\n- Docs: https://viem.sh/docs/actions/bundler/waitForUserOperationReceipt\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link WaitForUserOperationReceiptParameters}\"],[\"returns\",\"The receipt. {@link WaitForUserOperationReceiptReturnType}\"],[\"example\",\"import { createBundlerClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createBundlerClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst receipt = await client.waitForUserOperationReceipt({\\n  hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\\n})\"]],\"start\":294,\"length\":27,\"target\":\"waitForUserOperationReceipt\",\"line\":11,\"character\":36},{\"type\":\"hover\",\"text\":\"(property) hash: `0x${string}`\",\"docs\":\"The hash of the User Operation.\",\"start\":324,\"length\":4,\"target\":\"hash\",\"line\":11,\"character\":66}],\"tags\":[]}}"
