"{\"value\":{\"code\":\"import { coinbase, toSmartAccount } from 'viem/account-abstraction'\\nimport { client, owner } from './config.js'\\n\\nconst account = await toSmartAccount({\\n  client,\\n  entryPoint: {\\n    abi: [/* ... */],\\n    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\\n    version: '0.7',\\n  },\\n  \\n  async decodeCalls(data) {\\n    // Decode calls from calldata as defined by the Smart Account contract.\\n  },\\n  async encodeCalls(calls) {\\n    // Encode calls as defined by the Smart Account contract.\\n  },\\n  async getAddress() {\\n    // Get the address of the Smart Account.\\n  },\\n  async getFactoryArgs() {\\n    // Build the Factory properties for the Smart Account.\\n  },\\n  async getNonce() {\\n    // Get the nonce of the Smart Account.\\n  },\\n  async getStubSignature() {\\n    // Get the stub signature for User Operations from the Smart Account.\\n  },\\n  async signMessage(message) {\\n    // Sign message to be verified by the Smart Account contract.\\n  },\\n  async signTypedData(typedData) {\\n    // Sign typed data to be verified by the Smart Account contract.\\n  },\\n  async signUserOperation(userOperation) {\\n    // Sign a User Operation to be broadcasted via the Bundler.\\n  },\\n\\n  // (Optional) Extend the Smart Account with custom properties.\\n  extend: {\\n    abi: [/* ... */],\\n    factory: {\\n      abi: [/* ... */],\\n      address: '0xda4b37208c41c4f6d1b101cac61e182fe1da0754',\\n    },\\n  },\\n  // (Optional) User Operation configuration.\\n  userOperation: {\\n    async estimateGas(userOperation) {\\n      // Estimate gas properties for a User Operation.\\n    },\\n  },\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"import coinbase\",\"start\":9,\"length\":8,\"target\":\"coinbase\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toSmartAccount<implementation extends SmartAccountImplementation>(implementation: implementation): Promise<ToSmartAccountReturnType<implementation>>\\nimport toSmartAccount\",\"tags\":[[\"description\",\"Creates a Smart Account with a provided account implementation.\"],[\"param\",\"parameters - {@link ToSmartAccountParameters}\"],[\"returns\",\"A Smart Account. {@link ToSmartAccountReturnType}\"]],\"start\":19,\"length\":14,\"target\":\"toSmartAccount\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":77,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":85,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: {\\n    client: Client;\\n    entryPoint: {\\n        abi: Abi;\\n        address: Address;\\n        version: EntryPointVersion;\\n    };\\n    extend?: object | undefined;\\n    getAddress: () => Promise<Address>;\\n    ... 13 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":119,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toSmartAccount<SmartAccountImplementation>(implementation: SmartAccountImplementation): Promise<{\\n    client: Client;\\n    entryPoint: {\\n        ...;\\n    };\\n    ... 15 more ...;\\n    type: \\\"smart\\\";\\n}>\\nimport toSmartAccount\",\"tags\":[[\"description\",\"Creates a Smart Account with a provided account implementation.\"],[\"param\",\"parameters - {@link ToSmartAccountParameters}\"],[\"returns\",\"A Smart Account. {@link ToSmartAccountReturnType}\"]],\"start\":135,\"length\":14,\"target\":\"toSmartAccount\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client\",\"docs\":\"Client used to retrieve Smart Account data, and perform signing (if owner is a JSON-RPC Account).\",\"start\":154,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) entryPoint: {\\n    abi: Abi;\\n    address: Address;\\n    version: EntryPointVersion;\\n}\",\"docs\":\"Compatible EntryPoint of the Smart Account.\",\"start\":164,\"length\":10,\"target\":\"entryPoint\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: Abi\",\"docs\":\"Compatible EntryPoint ABI.\",\"start\":182,\"length\":3,\"target\":\"abi\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Compatible EntryPoint address.\",\"start\":204,\"length\":7,\"target\":\"address\",\"line\":7,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) version: EntryPointVersion\",\"docs\":\"Compatible EntryPoint version.\",\"start\":263,\"length\":7,\"target\":\"version\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) decodeCalls?: ((data: Hex) => Promise<readonly Call[]>) | undefined\",\"docs\":\"Decodes calldata into structured calls.\",\"tags\":[[\"example\",\"```ts\\nconst calls = await account.decodeCalls('0x...')\\n// [{ to: '0x...', data: '0x...', value: 100n }, ...]\\n```\"]],\"start\":295,\"length\":11,\"target\":\"decodeCalls\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) data: `0x${string}`\",\"start\":307,\"length\":4,\"target\":\"data\",\"line\":11,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) encodeCalls: (calls: readonly Call[]) => Promise<Hex>\",\"docs\":\"Encodes the calls into calldata for executing a User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst callData = await account.encodeCalls([\\n  { to: '0x...', data: '0x...' },\\n  { to: '0x...', data: '0x...', value: 100n },\\n])\\n// '0x...'\\n```\"]],\"start\":404,\"length\":11,\"target\":\"encodeCalls\",\"line\":14,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) calls: readonly Call[]\",\"start\":416,\"length\":5,\"target\":\"calls\",\"line\":14,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) getAddress: () => Promise<Address>\",\"docs\":\"Retrieves the Smart Account's address.\",\"tags\":[[\"example\",\"```ts\\nconst address = await account.getAddress()\\n// '0x...'\\n```\"]],\"start\":500,\"length\":10,\"target\":\"getAddress\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getFactoryArgs: () => Promise<{\\n    factory?: Address | undefined;\\n    factoryData?: Hex | undefined;\\n}>\",\"docs\":\"Retrieves the calldata for factory call to deploy a Smart Account.\\nIf the Smart Account has already been deployed, this will return undefined values.\",\"tags\":[[\"example\",\"Counterfactual account\\n```ts\\nconst { factory, factoryData } = await account.getFactoryArgs()\\n// { factory: '0x...', factoryData: '0x...' }\\n```\"],[\"example\",\"Deployed account\\n```ts\\nconst { factory, factoryData } = await account.getFactoryArgs()\\n// { factory: undefined, factoryData: undefined }\\n```\"]],\"start\":573,\"length\":14,\"target\":\"getFactoryArgs\",\"line\":20,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getNonce?: ((parameters?: {\\n    key?: bigint | undefined;\\n} | undefined) => Promise<bigint>) | undefined\",\"docs\":\"Retrieves the nonce of the Account.\",\"tags\":[[\"example\",\"```ts\\nconst nonce = await account.getNonce()\\n// 1n\\n```\"]],\"start\":664,\"length\":8,\"target\":\"getNonce\",\"line\":23,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getStubSignature: (parameters?: UserOperationRequest | undefined) => Promise<Hex>\",\"docs\":\"Retrieves the User Operation \\\"stub\\\" signature for gas estimation.\\n\\n```ts\\nconst signature = await account.getStubSignature()\\n// '0x...'\\n```\",\"start\":733,\"length\":16,\"target\":\"getStubSignature\",\"line\":26,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) signMessage: (parameters: {\\n    message: SignableMessage;\\n}) => Promise<Hex>\",\"docs\":\"Signs a [EIP-191 Personal Sign message](https://eips.ethereum.org/EIPS/eip-191).\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signMessage({\\n  message: 'Hello, World!'\\n})\\n// '0x...'\\n```\"]],\"start\":841,\"length\":11,\"target\":\"signMessage\",\"line\":29,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) message: {\\n    message: SignableMessage;\\n}\",\"start\":853,\"length\":7,\"target\":\"message\",\"line\":29,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>\",\"docs\":\"Signs [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712).\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signTypedData({\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n})\\n```\"]],\"start\":943,\"length\":13,\"target\":\"signTypedData\",\"line\":32,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) typedData: TypedDataDefinition<typedData, primaryType, typedData extends {\\n    [x: string]: readonly TypedDataParameter[];\\n    [x: `string[${string}]`]: undefined;\\n    [x: `function[${string}]`]: undefined;\\n    [x: `address[${string}]`]: undefined;\\n    [x: `bool[${string}]`]: undefined;\\n    [x: `bytes[${string}]`]: undefined;\\n    [x: `bytes1[${string}]`]: undefined;\\n    [x: `bytes18[${string}]`]: undefined;\\n    [x: `bytes32[${string}]`]: undefined;\\n    [x: `bytes31[${string}]`]: undefined;\\n    [x: `bytes30[${string}]`]: undefined;\\n    [x: `bytes29[${string}]`]: undefined;\\n    [x: `bytes28[${string}]`]: undefined;\\n    [x: `bytes27[${string}]`]: undefined;\\n    [x: `bytes26[${string}]`]: undefined;\\n    [x: `bytes25[${string}]`]: undefined;\\n    [x: `bytes24[${string}]`]: undefined;\\n    [x: `bytes23[${string}]`]: undefined;\\n    [x: `bytes22[${string}]`]: undefined;\\n    [x: `bytes21[${string}]`]: undefined;\\n    [x: `bytes20[${string}]`]: undefined;\\n    [x: `bytes2[${string}]`]: undefined;\\n    [x: `bytes19[${string}]`]: undefined;\\n    [x: `bytes17[${string}]`]: undefined;\\n    [x: `bytes16[${string}]`]: undefined;\\n    [x: `bytes15[${string}]`]: undefined;\\n    [x: `bytes14[${string}]`]: undefined;\\n    [x: `bytes13[${string}]`]: undefined;\\n    [x: `bytes12[${string}]`]: undefined;\\n    [x: `bytes11[${string}]`]: undefined;\\n    [x: `bytes10[${string}]`]: undefined;\\n    [x: `bytes9[${string}]`]: undefined;\\n    [x: `bytes8[${string}]`]: undefined;\\n    [x: `bytes7[${string}]`]: undefined;\\n    [x: `bytes6[${string}]`]: undefined;\\n    [x: `bytes5[${string}]`]: undefined;\\n    [x: `bytes4[${string}]`]: undefined ...\",\"start\":957,\"length\":9,\"target\":\"typedData\",\"line\":32,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) signUserOperation: (parameters: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}) => Promise<Hex>\",\"docs\":\"Signs the User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signUserOperation({\\n  chainId: 1,\\n  userOperation,\\n})\\n```\"]],\"start\":1052,\"length\":17,\"target\":\"signUserOperation\",\"line\":35,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) userOperation: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}\",\"start\":1070,\"length\":13,\"target\":\"userOperation\",\"line\":35,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) extend?: object | undefined\",\"docs\":\"Extend the Smart Account with custom properties.\",\"start\":1224,\"length\":6,\"target\":\"extend\",\"line\":40,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: never[]\",\"start\":1238,\"length\":3,\"target\":\"abi\",\"line\":41,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) factory: {\\n    abi: never[];\\n    address: string;\\n}\",\"start\":1260,\"length\":7,\"target\":\"factory\",\"line\":42,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) abi: never[]\",\"start\":1277,\"length\":3,\"target\":\"abi\",\"line\":43,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: string\",\"start\":1301,\"length\":7,\"target\":\"address\",\"line\":44,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) userOperation?: {\\n    estimateGas?: ((userOperation: UserOperationRequest) => Promise<ExactPartial<EstimateUserOperationGasReturnType> | undefined>) | undefined;\\n} | undefined\",\"docs\":\"User Operation configuration properties.\",\"start\":1416,\"length\":13,\"target\":\"userOperation\",\"line\":48,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) estimateGas?: ((userOperation: UserOperationRequest) => Promise<ExactPartial<EstimateUserOperationGasReturnType> | undefined>) | undefined\",\"docs\":\"Prepares gas properties for the User Operation request.\",\"start\":1443,\"length\":11,\"target\":\"estimateGas\",\"line\":49,\"character\":10},{\"type\":\"hover\",\"text\":\"(parameter) userOperation: UserOperationRequest\",\"start\":1455,\"length\":13,\"target\":\"userOperation\",\"line\":49,\"character\":22}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,339]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { http, createPublicClient } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const owner = privateKeyToAccount('0x...')\\n \\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":300,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { coinbase, toSmartAccount } from 'viem/account-abstraction'\\nimport { client, owner } from './config.js'\\n\\nconst account = await toSmartAccount({\\n  client,\\n  entryPoint: {\\n    abi: [/* ... */],\\n    address: '0x0000000071727De22E5E9d8BAf0edAc6f37da032',\\n    version: '0.7',\\n  },\\n  \\n  async decodeCalls(data) {\\n    // Decode calls from calldata as defined by the Smart Account contract.\\n  },\\n  async encodeCalls(calls) {\\n    // Encode calls as defined by the Smart Account contract.\\n  },\\n  async getAddress() {\\n    // Get the address of the Smart Account.\\n  },\\n  async getFactoryArgs() {\\n    // Build the Factory properties for the Smart Account.\\n  },\\n  async getNonce() {\\n    // Get the nonce of the Smart Account.\\n  },\\n  async getStubSignature() {\\n    // Get the stub signature for User Operations from the Smart Account.\\n  },\\n  async signMessage(message) {\\n    // Sign message to be verified by the Smart Account contract.\\n  },\\n  async signTypedData(typedData) {\\n    // Sign typed data to be verified by the Smart Account contract.\\n  },\\n  async signUserOperation(userOperation) {\\n    // Sign a User Operation to be broadcasted via the Bundler.\\n  },\\n\\n  // (Optional) Extend the Smart Account with custom properties.\\n  extend: {\\n    abi: [/* ... */],\\n    factory: {\\n      abi: [/* ... */],\\n      address: '0xda4b37208c41c4f6d1b101cac61e182fe1da0754',\\n    },\\n  },\\n  // (Optional) User Operation configuration.\\n  userOperation: {\\n    async estimateGas(userOperation) {\\n      // Estimate gas properties for a User Operation.\\n    },\\n  },\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"import coinbase\",\"start\":9,\"length\":8,\"target\":\"coinbase\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function toSmartAccount<implementation extends SmartAccountImplementation>(implementation: implementation): Promise<ToSmartAccountReturnType<implementation>>\\nimport toSmartAccount\",\"tags\":[[\"description\",\"Creates a Smart Account with a provided account implementation.\"],[\"param\",\"parameters - {@link ToSmartAccountParameters}\"],[\"returns\",\"A Smart Account. {@link ToSmartAccountReturnType}\"]],\"start\":19,\"length\":14,\"target\":\"toSmartAccount\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":77,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":85,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: {\\n    client: Client;\\n    entryPoint: {\\n        abi: Abi;\\n        address: Address;\\n        version: EntryPointVersion;\\n    };\\n    extend?: object | undefined;\\n    getAddress: () => Promise<Address>;\\n    ... 13 more ...;\\n    type: \\\"smart\\\";\\n}\",\"start\":119,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toSmartAccount<SmartAccountImplementation>(implementation: SmartAccountImplementation): Promise<{\\n    client: Client;\\n    entryPoint: {\\n        ...;\\n    };\\n    ... 15 more ...;\\n    type: \\\"smart\\\";\\n}>\\nimport toSmartAccount\",\"tags\":[[\"description\",\"Creates a Smart Account with a provided account implementation.\"],[\"param\",\"parameters - {@link ToSmartAccountParameters}\"],[\"returns\",\"A Smart Account. {@link ToSmartAccountReturnType}\"]],\"start\":135,\"length\":14,\"target\":\"toSmartAccount\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client\",\"docs\":\"Client used to retrieve Smart Account data, and perform signing (if owner is a JSON-RPC Account).\",\"start\":154,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) entryPoint: {\\n    abi: Abi;\\n    address: Address;\\n    version: EntryPointVersion;\\n}\",\"docs\":\"Compatible EntryPoint of the Smart Account.\",\"start\":164,\"length\":10,\"target\":\"entryPoint\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: Abi\",\"docs\":\"Compatible EntryPoint ABI.\",\"start\":182,\"length\":3,\"target\":\"abi\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"Compatible EntryPoint address.\",\"start\":204,\"length\":7,\"target\":\"address\",\"line\":7,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) version: EntryPointVersion\",\"docs\":\"Compatible EntryPoint version.\",\"start\":263,\"length\":7,\"target\":\"version\",\"line\":8,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) decodeCalls?: ((data: Hex) => Promise<readonly Call[]>) | undefined\",\"docs\":\"Decodes calldata into structured calls.\",\"tags\":[[\"example\",\"```ts\\nconst calls = await account.decodeCalls('0x...')\\n// [{ to: '0x...', data: '0x...', value: 100n }, ...]\\n```\"]],\"start\":295,\"length\":11,\"target\":\"decodeCalls\",\"line\":11,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) data: `0x${string}`\",\"start\":307,\"length\":4,\"target\":\"data\",\"line\":11,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) encodeCalls: (calls: readonly Call[]) => Promise<Hex>\",\"docs\":\"Encodes the calls into calldata for executing a User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst callData = await account.encodeCalls([\\n  { to: '0x...', data: '0x...' },\\n  { to: '0x...', data: '0x...', value: 100n },\\n])\\n// '0x...'\\n```\"]],\"start\":404,\"length\":11,\"target\":\"encodeCalls\",\"line\":14,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) calls: readonly Call[]\",\"start\":416,\"length\":5,\"target\":\"calls\",\"line\":14,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) getAddress: () => Promise<Address>\",\"docs\":\"Retrieves the Smart Account's address.\",\"tags\":[[\"example\",\"```ts\\nconst address = await account.getAddress()\\n// '0x...'\\n```\"]],\"start\":500,\"length\":10,\"target\":\"getAddress\",\"line\":17,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getFactoryArgs: () => Promise<{\\n    factory?: Address | undefined;\\n    factoryData?: Hex | undefined;\\n}>\",\"docs\":\"Retrieves the calldata for factory call to deploy a Smart Account.\\nIf the Smart Account has already been deployed, this will return undefined values.\",\"tags\":[[\"example\",\"Counterfactual account\\n```ts\\nconst { factory, factoryData } = await account.getFactoryArgs()\\n// { factory: '0x...', factoryData: '0x...' }\\n```\"],[\"example\",\"Deployed account\\n```ts\\nconst { factory, factoryData } = await account.getFactoryArgs()\\n// { factory: undefined, factoryData: undefined }\\n```\"]],\"start\":573,\"length\":14,\"target\":\"getFactoryArgs\",\"line\":20,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getNonce?: ((parameters?: {\\n    key?: bigint | undefined;\\n} | undefined) => Promise<bigint>) | undefined\",\"docs\":\"Retrieves the nonce of the Account.\",\"tags\":[[\"example\",\"```ts\\nconst nonce = await account.getNonce()\\n// 1n\\n```\"]],\"start\":664,\"length\":8,\"target\":\"getNonce\",\"line\":23,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) getStubSignature: (parameters?: UserOperationRequest | undefined) => Promise<Hex>\",\"docs\":\"Retrieves the User Operation \\\"stub\\\" signature for gas estimation.\\n\\n```ts\\nconst signature = await account.getStubSignature()\\n// '0x...'\\n```\",\"start\":733,\"length\":16,\"target\":\"getStubSignature\",\"line\":26,\"character\":8},{\"type\":\"hover\",\"text\":\"(property) signMessage: (parameters: {\\n    message: SignableMessage;\\n}) => Promise<Hex>\",\"docs\":\"Signs a [EIP-191 Personal Sign message](https://eips.ethereum.org/EIPS/eip-191).\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signMessage({\\n  message: 'Hello, World!'\\n})\\n// '0x...'\\n```\"]],\"start\":841,\"length\":11,\"target\":\"signMessage\",\"line\":29,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) message: {\\n    message: SignableMessage;\\n}\",\"start\":853,\"length\":7,\"target\":\"message\",\"line\":29,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>\",\"docs\":\"Signs [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712).\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signTypedData({\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n})\\n```\"]],\"start\":943,\"length\":13,\"target\":\"signTypedData\",\"line\":32,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) typedData: TypedDataDefinition<typedData, primaryType, typedData extends {\\n    [x: string]: readonly TypedDataParameter[];\\n    [x: `string[${string}]`]: undefined;\\n    [x: `function[${string}]`]: undefined;\\n    [x: `address[${string}]`]: undefined;\\n    [x: `bool[${string}]`]: undefined;\\n    [x: `bytes[${string}]`]: undefined;\\n    [x: `bytes1[${string}]`]: undefined;\\n    [x: `bytes18[${string}]`]: undefined;\\n    [x: `bytes32[${string}]`]: undefined;\\n    [x: `bytes31[${string}]`]: undefined;\\n    [x: `bytes30[${string}]`]: undefined;\\n    [x: `bytes29[${string}]`]: undefined;\\n    [x: `bytes28[${string}]`]: undefined;\\n    [x: `bytes27[${string}]`]: undefined;\\n    [x: `bytes26[${string}]`]: undefined;\\n    [x: `bytes25[${string}]`]: undefined;\\n    [x: `bytes24[${string}]`]: undefined;\\n    [x: `bytes23[${string}]`]: undefined;\\n    [x: `bytes22[${string}]`]: undefined;\\n    [x: `bytes21[${string}]`]: undefined;\\n    [x: `bytes20[${string}]`]: undefined;\\n    [x: `bytes2[${string}]`]: undefined;\\n    [x: `bytes19[${string}]`]: undefined;\\n    [x: `bytes17[${string}]`]: undefined;\\n    [x: `bytes16[${string}]`]: undefined;\\n    [x: `bytes15[${string}]`]: undefined;\\n    [x: `bytes14[${string}]`]: undefined;\\n    [x: `bytes13[${string}]`]: undefined;\\n    [x: `bytes12[${string}]`]: undefined;\\n    [x: `bytes11[${string}]`]: undefined;\\n    [x: `bytes10[${string}]`]: undefined;\\n    [x: `bytes9[${string}]`]: undefined;\\n    [x: `bytes8[${string}]`]: undefined;\\n    [x: `bytes7[${string}]`]: undefined;\\n    [x: `bytes6[${string}]`]: undefined;\\n    [x: `bytes5[${string}]`]: undefined;\\n    [x: `bytes4[${string}]`]: undefined ...\",\"start\":957,\"length\":9,\"target\":\"typedData\",\"line\":32,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) signUserOperation: (parameters: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}) => Promise<Hex>\",\"docs\":\"Signs the User Operation.\",\"tags\":[[\"example\",\"```ts\\nconst signature = await account.signUserOperation({\\n  chainId: 1,\\n  userOperation,\\n})\\n```\"]],\"start\":1052,\"length\":17,\"target\":\"signUserOperation\",\"line\":35,\"character\":8},{\"type\":\"hover\",\"text\":\"(parameter) userOperation: UnionPartialBy<UserOperation, \\\"sender\\\"> & {\\n    chainId?: number | undefined;\\n}\",\"start\":1070,\"length\":13,\"target\":\"userOperation\",\"line\":35,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) extend?: object | undefined\",\"docs\":\"Extend the Smart Account with custom properties.\",\"start\":1224,\"length\":6,\"target\":\"extend\",\"line\":40,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: never[]\",\"start\":1238,\"length\":3,\"target\":\"abi\",\"line\":41,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) factory: {\\n    abi: never[];\\n    address: string;\\n}\",\"start\":1260,\"length\":7,\"target\":\"factory\",\"line\":42,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) abi: never[]\",\"start\":1277,\"length\":3,\"target\":\"abi\",\"line\":43,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) address: string\",\"start\":1301,\"length\":7,\"target\":\"address\",\"line\":44,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) userOperation?: {\\n    estimateGas?: ((userOperation: UserOperationRequest) => Promise<ExactPartial<EstimateUserOperationGasReturnType> | undefined>) | undefined;\\n} | undefined\",\"docs\":\"User Operation configuration properties.\",\"start\":1416,\"length\":13,\"target\":\"userOperation\",\"line\":48,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) estimateGas?: ((userOperation: UserOperationRequest) => Promise<ExactPartial<EstimateUserOperationGasReturnType> | undefined>) | undefined\",\"docs\":\"Prepares gas properties for the User Operation request.\",\"start\":1443,\"length\":11,\"target\":\"estimateGas\",\"line\":49,\"character\":10},{\"type\":\"hover\",\"text\":\"(parameter) userOperation: UserOperationRequest\",\"start\":1455,\"length\":13,\"target\":\"userOperation\",\"line\":49,\"character\":22}],\"tags\":[]}}"
