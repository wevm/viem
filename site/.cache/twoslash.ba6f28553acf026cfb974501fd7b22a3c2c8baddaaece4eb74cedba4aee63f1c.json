"{\"value\":{\"code\":\"import { rpcSchema } from 'viem'\\n\\ntype CustomRpcSchema = [{ // [!code focus]\\n  Method: 'eth_wagmi', // [!code focus]\\n  Parameters: [string] // [!code focus]\\n  ReturnType: string // [!code focus]\\n}] // [!code focus]\\n\\nconst client = createTestClient({\\n  chain: foundry,\\n  rpcSchema: rpcSchema<CustomRpcSchema>(), // [!code focus]\\n  transport: http()\\n})\\n\\nconst result = await client.request({ // [!code focus]\\n  method: 'eth_wa // [!code focus] \\n  params: ['hello'], // [!code focus]\\n}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":9,\"length\":9,\"target\":\"rpcSchema\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":39,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":2,\"character\":5},{\"type\":\"hover\",\"text\":\"(property) Method: \\\"eth_wagmi\\\"\",\"start\":79,\"length\":6,\"target\":\"Method\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) Parameters: [string]\",\"start\":119,\"length\":10,\"target\":\"Parameters\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) ReturnType: string\",\"start\":159,\"length\":10,\"target\":\"ReturnType\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const client: {\\n    mode: \\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\";\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 40 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":222,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createTestClient<\\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\", Transport, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, CustomRpcSchema>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createTestClient\",\"docs\":\"Creates a Test Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/test\\n\\nA Test Client is an interface to \\\"test\\\" JSON-RPC API methods accessible through a local Ethereum test node such as [Anvil](https://book.getfoundry.sh/anvil/) or [Hardhat](https://hardhat.org/) such as mining blocks, impersonating accounts, setting fees, etc through [Test Actions](https://viem.sh/docs/actions/test/introduction).\",\"tags\":[[\"param\",\"config - {@link TestClientConfig}\"],[\"returns\",\"A Test Client. {@link TestClient}\"],[\"example\",\"import { createTestClient, custom } from 'viem'\\nimport { foundry } from 'viem/chains'\\n\\nconst client = createTestClient({\\n  mode: 'anvil',\\n  chain: foundry,\\n  transport: http(),\\n})\"]],\"start\":231,\"length\":16,\"target\":\"createTestClient\",\"line\":8,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) chain?: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | Chain | undefined\",\"docs\":\"Chain for the client.\",\"start\":252,\"length\":5,\"target\":\"chain\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const foundry: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport foundry\",\"start\":259,\"length\":7,\"target\":\"foundry\",\"line\":9,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) rpcSchema?: CustomRpcSchema | undefined\",\"docs\":\"Typed JSON-RPC schema for the client.\",\"start\":270,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) rpcSchema<CustomRpcSchema>(): CustomRpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":281,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":13},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":291,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":10,\"character\":23},{\"type\":\"hover\",\"text\":\"(property) transport: Transport\",\"docs\":\"The RPC transport\",\"start\":330,\"length\":9,\"target\":\"transport\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":341,\"length\":4,\"target\":\"http\",\"line\":11,\"character\":13},{\"type\":\"hover\",\"text\":\"const result: any\",\"start\":358,\"length\":6,\"target\":\"result\",\"line\":14,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: {\\n    mode: \\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\";\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 40 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":373,\"length\":6,\"target\":\"client\",\"line\":14,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) request: <undefined, {\\n    method: \\\"anvil_addCompilationResult\\\" | \\\"hardhat_addCompilationResult\\\" | \\\"ganache_addCompilationResult\\\";\\n    params: any[];\\n} | {\\n    method: \\\"anvil_dropTransaction\\\" | \\\"hardhat_dropTransaction\\\" | \\\"ganache_dropTransaction\\\";\\n    params: [hash: ...];\\n} | ... 37 more ... | {\\n    ...;\\n}, any>(args: {\\n    method: \\\"anvil_addCompilationResult\\\" | \\\"hardhat_addCompilationResult\\\" | \\\"ganache_addCompilationResult\\\";\\n    params: any[];\\n} | ... 38 more ... | {\\n    ...;\\n}, options?: EIP1193RequestOptions | undefined) => Promise<...>\",\"docs\":\"Request function wrapped with friendly error handling\",\"start\":380,\"length\":7,\"target\":\"request\",\"line\":14,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) method: \\\"eth_wa // [!code focus] \\\"\",\"start\":409,\"length\":6,\"target\":\"method\",\"line\":15,\"character\":2},{\"type\":\"completion\",\"start\":424,\"length\":0,\"completions\":[{\"name\":\"eth_wagmi\",\"kindModifiers\":\"\",\"kind\":\"string\",\"sortText\":\"11\",\"replacementSpan\":{\"start\":528,\"length\":5},\"commitCharacters\":[]}],\"completionsPrefix\":\"eth_wa\",\"line\":15,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) params: [\\\"hello\\\"]\",\"start\":445,\"length\":6,\"target\":\"params\",\"line\":16,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[553,573],[0,110]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":84,\"end\":97}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { createTestClient, http } from 'viem'\\nimport { foundry } from 'viem/chains'\\n// @noErrors\\n// ---cut---\\nimport { rpcSchema } from 'viem'\\n\\ntype CustomRpcSchema = [{ // [!code focus]\\n  Method: 'eth_wagmi', // [!code focus]\\n  Parameters: [string] // [!code focus]\\n  ReturnType: string // [!code focus]\\n}] // [!code focus]\\n\\nconst client = createTestClient({\\n  chain: foundry,\\n  rpcSchema: rpcSchema<CustomRpcSchema>(), // [!code focus]\\n  transport: http()\\n})\\n\\nconst result = await client.request({ // [!code focus]\\n  method: 'eth_wa // [!code focus] \\n//               ^|\\n  params: ['hello'], // [!code focus]\\n}) // [!code focus]\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[534],\"positionHighlights\":[]},\"queries\":[],\"completions\":[{\"type\":\"completion\",\"start\":424,\"length\":0,\"completions\":[{\"name\":\"eth_wagmi\",\"kindModifiers\":\"\",\"kind\":\"string\",\"sortText\":\"11\",\"replacementSpan\":{\"start\":528,\"length\":5},\"commitCharacters\":[]}],\"completionsPrefix\":\"eth_wa\",\"line\":15,\"character\":17}],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":9,\"length\":9,\"target\":\"rpcSchema\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":39,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":2,\"character\":5},{\"type\":\"hover\",\"text\":\"(property) Method: \\\"eth_wagmi\\\"\",\"start\":79,\"length\":6,\"target\":\"Method\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) Parameters: [string]\",\"start\":119,\"length\":10,\"target\":\"Parameters\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) ReturnType: string\",\"start\":159,\"length\":10,\"target\":\"ReturnType\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const client: {\\n    mode: \\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\";\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 40 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":222,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createTestClient<\\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\", Transport, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, undefined, CustomRpcSchema>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createTestClient\",\"docs\":\"Creates a Test Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/test\\n\\nA Test Client is an interface to \\\"test\\\" JSON-RPC API methods accessible through a local Ethereum test node such as [Anvil](https://book.getfoundry.sh/anvil/) or [Hardhat](https://hardhat.org/) such as mining blocks, impersonating accounts, setting fees, etc through [Test Actions](https://viem.sh/docs/actions/test/introduction).\",\"tags\":[[\"param\",\"config - {@link TestClientConfig}\"],[\"returns\",\"A Test Client. {@link TestClient}\"],[\"example\",\"import { createTestClient, custom } from 'viem'\\nimport { foundry } from 'viem/chains'\\n\\nconst client = createTestClient({\\n  mode: 'anvil',\\n  chain: foundry,\\n  transport: http(),\\n})\"]],\"start\":231,\"length\":16,\"target\":\"createTestClient\",\"line\":8,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) chain?: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | Chain | undefined\",\"docs\":\"Chain for the client.\",\"start\":252,\"length\":5,\"target\":\"chain\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const foundry: {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport foundry\",\"start\":259,\"length\":7,\"target\":\"foundry\",\"line\":9,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) rpcSchema?: CustomRpcSchema | undefined\",\"docs\":\"Typed JSON-RPC schema for the client.\",\"start\":270,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) rpcSchema<CustomRpcSchema>(): CustomRpcSchema\\nimport rpcSchema\",\"docs\":\"Defines a typed JSON-RPC schema for the client.\\nNote: This is a runtime noop function.\",\"start\":281,\"length\":9,\"target\":\"rpcSchema\",\"line\":10,\"character\":13},{\"type\":\"hover\",\"text\":\"type CustomRpcSchema = [{\\n    Method: \\\"eth_wagmi\\\";\\n    Parameters: [string];\\n    ReturnType: string;\\n}]\",\"start\":291,\"length\":15,\"target\":\"CustomRpcSchema\",\"line\":10,\"character\":23},{\"type\":\"hover\",\"text\":\"(property) transport: Transport\",\"docs\":\"The RPC transport\",\"start\":330,\"length\":9,\"target\":\"transport\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":341,\"length\":4,\"target\":\"http\",\"line\":11,\"character\":13},{\"type\":\"hover\",\"text\":\"const result: any\",\"start\":358,\"length\":6,\"target\":\"result\",\"line\":14,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: {\\n    mode: \\\"anvil\\\" | \\\"hardhat\\\" | \\\"ganache\\\";\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 40 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":373,\"length\":6,\"target\":\"client\",\"line\":14,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) request: <undefined, {\\n    method: \\\"anvil_addCompilationResult\\\" | \\\"hardhat_addCompilationResult\\\" | \\\"ganache_addCompilationResult\\\";\\n    params: any[];\\n} | {\\n    method: \\\"anvil_dropTransaction\\\" | \\\"hardhat_dropTransaction\\\" | \\\"ganache_dropTransaction\\\";\\n    params: [hash: ...];\\n} | ... 37 more ... | {\\n    ...;\\n}, any>(args: {\\n    method: \\\"anvil_addCompilationResult\\\" | \\\"hardhat_addCompilationResult\\\" | \\\"ganache_addCompilationResult\\\";\\n    params: any[];\\n} | ... 38 more ... | {\\n    ...;\\n}, options?: EIP1193RequestOptions | undefined) => Promise<...>\",\"docs\":\"Request function wrapped with friendly error handling\",\"start\":380,\"length\":7,\"target\":\"request\",\"line\":14,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) method: \\\"eth_wa // [!code focus] \\\"\",\"start\":409,\"length\":6,\"target\":\"method\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) params: [\\\"hello\\\"]\",\"start\":445,\"length\":6,\"target\":\"params\",\"line\":16,\"character\":2}],\"tags\":[]}}"
