"{\"value\":{\"mdx\":\"# TypeScript [TypeScript support for Viem]\\n\\nviem is designed to be as type-safe as possible! Things to keep in mind:\\n\\n- Types currently require using TypeScript v5.0.4 or greater.\\n- Changes to types in this repository are considered non-breaking and are usually released as patch semver changes (otherwise every type enhancement would be a major version!).\\n- It is highly recommended that you lock your `viem` package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release.\\n- The non-type-related public API of `viem` still follows semver very strictly.\\n\\nTo ensure everything works correctly, make sure that your `tsconfig.json` has [`strict`](https://www.typescriptlang.org/tsconfig#strict) mode set to `true`:\\n\\n```json [tsconfig.json]\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true // [!code focus]\\n  }\\n}\\n```\\n\\n## Type Inference\\n\\nviem can infer types based on [ABI](https://docs.soliditylang.org/en/v0.8.24/abi-spec.html#json) and [EIP-712](https://eips.ethereum.org/EIPS/eip-712) Typed Data definitions (powered by [ABIType](https://abitype.dev)), giving you full end-to-end type-safety from your contracts to your frontend and incredible developer experience (e.g. autocomplete ABI function names and catch misspellings, strongly-typed ABI function arguments, etc.).\\n\\nFor this to work, you must either add [const assertions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4#const-assertions) to specific configuration parameters (more info on those below) or **define them inline**. For example, [`readContract`](/docs/contract/readContract)'s `abi` configuration parameter:\\n\\n```ts twoslash\\nimport { createPublicClient, http, parseAbi } from 'viem'\\n\\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\nconst abi = [{ // [!code focus]\\n  type: 'function', // [!code focus]\\n  name: 'balanceOf', // [!code focus]\\n  stateMutability: 'view', // [!code focus]\\n  inputs: [{ type: 'address' }], // [!code focus]\\n  outputs: [{ type: 'uint256' }], // [!code focus]\\n}] as const // [!code focus]\\n// @log:       ↑ const assertion\\n\\nconst result = client.readContract({\\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\\n  abi, \\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\n```\\n\\n```ts twoslash\\nimport { createPublicClient, http, parseAbi } from 'viem'\\n\\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\n// @log:   ↓ defined inline\\nconst result = client.readContract({\\n  address: '0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c',\\n  abi: [{ // [!code focus]\\n    type: 'function', // [!code focus]\\n    name: 'balanceOf', // [!code focus]\\n    stateMutability: 'view', // [!code focus]\\n    inputs: [{ type: 'address' }], // [!code focus]\\n    outputs: [{ type: 'uint256' }], // [!code focus]\\n  }], // [!code focus]\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\n```\\n\\nIf type inference isn't working, it's likely you forgot to add a `const` assertion or define the configuration parameter inline.\\n\\n:::tip\\nUnfortunately [TypeScript doesn't support importing JSON as const](https://github.com/microsoft/TypeScript/issues/32063). Check out [`@wagmi/cli`](https://wagmi.sh/cli) to help with this! It can automatically fetch ABIs from Etherscan, resolve ABIs from your Foundry/Hardhat projects, and much more.\\n:::\\n\\n### Contract ABIs\\n\\nThe following actions and utilities support type inference when you add a const assertion to `abi` or define `abi` inline:\\n\\n#### Actions\\n\\n- [`createEventFilter`](/docs/actions/public/createEventFilter)\\n- [`watchEvent`](/docs/actions/public/watchEvent)\\n- [`createContractEventFilter`](/docs/contract/createContractEventFilter)\\n- [`deployContract`](/docs/contract/deployContract)\\n- [`estimateContractGas`](/docs/contract/estimateContractGas)\\n- [`multicall`](/docs/contract/multicall)\\n- [`readContract`](/docs/contract/readContract)\\n- [`simulateContract`](/docs/contract/simulateContract)\\n- [`writeContract`](/docs/contract/writeContract)\\n- [`watchContractEvent`](/docs/contract/watchContractEvent)\\n\\n#### Utilities\\n\\n- [`decodeEventLog` ](/docs/contract/decodeEventLog)\\n- [`decodeFunctionResult` ](/docs/contract/decodeFunctionResult)\\n- [`encodeDeployData` ](/docs/contract/encodeDeployData)\\n- [`encodeErrorResult` ](/docs/contract/encodeErrorResult)\\n- [`encodeEventTopics` ](/docs/contract/encodeEventTopics)\\n- [`encodeFunctionData` ](/docs/contract/encodeFunctionData)\\n- [`encodeFunctionResult` ](/docs/contract/encodeFunctionResult)\\n- [`getAbiItem` ](/docs/abi/getAbiItem)\\n\\nFor example, `readContract`:\\n\\n```ts twoslash\\n// @noErrors\\nimport { createPublicClient, http, erc20Abi, parseAbi } from 'viem'\\n\\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\nconst result = await client.readContract({\\n  //  ^?\\n\\n\\n  address: '0xecb504d39723b0be0e3a9aa33d646642d1051ee1',\\n  abi: erc20Abi,\\n  functionName: 'balanceOf',\\n  //         ^?\\n  \\n  \\n\\n  // ↑ Notice how \\\"transfer\\\" is not included since it is not a \\\"read\\\" function\\n\\n  args: ['0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c'],\\n  // ^?\\n})\\n```\\n\\n### EIP-712 Typed Data\\n\\nAdding a const assertion to `types` or defining `types` inline adds type inference to [`signTypedData`](/docs/actions/wallet/signTypedData)'s `value` configuration parameter:\\n\\n```ts twoslash\\nimport { createWalletClient, http, erc20Abi, parseAbi } from 'viem'\\n\\nconst client = createWalletClient({\\n  account: '0x',\\n  transport: http()\\n})\\n// ---cut---\\nconst result = client.signTypedData({\\n  domain: {\\n    name: 'Ether Mail',\\n    version: '1',\\n    chainId: 1,\\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n  },\\n\\n  types: {\\n    Person: [\\n      { name: 'name', type: 'string' },\\n      { name: 'wallet', type: 'address' },\\n    ],\\n    Mail: [\\n      { name: 'from', type: 'Person' },\\n      { name: 'to', type: 'Person' },\\n      { name: 'contents', type: 'string' },\\n    ],\\n  },\\n\\n  primaryType: 'Mail',\\n\\n  message: {\\n    // ^?\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    from: {\\n      name: 'Cow',\\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n    },\\n    to: {\\n      name: 'Bob',\\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n    },\\n    contents: 'Hello, Bob!',\\n  },\\n})\\n```\\n\\n### Other\\n\\nThe following utilities support type inference when you use const assertions or define arguments inline:\\n\\n- [`decodeAbiParameters` ](/docs/abi/decodeAbiParameters)\\n- [`encodeAbiParameters` ](/docs/abi/encodeAbiParameters)\\n- [`encodePacked` ](/docs/abi/encodePacked)\\n- [`parseAbi` ](/docs/abi/parseAbi)\\n- [`parseAbiItem` ](/docs/abi/parseAbiItem)\\n- [`parseAbiParameter` ](/docs/abi/parseAbiParameter)\\n- [`parseAbiParameters` ](/docs/abi/parseAbiParameters)\\n\\n## Configuring Internal Types\\n\\nFor advanced use-cases, you may want to configure viem's internal types. Most of viem's types relating to ABIs and EIP-712 Typed Data are powered by [ABIType](https://abitype.dev). See ABIType's [documentation](https://abitype.dev/config) for more info on how to configure types.\\n\\n## `window` Polyfill\\n\\nBy importing the `viem/window` Polyfill, the global `window.ethereum` will typed as an [`EIP1193Provider`](https://github.com/wagmi-dev/viem/blob/4bdbf15be0d61b52a195e11c97201e707fb616cc/src/types/eip1193.ts#L24-L26) (including a fully-typed `request` function & typed events).\\n\\n```ts twoslash\\n// @noErrors\\nimport 'viem/window';\\n\\nconst hash = await window.ethereum.request({\\n  method: 'e \\n//          ^|\\n})\\n\\n\\n\\n\\n\\n\\n\\n\\nconst hash = await window.ethereum.request({\\n  method: 'eth_getTransactionByHash',\\n  params: [\\n//     ^?\\n})\\n```\\n\",\"document\":[{\"href\":\"/docs/typescript#typescript\",\"html\":\"<div role=\\\"doc-subtitle\\\">TypeScript support for Viem</div></header>\\n<p>viem is designed to be as type-safe as possible! Things to keep in mind:</p>\\n<ul>\\n<li>Types currently require using TypeScript v5.0.4 or greater.</li>\\n<li>Changes to types in this repository are considered non-breaking and are usually released as patch semver changes (otherwise every type enhancement would be a major version!).</li>\\n<li>It is highly recommended that you lock your <code>viem</code> package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release.</li>\\n<li>The non-type-related public API of <code>viem</code> still follows semver very strictly.</li>\\n</ul>\\n<p>To ensure everything works correctly, make sure that your <code>tsconfig.json</code> has <a href=\\\"https://www.typescriptlang.org/tsconfig#strict\\\"><code>strict</code></a> mode set to <code>true</code>:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"tsconfig.json\\\" data-lang=\\\"json\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;compilerOptions&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;strict&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"pages/docs/typescript.mdx#typescript\",\"isPage\":true,\"text\":\"TypeScript support for Viem\\nviem is designed to be as type-safe as possible! Things to keep in mind:\\n\\nTypes currently require using TypeScript v5.0.4 or greater.\\nChanges to types in this repository are considered non-breaking and are usually released as patch semver changes (otherwise every type enhancement would be a major version!).\\nIt is highly recommended that you lock your viem package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release.\\nThe non-type-related public API of viem still follows semver very strictly.\\n\\nTo ensure everything works correctly, make sure that your tsconfig.json has strict mode set to true:\\n{\\n  &quot;compilerOptions&quot;: {\\n    &quot;strict&quot;: true\\n  }\\n}\\n\",\"title\":\"TypeScript\",\"titles\":[]},{\"href\":\"/docs/typescript#type-inference\",\"html\":\"\\n<p>viem can infer types based on <a href=\\\"https://docs.soliditylang.org/en/v0.8.24/abi-spec.html#json\\\">ABI</a> and <a href=\\\"https://eips.ethereum.org/EIPS/eip-712\\\">EIP-712</a> Typed Data definitions (powered by <a href=\\\"https://abitype.dev\\\">ABIType</a>), giving you full end-to-end type-safety from your contracts to your frontend and incredible developer experience (e.g. autocomplete ABI function names and catch misspellings, strongly-typed ABI function arguments, etc.).</p>\\n<p>For this to work, you must either add <a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4#const-assertions\\\">const assertions</a> to specific configuration parameters (more info on those below) or <strong>define them inline</strong>. For example, <a href=\\\"/docs/contract/readContract\\\"><code>readContract</code></a>&#x27;s <code>abi</code> configuration parameter:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> abi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [{ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;view&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  inputs: [{ type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  outputs: [{ type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> const</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log:       ↑ const assertion</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @log:   ↓ defined inline</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: [{ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;view&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [{ type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }], </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n<p>If type inference isn&#x27;t working, it&#x27;s likely you forgot to add a <code>const</code> assertion or define the configuration parameter inline.</p>\\n<aside data-callout=\\\"tip\\\"><p>Unfortunately <a href=\\\"https://github.com/microsoft/TypeScript/issues/32063\\\">TypeScript doesn&#x27;t support importing JSON as const</a>. Check out <a href=\\\"https://wagmi.sh/cli\\\"><code>@wagmi/cli</code></a> to help with this! It can automatically fetch ABIs from Etherscan, resolve ABIs from your Foundry/Hardhat projects, and much more.</p></aside>\\n\",\"id\":\"pages/docs/typescript.mdx#type-inference\",\"isPage\":false,\"text\":\"\\nviem can infer types based on ABI and EIP-712 Typed Data definitions (powered by ABIType), giving you full end-to-end type-safety from your contracts to your frontend and incredible developer experience (e.g. autocomplete ABI function names and catch misspellings, strongly-typed ABI function arguments, etc.).\\nFor this to work, you must either add const assertions to specific configuration parameters (more info on those below) or define them inline. For example, readContract&#x27;s abi configuration parameter:\\nimport { createPublicClient, http, parseAbi } from &#x27;viem&#x27;\\n \\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\nconst abi = [{ \\n  type: &#x27;function&#x27;, \\n  name: &#x27;balanceOf&#x27;, \\n  stateMutability: &#x27;view&#x27;, \\n  inputs: [{ type: &#x27;address&#x27; }], \\n  outputs: [{ type: &#x27;uint256&#x27; }], \\n}] as const\\n// @log:       ↑ const assertion\\n \\nconst result = client.readContract({\\n  address: &#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;,\\n  abi, \\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})\\nimport { createPublicClient, http, parseAbi } from &#x27;viem&#x27;\\n \\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\n// @log:   ↓ defined inline\\nconst result = client.readContract({\\n  address: &#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;,\\n  abi: [{ \\n    type: &#x27;function&#x27;, \\n    name: &#x27;balanceOf&#x27;, \\n    stateMutability: &#x27;view&#x27;, \\n    inputs: [{ type: &#x27;address&#x27; }], \\n    outputs: [{ type: &#x27;uint256&#x27; }], \\n  }], \\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})\\nIf type inference isn&#x27;t working, it&#x27;s likely you forgot to add a const assertion or define the configuration parameter inline.\\nUnfortunately TypeScript doesn&#x27;t support importing JSON as const. Check out @wagmi/cli to help with this! It can automatically fetch ABIs from Etherscan, resolve ABIs from your Foundry/Hardhat projects, and much more.\\n\",\"title\":\"Type Inference\",\"titles\":[\"TypeScript\"]},{\"href\":\"/docs/typescript#contract-abis\",\"html\":\"\\n<p>The following actions and utilities support type inference when you add a const assertion to <code>abi</code> or define <code>abi</code> inline:</p>\\n\",\"id\":\"pages/docs/typescript.mdx#contract-abis\",\"isPage\":false,\"text\":\"\\nThe following actions and utilities support type inference when you add a const assertion to abi or define abi inline:\\n\",\"title\":\"Contract ABIs\",\"titles\":[\"TypeScript\",\"Type Inference\"]},{\"href\":\"/docs/typescript#actions\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/docs/actions/public/createEventFilter\\\"><code>createEventFilter</code></a></li>\\n<li><a href=\\\"/docs/actions/public/watchEvent\\\"><code>watchEvent</code></a></li>\\n<li><a href=\\\"/docs/contract/createContractEventFilter\\\"><code>createContractEventFilter</code></a></li>\\n<li><a href=\\\"/docs/contract/deployContract\\\"><code>deployContract</code></a></li>\\n<li><a href=\\\"/docs/contract/estimateContractGas\\\"><code>estimateContractGas</code></a></li>\\n<li><a href=\\\"/docs/contract/multicall\\\"><code>multicall</code></a></li>\\n<li><a href=\\\"/docs/contract/readContract\\\"><code>readContract</code></a></li>\\n<li><a href=\\\"/docs/contract/simulateContract\\\"><code>simulateContract</code></a></li>\\n<li><a href=\\\"/docs/contract/writeContract\\\"><code>writeContract</code></a></li>\\n<li><a href=\\\"/docs/contract/watchContractEvent\\\"><code>watchContractEvent</code></a></li>\\n</ul>\\n\",\"id\":\"pages/docs/typescript.mdx#actions\",\"isPage\":false,\"text\":\"\\n\\ncreateEventFilter\\nwatchEvent\\ncreateContractEventFilter\\ndeployContract\\nestimateContractGas\\nmulticall\\nreadContract\\nsimulateContract\\nwriteContract\\nwatchContractEvent\\n\\n\",\"title\":\"Actions\",\"titles\":[\"TypeScript\",\"Type Inference\",\"Contract ABIs\"]},{\"href\":\"/docs/typescript#utilities\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/docs/contract/decodeEventLog\\\"><code>decodeEventLog</code> </a></li>\\n<li><a href=\\\"/docs/contract/decodeFunctionResult\\\"><code>decodeFunctionResult</code> </a></li>\\n<li><a href=\\\"/docs/contract/encodeDeployData\\\"><code>encodeDeployData</code> </a></li>\\n<li><a href=\\\"/docs/contract/encodeErrorResult\\\"><code>encodeErrorResult</code> </a></li>\\n<li><a href=\\\"/docs/contract/encodeEventTopics\\\"><code>encodeEventTopics</code> </a></li>\\n<li><a href=\\\"/docs/contract/encodeFunctionData\\\"><code>encodeFunctionData</code> </a></li>\\n<li><a href=\\\"/docs/contract/encodeFunctionResult\\\"><code>encodeFunctionResult</code> </a></li>\\n<li><a href=\\\"/docs/abi/getAbiItem\\\"><code>getAbiItem</code> </a></li>\\n</ul>\\n<p>For example, <code>readContract</code>:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, erc20Abi, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //  ^?</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xecb504d39723b0be0e3a9aa33d646642d1051ee1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: erc20Abi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  //         ^?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  </span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // ↑ Notice how &quot;transfer&quot; is not included since it is not a &quot;read&quot; function</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // ^?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/typescript.mdx#utilities\",\"isPage\":false,\"text\":\"\\n\\ndecodeEventLog \\ndecodeFunctionResult \\nencodeDeployData \\nencodeErrorResult \\nencodeEventTopics \\nencodeFunctionData \\nencodeFunctionResult \\ngetAbiItem \\n\\nFor example, readContract:\\n// @noErrors\\nimport { createPublicClient, http, erc20Abi, parseAbi } from &#x27;viem&#x27;\\n \\nconst client = createPublicClient({\\n  transport: http()\\n})\\n// ---cut---\\nconst result = await client.readContract({\\n  //  ^?\\n \\n \\n  address: &#x27;0xecb504d39723b0be0e3a9aa33d646642d1051ee1&#x27;,\\n  abi: erc20Abi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  //         ^?\\n  \\n  \\n \\n  // ↑ Notice how &quot;transfer&quot; is not included since it is not a &quot;read&quot; function\\n \\n  args: [&#x27;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#x27;],\\n  // ^?\\n})\\n\",\"title\":\"Utilities\",\"titles\":[\"TypeScript\",\"Type Inference\",\"Contract ABIs\"]},{\"href\":\"/docs/typescript#eip-712-typed-data\",\"html\":\"\\n<p>Adding a const assertion to <code>types</code> or defining <code>types</code> inline adds type inference to <a href=\\\"/docs/actions/wallet/signTypedData\\\"><code>signTypedData</code></a>&#x27;s <code>value</code> configuration parameter:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createWalletClient, http, erc20Abi, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createWalletClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  account: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">signTypedData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  domain: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Ether Mail&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    version: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    chainId: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    verifyingContract: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  types: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Person: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;name&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;wallet&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Mail: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;from&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Person&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;to&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Person&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;contents&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;string&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  primaryType: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Mail&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  message: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // ^?</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    from: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Cow&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      wallet: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    to: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Bob&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      wallet: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    contents: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Hello, Bob!&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/typescript.mdx#eip-712-typed-data\",\"isPage\":false,\"text\":\"\\nAdding a const assertion to types or defining types inline adds type inference to signTypedData&#x27;s value configuration parameter:\\nimport { createWalletClient, http, erc20Abi, parseAbi } from &#x27;viem&#x27;\\n \\nconst client = createWalletClient({\\n  account: &#x27;0x&#x27;,\\n  transport: http()\\n})\\n// ---cut---\\nconst result = client.signTypedData({\\n  domain: {\\n    name: &#x27;Ether Mail&#x27;,\\n    version: &#x27;1&#x27;,\\n    chainId: 1,\\n    verifyingContract: &#x27;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#x27;,\\n  },\\n \\n  types: {\\n    Person: [\\n      { name: &#x27;name&#x27;, type: &#x27;string&#x27; },\\n      { name: &#x27;wallet&#x27;, type: &#x27;address&#x27; },\\n    ],\\n    Mail: [\\n      { name: &#x27;from&#x27;, type: &#x27;Person&#x27; },\\n      { name: &#x27;to&#x27;, type: &#x27;Person&#x27; },\\n      { name: &#x27;contents&#x27;, type: &#x27;string&#x27; },\\n    ],\\n  },\\n \\n  primaryType: &#x27;Mail&#x27;,\\n \\n  message: {\\n    // ^?\\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n    from: {\\n      name: &#x27;Cow&#x27;,\\n      wallet: &#x27;0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826&#x27;,\\n    },\\n    to: {\\n      name: &#x27;Bob&#x27;,\\n      wallet: &#x27;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#x27;,\\n    },\\n    contents: &#x27;Hello, Bob!&#x27;,\\n  },\\n})\\n\",\"title\":\"EIP-712 Typed Data\",\"titles\":[\"TypeScript\",\"Type Inference\"]},{\"href\":\"/docs/typescript#other\",\"html\":\"\\n<p>The following utilities support type inference when you use const assertions or define arguments inline:</p>\\n<ul>\\n<li><a href=\\\"/docs/abi/decodeAbiParameters\\\"><code>decodeAbiParameters</code> </a></li>\\n<li><a href=\\\"/docs/abi/encodeAbiParameters\\\"><code>encodeAbiParameters</code> </a></li>\\n<li><a href=\\\"/docs/abi/encodePacked\\\"><code>encodePacked</code> </a></li>\\n<li><a href=\\\"/docs/abi/parseAbi\\\"><code>parseAbi</code> </a></li>\\n<li><a href=\\\"/docs/abi/parseAbiItem\\\"><code>parseAbiItem</code> </a></li>\\n<li><a href=\\\"/docs/abi/parseAbiParameter\\\"><code>parseAbiParameter</code> </a></li>\\n<li><a href=\\\"/docs/abi/parseAbiParameters\\\"><code>parseAbiParameters</code> </a></li>\\n</ul>\\n\",\"id\":\"pages/docs/typescript.mdx#other\",\"isPage\":false,\"text\":\"\\nThe following utilities support type inference when you use const assertions or define arguments inline:\\n\\ndecodeAbiParameters \\nencodeAbiParameters \\nencodePacked \\nparseAbi \\nparseAbiItem \\nparseAbiParameter \\nparseAbiParameters \\n\\n\",\"title\":\"Other\",\"titles\":[\"TypeScript\",\"Type Inference\"]},{\"href\":\"/docs/typescript#configuring-internal-types\",\"html\":\"\\n<p>For advanced use-cases, you may want to configure viem&#x27;s internal types. Most of viem&#x27;s types relating to ABIs and EIP-712 Typed Data are powered by <a href=\\\"https://abitype.dev\\\">ABIType</a>. See ABIType&#x27;s <a href=\\\"https://abitype.dev/config\\\">documentation</a> for more info on how to configure types.</p>\\n\",\"id\":\"pages/docs/typescript.mdx#configuring-internal-types\",\"isPage\":false,\"text\":\"\\nFor advanced use-cases, you may want to configure viem&#x27;s internal types. Most of viem&#x27;s types relating to ABIs and EIP-712 Typed Data are powered by ABIType. See ABIType&#x27;s documentation for more info on how to configure types.\\n\",\"title\":\"Configuring Internal Types\",\"titles\":[\"TypeScript\"]},{\"href\":\"/docs/typescript#window-polyfill\",\"html\":\"\\n<p>By importing the <code>viem/window</code> Polyfill, the global <code>window.ethereum</code> will typed as an <a href=\\\"https://github.com/wagmi-dev/viem/blob/4bdbf15be0d61b52a195e11c97201e707fb616cc/src/types/eip1193.ts#L24-L26\\\"><code>EIP1193Provider</code></a> (including a fully-typed <code>request</code> function &amp; typed events).</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @noErrors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/window&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> window.ethereum.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">request</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  method: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;e</span><span style=\\\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//          ^|</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> window.ethereum.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">request</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  method: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;eth_getTransactionByHash&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  params: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//     ^?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/docs/typescript.mdx#window-polyfill\",\"isPage\":false,\"text\":\"\\nBy importing the viem/window Polyfill, the global window.ethereum will typed as an EIP1193Provider (including a fully-typed request function &amp; typed events).\\n// @noErrors\\nimport &#x27;viem/window&#x27;;\\n \\nconst hash = await window.ethereum.request({\\n  method: &#x27;e \\n//          ^|\\n})\\n \\n \\n \\n \\n \\n \\n \\n \\nconst hash = await window.ethereum.request({\\n  method: &#x27;eth_getTransactionByHash&#x27;,\\n  params: [\\n//     ^?\\n})\",\"title\":\"window Polyfill\",\"titles\":[\"TypeScript\"]}]}}"
