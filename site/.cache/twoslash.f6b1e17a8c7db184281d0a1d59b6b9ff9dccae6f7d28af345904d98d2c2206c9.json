"{\"value\":{\"code\":\"import { parseAbi } from 'viem'\\n\\nconst unwatch = publicClient.watchEvent({\\n  events: parseAbi([ // [!code focus:5]\\n    'event Approval(address indexed owner, address indexed sender, uint256 value)',\\n    'event Transfer(address indexed from, address indexed to, uint256 value)',\\n  ]),\\n  onLogs: logs => console.log(logs)\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchEventReturnType\",\"start\":39,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":49,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchEvent: <undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined>(args: WatchEventParameters<...>) => WatchEventReturnType\",\"docs\":\"Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\\n\\n- Docs: https://viem.sh/docs/actions/public/watchEvent\\n- JSON-RPC Methods:\\n  - **RPC Provider supports `eth_newFilter`:**\\n    - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\\n    - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n  - **RPC Provider does not support `eth_newFilter`:**\\n    - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\",\"tags\":[[\"remarks\",\"This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\\n\\n`watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\"],[\"param\",\"args - {@link WatchEventParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = client.watchEvent({\\n  onLogs: (logs) => console.log(logs),\\n})\"]],\"start\":62,\"length\":10,\"target\":\"watchEvent\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) events?: readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}] | undefined\",\"start\":77,\"length\":6,\"target\":\"events\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"event Approval(address indexed owner, address indexed sender, uint256 value)\\\", \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"]>(signatures: [\\\"event Approval(address indexed owner, address indexed sender, uint256 value)\\\", \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"]): readonly [...]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":85,\"length\":8,\"target\":\"parseAbi\",\"line\":3,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) onLogs: WatchEventOnLogsFn<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"docs\":\"The callback to call when new event logs are received.\",\"start\":286,\"length\":6,\"target\":\"onLogs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(parameter) logs: WatchEventOnLogsParameter<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"start\":294,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":10},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":302,\"length\":7,\"target\":\"console\",\"line\":7,\"character\":18},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":310,\"length\":3,\"target\":\"log\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"(parameter) logs: WatchEventOnLogsParameter<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"start\":314,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":30}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,191]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { http, createPublicClient } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n// ---cut---\\nimport { parseAbi } from 'viem'\\n\\nconst unwatch = publicClient.watchEvent({\\n  events: parseAbi([ // [!code focus:5]\\n    'event Approval(address indexed owner, address indexed sender, uint256 value)',\\n    'event Transfer(address indexed from, address indexed to, uint256 value)',\\n  ]),\\n  onLogs: logs => console.log(logs)\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const unwatch: WatchEventReturnType\",\"start\":39,\"length\":7,\"target\":\"unwatch\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\",\"start\":49,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) watchEvent: <undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined>(args: WatchEventParameters<...>) => WatchEventReturnType\",\"docs\":\"Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\\n\\n- Docs: https://viem.sh/docs/actions/public/watchEvent\\n- JSON-RPC Methods:\\n  - **RPC Provider supports `eth_newFilter`:**\\n    - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\\n    - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\\n  - **RPC Provider does not support `eth_newFilter`:**\\n    - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\",\"tags\":[[\"remarks\",\"This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\\n\\n`watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\"],[\"param\",\"args - {@link WatchEventParameters}\"],[\"returns\",\"A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst unwatch = client.watchEvent({\\n  onLogs: (logs) => console.log(logs),\\n})\"]],\"start\":62,\"length\":10,\"target\":\"watchEvent\",\"line\":2,\"character\":29},{\"type\":\"hover\",\"text\":\"(property) events?: readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}] | undefined\",\"start\":77,\"length\":6,\"target\":\"events\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"event Approval(address indexed owner, address indexed sender, uint256 value)\\\", \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"]>(signatures: [\\\"event Approval(address indexed owner, address indexed sender, uint256 value)\\\", \\\"event Transfer(address indexed from, address indexed to, uint256 value)\\\"]): readonly [...]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":85,\"length\":8,\"target\":\"parseAbi\",\"line\":3,\"character\":10},{\"type\":\"hover\",\"text\":\"(property) onLogs: WatchEventOnLogsFn<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"docs\":\"The callback to call when new event logs are received.\",\"start\":286,\"length\":6,\"target\":\"onLogs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(parameter) logs: WatchEventOnLogsParameter<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"start\":294,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":10},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":302,\"length\":7,\"target\":\"console\",\"line\":7,\"character\":18},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":310,\"length\":3,\"target\":\"log\",\"line\":7,\"character\":26},{\"type\":\"hover\",\"text\":\"(parameter) logs: WatchEventOnLogsParameter<undefined, readonly [{\\n    readonly name: \\\"Approval\\\";\\n    readonly type: \\\"event\\\";\\n    readonly inputs: readonly [{\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"owner\\\";\\n        readonly indexed: true;\\n    }, {\\n        readonly type: \\\"address\\\";\\n        readonly name: \\\"sender\\\";\\n        readonly indexed: true;\\n    }, {\\n        ...;\\n    }];\\n}, {\\n    ...;\\n}], undefined, undefined>\",\"start\":314,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":30}],\"tags\":[]}}"
