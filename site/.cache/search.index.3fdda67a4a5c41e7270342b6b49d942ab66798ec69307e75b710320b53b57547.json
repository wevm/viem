"{\"value\":{\"mdx\":\"# Cross-Chain USDC Transfers (CCTP V2)\\n\\n## Overview\\n\\n:::info\\nThis guide is maintained by [Circle](https://www.circle.com).\\n:::\\n\\nLet's set up a cross-chain USDC transfer using [Circle's Cross-Chain Transfer Protocol (CCTP V2)](https://developers.circle.com/stablecoins/cctp-getting-started) and Viem.\\n\\nIn this guide, we'll build a TypeScript script that burns USDC on the **Optimism Sepolia** testnet and mints the equivalent USDC on the **Ethereum Sepolia** testnet – all with just a few steps.\\n\\nWe'll use Viem's wallet client to interact with both chains, and the Circle CCTP Attestation API to retrieve the attestation needed to mint USDC on the destination chain.\\n\\nBy the end, you'll know how to:\\n\\n* Approve the Circle TokenMessenger contract to spend USDC on the source chain (Optimism Sepolia).\\n* Burn USDC on the source chain to initiate a cross-chain transfer.\\n* Fetch an attestation from Circle verifying the burn event.\\n* Mint USDC on the destination chain (Ethereum Sepolia) using the attestation.\\n* Verify that the USDC balance moved from the source chain to the destination chain.\\n\\n## Steps\\n\\n::::steps\\n\\n### Set up Viem Clients\\n\\nFirst, we need to configure our environment and connect to both blockchains. We'll use **Viem** to create wallet clients for signing transactions and public clients for reading blockchain data.\\n\\n```ts twoslash [config.ts]\\nimport { createClient, http, publicActions, walletActions } from 'viem';\\nimport { privateKeyToAccount } from 'viem/accounts';\\nimport { sepolia, optimismSepolia } from 'viem/chains';\\n\\nexport const account = privateKeyToAccount('0x...');\\n\\nexport const client = {\\n  optimismSepolia: createClient({\\n    account,\\n    chain: optimismSepolia,\\n    transport: http(),\\n  })\\n    .extend(publicActions)\\n    .extend(walletActions),\\n\\n  sepolia: createClient({\\n    account,\\n    chain: sepolia,\\n    transport: http(),\\n  })\\n    .extend(publicActions)\\n    .extend(walletActions),\\n}\\n```\\n\\n:::note\\nEnsure your test wallet is funded with Sepolia ETH (for gas) on both networks and some Sepolia USDC on Optimism.\\n:::\\n\\n### Define constants\\n\\nNext, let's define all the constants we'll need: contract addresses, domains, and transfer parameters.\\n\\nCCTP uses specific contracts on each chain for messaging and token minting/burning, and uses [**domain IDs**](https://developers.circle.com/stablecoins/supported-domains) to identify each blockchain in the protocol. The domain ID for Ethereum (Sepolia) is 0, and for Optimism (Sepolia) it's 2.\\n\\nWe'll also specify the amount of USDC to transfer (in USDC's smallest unit, 6 decimal places) and the max fee for a **Fast** transfer.\\n\\n```ts [constants.ts]\\nimport { erc20Abi } from 'viem'\\n\\nexport const domain = {\\n  optimismSepolia: 2,\\n  mainnet: 0,\\n}\\n\\nexport const tokenMessengerAbi = [{\\n  type: 'function', \\n  name: 'depositForBurn', \\n  stateMutability: 'nonpayable',\\n  inputs: [\\n    { name: 'amount', type: 'uint256' }, \\n    { name: 'destinationDomain', type: 'uint32' },\\n    { name: 'mintRecipient', type: 'bytes32' }, \\n    { name: 'burnToken', type: 'address' },\\n    { name: 'destinationCaller', type: 'bytes32' }, \\n    { name: 'maxFee', type: 'uint256' },\\n    { name: 'minFinalityThreshold', type: 'uint32' },\\n  ],\\n  outputs: [],\\n}, {\\n  type: 'function', \\n  name: 'receiveMessage', \\n  stateMutability: 'nonpayable',\\n  inputs: [ \\n    { name: 'message', type: 'bytes' }, \\n    { name: 'attestation', type: 'bytes' } \\n  ],\\n  outputs: [],\\n}] as const\\n\\nexport const tokenMessengerAddress = {\\n  optimismSepolia: '0x8fe6b999dc680ccfdd5bf7eb0974218be2542daa',\\n  mainnet: '0xe737e5cebeeba77efe34d4aa090756590b1ce275',\\n}\\n\\nexport const usdcAbi = erc20Abi\\n\\nexport const usdcAddress = {\\n  optimismSepolia: '0x5fd84259d66cd46123540766be93dfe6d43130d7',\\n  mainnet: '0x1c7d4b196cb0c7b01d743fbc6116a902379c7238',\\n}\\n```\\n\\n### Approve USDC for transfer\\n\\nBefore we can burn USDC, we must approve the TokenMessenger contract to spend it.   \\nTo prevent a race condition, we call waitForTransactionReceipt to ensure the approval transaction is confirmed before we proceed to the next step.\\n\\n```ts\\nimport { parseUnits } from 'viem'\\nimport { client } from './config'\\nimport { tokenMessengerAddress, usdcAddress, usdcAbi } from './constants'\\n\\nasync function approveUSDC() {\\n  // approve 1 USDC\\n  const hash = await client.optimismSepolia.writeContract({\\n    abi: usdcAbi,\\n    address: usdcAddress.optimismSepolia,\\n    functionName: 'approve',\\n    args: [tokenMessengerAddress.optimismSepolia, parseUnits('1', 6)],\\n  });\\n  await client.optimismSepolia.waitForTransactionReceipt({ hash });\\n}\\n```\\n\\n### Burn USDC to initiate the transfer\\n\\nNow comes the core of CCTP: **burning** USDC on the source chain to initiate the transfer.\\n\\nWe'll call the TokenMessenger's `depositForBurn(...)` function on Optimism Sepolia.   \\nThis will burn the specified USDC from our wallet and emit a message that Circle's infrastructure will pick up.\\n\\nOur function burnUSDC will handle this and return the transaction result, which we'll need for the next step (to retrieve the attestation).\\n\\n```ts\\nimport { erc20Abi, padHex, parseUnits } from 'viem'\\nimport { client } from './config'\\nimport { domain, tokenMessengerAddress, usdcAddress, usdcAbi } from './constants'\\n\\nconst destinationAddress = '0x...'\\n\\nasync function burnUSDC() {\\n  return await client.optimismSepolia.writeContract({\\n    abi: tokenMessengerAbi,\\n    address: tokenMessengerAddress.optimismSepolia,\\n    functionName: 'depositForBurn',\\n    args: [\\n      parseUnits('1', 6), \\n      domain.sepolia, \\n      padHex(destinationAddress, { dir: 'left', size: 32 }),\\n      usdcAddress.optimismSepolia, \\n      '0x0000000000000000000000000000000000000000000000000000000000000000', \\n      parseUnits('0.0005', 6), \\n      1000,\\n    ],\\n  })\\n}\\n```\\n\\n### Retrieve the attestation from Circle\\n\\nAfter burning USDC on the source chain, Circle's CCTP service needs to provide an **attestation** – basically a signed confirmation that the burn event happened and is valid.\\n\\nThe attestation will later be used to authorize minting on the destination chain. Circle provides a public API endpoint to fetch this attestation by the source domain and transaction hash.\\n\\n```ts\\nimport { Hex } from 'viem'\\nimport { domain } from './constants'\\n\\nasync function retrieveAttestation(burnTx: Hex) {\\n  const url = `https://iris-api-sandbox.circle.com/v2/messages/${domain.optimismSepolia}?transactionHash=${burnTx}`;\\n\\n  return new Promise((resolve, reject) => {\\n    const interval = setInterval(async () => {\\n      try {\\n        const response = await fetch(url)\\n        if (!response.ok) return\\n        \\n        const data = await response.json()\\n        if (!data?.messages?.[0]) return\\n        if (data.messages[0].status !== 'complete') return\\n\\n        clearInterval(interval)\\n        resolve(data.messages[0])\\n      } catch (error: any) {\\n        clearInterval(interval)\\n        reject(error)\\n      }\\n    }, 5000);\\n  });\\n}\\n```\\n\\n### Mint USDC on the destination chain\\n\\nWith the attestation, we call the receiveMessage function on the MessageTransmitter contract on Ethereum Sepolia. This function verifies the attestation and mints the USDC to our destination address.\\n\\n```ts\\nimport { client } from './config'\\nimport { tokenMessengerAddress, tokenMessengerAbi } from './constants'\\n\\nasync function mintUSDC(attestation: { attestation: Hex, message: Hex }) {\\n  return await client.sepolia.writeContract({\\n    to: tokenMessengerAddress.sepolia,\\n    abi: tokenMessengerAbi,\\n    functionName: 'receiveMessage',\\n    args: [attestation.message, attestation.attestation],\\n  });\\n}\\n```\\n\\n### Execute the transfer\\n\\nFinally, we execute the steps in sequence and verify the final balances on both chains.\\n\\n```ts\\nimport { client } from './config'\\n\\n// 1. Approve USDC on source chain\\nawait approveUSDC();\\n\\n// 2. Burn USDC on source (initiates transfer)\\nconst burnTx = await burnUSDC();\\n\\n// 3. Retrieve attestation for the burn transaction\\nconst attestation = await retrieveAttestation(burnTx);\\n\\n// 4. Mint USDC on destination chain using the attestation\\nawait mintUSDC(attestation);\\n\\nconst sourceBalance = await client.optimismSepolia.readContract({\\n  address: usdcAddress.optimismSepolia,\\n  abi: usdcAbi,\\n  functionName: 'balanceOf',\\n  args: [account.address],\\n});\\nconst destBalance = await client.sepolia.readContract({\\n  address: usdcAddress.sepolia,\\n  abi: usdcAbi,\\n  functionName: 'balanceOf',\\n  args: [account.address],\\n});\\n\\nconsole.log(`USDC on Optimism Sepolia: ${formatUnits(sourceBalance, 6)}`);\\nconsole.log(`USDC on Ethereum Sepolia: ${formatUnits(destBalance, 6)}`);\\n```\\n\\n::::\",\"document\":[{\"href\":\"/circle-usdc/guides/cross-chain#cross-chain-usdc-transfers-cctp-v2\",\"html\":\"</header>\\n\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#cross-chain-usdc-transfers-cctp-v2\",\"isPage\":true,\"text\":\"\\n\",\"title\":\"Cross-Chain USDC Transfers (CCTP V2)\",\"titles\":[]},{\"href\":\"/circle-usdc/guides/cross-chain#overview\",\"html\":\"\\n<aside data-callout=\\\"info\\\"><p>This guide is maintained by <a href=\\\"https://www.circle.com\\\">Circle</a>.</p></aside>\\n<p>Let&#x27;s set up a cross-chain USDC transfer using <a href=\\\"https://developers.circle.com/stablecoins/cctp-getting-started\\\">Circle&#x27;s Cross-Chain Transfer Protocol (CCTP V2)</a> and Viem.</p>\\n<p>In this guide, we&#x27;ll build a TypeScript script that burns USDC on the <strong>Optimism Sepolia</strong> testnet and mints the equivalent USDC on the <strong>Ethereum Sepolia</strong> testnet – all with just a few steps.</p>\\n<p>We&#x27;ll use Viem&#x27;s wallet client to interact with both chains, and the Circle CCTP Attestation API to retrieve the attestation needed to mint USDC on the destination chain.</p>\\n<p>By the end, you&#x27;ll know how to:</p>\\n<ul>\\n<li>Approve the Circle TokenMessenger contract to spend USDC on the source chain (Optimism Sepolia).</li>\\n<li>Burn USDC on the source chain to initiate a cross-chain transfer.</li>\\n<li>Fetch an attestation from Circle verifying the burn event.</li>\\n<li>Mint USDC on the destination chain (Ethereum Sepolia) using the attestation.</li>\\n<li>Verify that the USDC balance moved from the source chain to the destination chain.</li>\\n</ul>\\n\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#overview\",\"isPage\":false,\"text\":\"\\nThis guide is maintained by Circle.\\nLet&#x27;s set up a cross-chain USDC transfer using Circle&#x27;s Cross-Chain Transfer Protocol (CCTP V2) and Viem.\\nIn this guide, we&#x27;ll build a TypeScript script that burns USDC on the Optimism Sepolia testnet and mints the equivalent USDC on the Ethereum Sepolia testnet – all with just a few steps.\\nWe&#x27;ll use Viem&#x27;s wallet client to interact with both chains, and the Circle CCTP Attestation API to retrieve the attestation needed to mint USDC on the destination chain.\\nBy the end, you&#x27;ll know how to:\\n\\nApprove the Circle TokenMessenger contract to spend USDC on the source chain (Optimism Sepolia).\\nBurn USDC on the source chain to initiate a cross-chain transfer.\\nFetch an attestation from Circle verifying the burn event.\\nMint USDC on the destination chain (Ethereum Sepolia) using the attestation.\\nVerify that the USDC balance moved from the source chain to the destination chain.\\n\\n\",\"title\":\"Overview\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\"]},{\"href\":\"/circle-usdc/guides/cross-chain#steps\",\"html\":\"\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#steps\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Steps\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\"]},{\"href\":\"/circle-usdc/guides/cross-chain#set-up-viem-clients\",\"html\":\"<p>First, we need to configure our environment and connect to both blockchains. We&#x27;ll use <strong>Viem</strong> to create wallet clients for signing transactions and public clients for reading blockchain data.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createClient, http, publicActions, walletActions } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { privateKeyToAccount } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/accounts&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { sepolia, optimismSepolia } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> account</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> privateKeyToAccount</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x...&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  optimismSepolia: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    account,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    chain: optimismSepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    .</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">extend</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(publicActions)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    .</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">extend</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(walletActions),</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  sepolia: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    account,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    chain: sepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    .</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">extend</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(publicActions)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    .</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">extend</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(walletActions),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre><aside data-callout=\\\"note\\\"><p>Ensure your test wallet is funded with Sepolia ETH (for gas) on both networks and some Sepolia USDC on Optimism.</p></aside></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#set-up-viem-clients\",\"isPage\":false,\"text\":\"First, we need to configure our environment and connect to both blockchains. We&#x27;ll use Viem to create wallet clients for signing transactions and public clients for reading blockchain data.import { createClient, http, publicActions, walletActions } from &#x27;viem&#x27;;\\nimport { privateKeyToAccount } from &#x27;viem/accounts&#x27;;\\nimport { sepolia, optimismSepolia } from &#x27;viem/chains&#x27;;\\n \\nexport const account = privateKeyToAccount(&#x27;0x...&#x27;);\\n \\nexport const client = {\\n  optimismSepolia: createClient({\\n    account,\\n    chain: optimismSepolia,\\n    transport: http(),\\n  })\\n    .extend(publicActions)\\n    .extend(walletActions),\\n \\n  sepolia: createClient({\\n    account,\\n    chain: sepolia,\\n    transport: http(),\\n  })\\n    .extend(publicActions)\\n    .extend(walletActions),\\n}Ensure your test wallet is funded with Sepolia ETH (for gas) on both networks and some Sepolia USDC on Optimism.\",\"title\":\"Set up Viem Clients\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#define-constants\",\"html\":\"<p>Next, let&#x27;s define all the constants we&#x27;ll need: contract addresses, domains, and transfer parameters.</p><p>CCTP uses specific contracts on each chain for messaging and token minting/burning, and uses <a href=\\\"https://developers.circle.com/stablecoins/supported-domains\\\"><strong>domain IDs</strong></a> to identify each blockchain in the protocol. The domain ID for Ethereum (Sepolia) is 0, and for Optimism (Sepolia) it&#x27;s 2.</p><p>We&#x27;ll also specify the amount of USDC to transfer (in USDC&#x27;s smallest unit, 6 decimal places) and the max fee for a <strong>Fast</strong> transfer.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"constants.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { erc20Abi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> domain</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  optimismSepolia: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  mainnet: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tokenMessengerAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;depositForBurn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;nonpayable&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  inputs: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;amount&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;destinationDomain&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint32&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;mintRecipient&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;bytes32&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;burnToken&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;address&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;destinationCaller&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;bytes32&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;maxFee&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint256&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;minFinalityThreshold&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;uint32&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  outputs: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}, {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;receiveMessage&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;nonpayable&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  inputs: [ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;message&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;bytes&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;attestation&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;bytes&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  outputs: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> tokenMessengerAddress</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  optimismSepolia: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x8fe6b999dc680ccfdd5bf7eb0974218be2542daa&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  mainnet: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xe737e5cebeeba77efe34d4aa090756590b1ce275&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> usdcAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> erc20Abi</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> usdcAddress</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  optimismSepolia: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x5fd84259d66cd46123540766be93dfe6d43130d7&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  mainnet: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x1c7d4b196cb0c7b01d743fbc6116a902379c7238&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#define-constants\",\"isPage\":false,\"text\":\"Next, let&#x27;s define all the constants we&#x27;ll need: contract addresses, domains, and transfer parameters.CCTP uses specific contracts on each chain for messaging and token minting/burning, and uses domain IDs to identify each blockchain in the protocol. The domain ID for Ethereum (Sepolia) is 0, and for Optimism (Sepolia) it&#x27;s 2.We&#x27;ll also specify the amount of USDC to transfer (in USDC&#x27;s smallest unit, 6 decimal places) and the max fee for a Fast transfer.import { erc20Abi } from &#x27;viem&#x27;\\n \\nexport const domain = {\\n  optimismSepolia: 2,\\n  mainnet: 0,\\n}\\n \\nexport const tokenMessengerAbi = [{\\n  type: &#x27;function&#x27;, \\n  name: &#x27;depositForBurn&#x27;, \\n  stateMutability: &#x27;nonpayable&#x27;,\\n  inputs: [\\n    { name: &#x27;amount&#x27;, type: &#x27;uint256&#x27; }, \\n    { name: &#x27;destinationDomain&#x27;, type: &#x27;uint32&#x27; },\\n    { name: &#x27;mintRecipient&#x27;, type: &#x27;bytes32&#x27; }, \\n    { name: &#x27;burnToken&#x27;, type: &#x27;address&#x27; },\\n    { name: &#x27;destinationCaller&#x27;, type: &#x27;bytes32&#x27; }, \\n    { name: &#x27;maxFee&#x27;, type: &#x27;uint256&#x27; },\\n    { name: &#x27;minFinalityThreshold&#x27;, type: &#x27;uint32&#x27; },\\n  ],\\n  outputs: [],\\n}, {\\n  type: &#x27;function&#x27;, \\n  name: &#x27;receiveMessage&#x27;, \\n  stateMutability: &#x27;nonpayable&#x27;,\\n  inputs: [ \\n    { name: &#x27;message&#x27;, type: &#x27;bytes&#x27; }, \\n    { name: &#x27;attestation&#x27;, type: &#x27;bytes&#x27; } \\n  ],\\n  outputs: [],\\n}] as const\\n \\nexport const tokenMessengerAddress = {\\n  optimismSepolia: &#x27;0x8fe6b999dc680ccfdd5bf7eb0974218be2542daa&#x27;,\\n  mainnet: &#x27;0xe737e5cebeeba77efe34d4aa090756590b1ce275&#x27;,\\n}\\n \\nexport const usdcAbi = erc20Abi\\n \\nexport const usdcAddress = {\\n  optimismSepolia: &#x27;0x5fd84259d66cd46123540766be93dfe6d43130d7&#x27;,\\n  mainnet: &#x27;0x1c7d4b196cb0c7b01d743fbc6116a902379c7238&#x27;,\\n}\",\"title\":\"Define constants\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#approve-usdc-for-transfer\",\"html\":\"<p>Before we can burn USDC, we must approve the TokenMessenger contract to spend it.<br/>\\nTo prevent a race condition, we call waitForTransactionReceipt to ensure the approval transaction is confirmed before we proceed to the next step.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { parseUnits } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { client } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { tokenMessengerAddress, usdcAddress, usdcAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./constants&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> approveUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // approve 1 USDC</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.optimismSepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    abi: usdcAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    address: usdcAddress.optimismSepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;approve&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    args: [tokenMessengerAddress.optimismSepolia, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseUnits</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.optimismSepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">waitForTransactionReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ hash });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#approve-usdc-for-transfer\",\"isPage\":false,\"text\":\"Before we can burn USDC, we must approve the TokenMessenger contract to spend it.\\nTo prevent a race condition, we call waitForTransactionReceipt to ensure the approval transaction is confirmed before we proceed to the next step.import { parseUnits } from &#x27;viem&#x27;\\nimport { client } from &#x27;./config&#x27;\\nimport { tokenMessengerAddress, usdcAddress, usdcAbi } from &#x27;./constants&#x27;\\n \\nasync function approveUSDC() {\\n  // approve 1 USDC\\n  const hash = await client.optimismSepolia.writeContract({\\n    abi: usdcAbi,\\n    address: usdcAddress.optimismSepolia,\\n    functionName: &#x27;approve&#x27;,\\n    args: [tokenMessengerAddress.optimismSepolia, parseUnits(&#x27;1&#x27;, 6)],\\n  });\\n  await client.optimismSepolia.waitForTransactionReceipt({ hash });\\n}\",\"title\":\"Approve USDC for transfer\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#burn-usdc-to-initiate-the-transfer\",\"html\":\"<p>Now comes the core of CCTP: <strong>burning</strong> USDC on the source chain to initiate the transfer.</p><p>We&#x27;ll call the TokenMessenger&#x27;s <code>depositForBurn(...)</code> function on Optimism Sepolia.<br/>\\nThis will burn the specified USDC from our wallet and emit a message that Circle&#x27;s infrastructure will pick up.</p><p>Our function burnUSDC will handle this and return the transaction result, which we&#x27;ll need for the next step (to retrieve the attestation).</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { erc20Abi, padHex, parseUnits } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { client } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { domain, tokenMessengerAddress, usdcAddress, usdcAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./constants&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> destinationAddress</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;0x...&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> burnUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.optimismSepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    abi: tokenMessengerAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    address: tokenMessengerAddress.optimismSepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;depositForBurn&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    args: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      parseUnits</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      domain.sepolia, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      padHex</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(destinationAddress, { dir: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;left&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, size: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      usdcAddress.optimismSepolia, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      parseUnits</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.0005&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">      1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#burn-usdc-to-initiate-the-transfer\",\"isPage\":false,\"text\":\"Now comes the core of CCTP: burning USDC on the source chain to initiate the transfer.We&#x27;ll call the TokenMessenger&#x27;s depositForBurn(...) function on Optimism Sepolia.\\nThis will burn the specified USDC from our wallet and emit a message that Circle&#x27;s infrastructure will pick up.Our function burnUSDC will handle this and return the transaction result, which we&#x27;ll need for the next step (to retrieve the attestation).import { erc20Abi, padHex, parseUnits } from &#x27;viem&#x27;\\nimport { client } from &#x27;./config&#x27;\\nimport { domain, tokenMessengerAddress, usdcAddress, usdcAbi } from &#x27;./constants&#x27;\\n \\nconst destinationAddress = &#x27;0x...&#x27;\\n \\nasync function burnUSDC() {\\n  return await client.optimismSepolia.writeContract({\\n    abi: tokenMessengerAbi,\\n    address: tokenMessengerAddress.optimismSepolia,\\n    functionName: &#x27;depositForBurn&#x27;,\\n    args: [\\n      parseUnits(&#x27;1&#x27;, 6), \\n      domain.sepolia, \\n      padHex(destinationAddress, { dir: &#x27;left&#x27;, size: 32 }),\\n      usdcAddress.optimismSepolia, \\n      &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;, \\n      parseUnits(&#x27;0.0005&#x27;, 6), \\n      1000,\\n    ],\\n  })\\n}\",\"title\":\"Burn USDC to initiate the transfer\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#retrieve-the-attestation-from-circle\",\"html\":\"<p>After burning USDC on the source chain, Circle&#x27;s CCTP service needs to provide an <strong>attestation</strong> – basically a signed confirmation that the burn event happened and is valid.</p><p>The attestation will later be used to authorize minting on the destination chain. Circle provides a public API endpoint to fetch this attestation by the source domain and transaction hash.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { Hex } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { domain } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./constants&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> retrieveAttestation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">burnTx</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Hex</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> url</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `https://iris-api-sandbox.circle.com/v2/messages/${</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">domain</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">optimismSepolia</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}?transactionHash=${</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">burnTx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Promise</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">((</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">resolve</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">reject</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> interval</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> setInterval</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> response</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(url)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">response.ok) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data?.messages?.[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (data.messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].status </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;complete&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        clearInterval</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(interval)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        resolve</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data.messages[</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">catch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">error</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        clearInterval</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(interval)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        reject</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(error)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">5000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#retrieve-the-attestation-from-circle\",\"isPage\":false,\"text\":\"After burning USDC on the source chain, Circle&#x27;s CCTP service needs to provide an attestation – basically a signed confirmation that the burn event happened and is valid.The attestation will later be used to authorize minting on the destination chain. Circle provides a public API endpoint to fetch this attestation by the source domain and transaction hash.import { Hex } from &#x27;viem&#x27;\\nimport { domain } from &#x27;./constants&#x27;\\n \\nasync function retrieveAttestation(burnTx: Hex) {\\n  const url = `https://iris-api-sandbox.circle.com/v2/messages/${domain.optimismSepolia}?transactionHash=${burnTx}`;\\n \\n  return new Promise((resolve, reject) =&gt; {\\n    const interval = setInterval(async () =&gt; {\\n      try {\\n        const response = await fetch(url)\\n        if (!response.ok) return\\n        \\n        const data = await response.json()\\n        if (!data?.messages?.[0]) return\\n        if (data.messages[0].status !== &#x27;complete&#x27;) return\\n \\n        clearInterval(interval)\\n        resolve(data.messages[0])\\n      } catch (error: any) {\\n        clearInterval(interval)\\n        reject(error)\\n      }\\n    }, 5000);\\n  });\\n}\",\"title\":\"Retrieve the attestation from Circle\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#mint-usdc-on-the-destination-chain\",\"html\":\"<p>With the attestation, we call the receiveMessage function on the MessageTransmitter contract on Ethereum Sepolia. This function verifies the attestation and mints the USDC to our destination address.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { client } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { tokenMessengerAddress, tokenMessengerAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./constants&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> mintUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">attestation</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">attestation</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Hex</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">message</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Hex</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.sepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">writeContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    to: tokenMessengerAddress.sepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    abi: tokenMessengerAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;receiveMessage&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    args: [attestation.message, attestation.attestation],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#mint-usdc-on-the-destination-chain\",\"isPage\":false,\"text\":\"With the attestation, we call the receiveMessage function on the MessageTransmitter contract on Ethereum Sepolia. This function verifies the attestation and mints the USDC to our destination address.import { client } from &#x27;./config&#x27;\\nimport { tokenMessengerAddress, tokenMessengerAbi } from &#x27;./constants&#x27;\\n \\nasync function mintUSDC(attestation: { attestation: Hex, message: Hex }) {\\n  return await client.sepolia.writeContract({\\n    to: tokenMessengerAddress.sepolia,\\n    abi: tokenMessengerAbi,\\n    functionName: &#x27;receiveMessage&#x27;,\\n    args: [attestation.message, attestation.attestation],\\n  });\\n}\",\"title\":\"Mint USDC on the destination chain\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/cross-chain#execute-the-transfer\",\"html\":\"<p>Finally, we execute the steps in sequence and verify the final balances on both chains.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { client } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 1. Approve USDC on source chain</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> approveUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 2. Burn USDC on source (initiates transfer)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> burnTx</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> burnUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 3. Retrieve attestation for the burn transaction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> attestation</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> retrieveAttestation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(burnTx);</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 4. Mint USDC on destination chain using the attestation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> mintUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(attestation);</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> sourceBalance</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.optimismSepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: usdcAddress.optimismSepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: usdcAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [account.address],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> destBalance</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> client.sepolia.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: usdcAddress.sepolia,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: usdcAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [account.address],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`USDC on Optimism Sepolia: ${</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">formatUnits</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">sourceBalance</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`USDC on Ethereum Sepolia: ${</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">formatUnits</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">destBalance</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span></code></pre></div></div>\",\"id\":\"pages/circle-usdc/guides/cross-chain.mdx#execute-the-transfer\",\"isPage\":false,\"text\":\"Finally, we execute the steps in sequence and verify the final balances on both chains.import { client } from &#x27;./config&#x27;\\n \\n// 1. Approve USDC on source chain\\nawait approveUSDC();\\n \\n// 2. Burn USDC on source (initiates transfer)\\nconst burnTx = await burnUSDC();\\n \\n// 3. Retrieve attestation for the burn transaction\\nconst attestation = await retrieveAttestation(burnTx);\\n \\n// 4. Mint USDC on destination chain using the attestation\\nawait mintUSDC(attestation);\\n \\nconst sourceBalance = await client.optimismSepolia.readContract({\\n  address: usdcAddress.optimismSepolia,\\n  abi: usdcAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [account.address],\\n});\\nconst destBalance = await client.sepolia.readContract({\\n  address: usdcAddress.sepolia,\\n  abi: usdcAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [account.address],\\n});\\n \\nconsole.log(`USDC on Optimism Sepolia: ${formatUnits(sourceBalance, 6)}`);\\nconsole.log(`USDC on Ethereum Sepolia: ${formatUnits(destBalance, 6)}`);\",\"title\":\"Execute the transfer\",\"titles\":[\"Cross-Chain USDC Transfers (CCTP V2)\",\"Steps\"]}]}}"
