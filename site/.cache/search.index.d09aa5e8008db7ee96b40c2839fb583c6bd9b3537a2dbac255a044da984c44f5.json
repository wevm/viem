"{\"value\":{\"mdx\":\"# Fees [Configure chain-based fee data in Viem]\\n\\nYou can modify how fees are derived by using the `fees` property on the Chain.\\n\\n## Usage\\n\\n```tsx\\nimport { defineChain } from 'viem'\\n\\nexport const example = defineChain({\\n  /* ... */\\n  fees: { \\n    baseFeeMultiplier: 1.2, \\n    defaultPriorityFee: parseGwei('0.01'), \\n  } \\n})\\n```\\n\\n## API\\n\\n### `fees.baseFeeMultiplier`\\n\\n- **Type**: `number`\\n- **Default**: `1.2`\\n\\nThe fee multiplier to use to account for fee fluctuations. Used in the [`estimateFeesPerGas` Action](/docs/actions/public/estimateFeesPerGas) against the latest block's base fee per gas to derive a final `maxFeePerGas` (EIP-1193), or gas price to derive a final `gasPrice` (Legacy).\\n\\n**Parameters**\\n\\n- `block`: The latest block.\\n- `client`: The Client instance.\\n- `request`: The transaction request (if exists).\\n\\n```ts\\nimport { defineChain } from 'viem'\\n\\nconst example = defineChain({ \\n  /* ... */\\n  fees: { // [!code focus:8]\\n    baseFeeMultiplier: 1.2,\\n    // or\\n    async baseFeeMultiplier({ block, request }) {\\n      // some async work\\n      return // ...\\n    },\\n  },\\n})\\n```\\n\\n### `fees.defaultPriorityFee`\\n\\n- **Type**: `number | ((args: FeesFnParameters) => Promise<bigint> | bigint)`\\n\\nThe default `maxPriorityFeePerGas` to use when a priority fee is not defined upon sending a transaction.\\n\\nAlso overrides the return value in the [`estimateMaxPriorityFeePerGas` Action](/docs/actions/public/estimateMaxPriorityFeePerGas) and `maxPriorityFeePerGas` value in [`estimateFeesPerGas`](/docs/actions/public/estimateFeesPerGas).\\n\\n**Parameters**\\n\\n- `block`: The latest block.\\n- `client`: The Client instance.\\n- `request`: The transaction request (if exists).\\n\\n```ts\\nimport { defineChain } from 'viem'\\n\\nconst example = defineChain({\\n  /* ... */\\n  fees: { // [!code focus:8]\\n    defaultPriorityFee: parseGwei('0.01'),\\n    // or\\n    async defaultPriorityFee({ block, request }) {\\n      // some async work\\n      return // ...\\n    },\\n  },\\n})\\n```\\n\\n### `fees.estimateFeesPerGas`\\n\\n- **Type**: `(args: FeesFnParameters) => Promise<EstimateFeesPerGasResponse>`\\n\\nAllows customization of fee per gas values (ie. `maxFeePerGas`, `maxPriorityFeePerGas`, `gasPrice`).\\n\\nAlso overrides the return value in [`estimateFeesPerGas`](/docs/actions/public/estimateFeesPerGas).\\n\\n**Parameters**\\n\\n- `block`: The latest block.\\n- `client`: The Client instance.\\n- `multiply`: A function to apply the `baseFeeMultiplier` to the provided value.\\n- `request`: The transaction request (if exists).\\n- `type`: The transaction type (ie. `legacy` or `eip1559`).\\n\\n```ts\\nimport { defineChain } from 'viem'\\n\\nconst example = defineChain({\\n  /* ... */\\n  fees: { // [!code focus:13]\\n    async estimateFeesPerGas({ client, multiply, type }) {\\n      const gasPrice = // ...\\n      const baseFeePerGas = // ...\\n      const maxPriorityFeePerGas = // ...\\n\\n      if (type === 'legacy') return { gasPrice: multiply(gasPrice) }\\n      return {\\n        maxFeePerGas: multiply(baseFeePerGas) + maxPriorityFeePerGas,\\n        maxPriorityFeePerGas\\n      },\\n    },\\n  },\\n})\\n```\\n\",\"document\":[{\"href\":\"/docs/chains/fees#fees\",\"html\":\"<div role=\\\"doc-subtitle\\\">Configure chain-based fee data in Viem</div></header>\\n<p>You can modify how fees are derived by using the <code>fees</code> property on the Chain.</p>\\n\",\"id\":\"pages/docs/chains/fees.md#fees\",\"isPage\":true,\"text\":\"Configure chain-based fee data in Viem\\nYou can modify how fees are derived by using the fees property on the Chain.\\n\",\"title\":\"Fees\",\"titles\":[]},{\"href\":\"/docs/chains/fees#usage\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineChain } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  fees: { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    baseFeeMultiplier: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1.2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    defaultPriorityFee: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseGwei</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.01&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/fees.md#usage\",\"isPage\":false,\"text\":\"\\nimport { defineChain } from &#x27;viem&#x27;\\n \\nexport const example = defineChain({\\n  /* ... */\\n  fees: { \\n    baseFeeMultiplier: 1.2, \\n    defaultPriorityFee: parseGwei(&#x27;0.01&#x27;), \\n  } \\n})\\n\",\"title\":\"Usage\",\"titles\":[\"Fees\"]},{\"href\":\"/docs/chains/fees#api\",\"html\":\"\\n\",\"id\":\"pages/docs/chains/fees.md#api\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"API\",\"titles\":[\"Fees\"]},{\"href\":\"/docs/chains/fees#feesbasefeemultiplier\",\"html\":\"\\n<ul>\\n<li><strong>Type</strong>: <code>number</code></li>\\n<li><strong>Default</strong>: <code>1.2</code></li>\\n</ul>\\n<p>The fee multiplier to use to account for fee fluctuations. Used in the <a href=\\\"/docs/actions/public/estimateFeesPerGas\\\"><code>estimateFeesPerGas</code> Action</a> against the latest block&#x27;s base fee per gas to derive a final <code>maxFeePerGas</code> (EIP-1193), or gas price to derive a final <code>gasPrice</code> (Legacy).</p>\\n<strong>Parameters</strong>\\n<ul>\\n<li><code>block</code>: The latest block.</li>\\n<li><code>client</code>: The Client instance.</li>\\n<li><code>request</code>: The transaction request (if exists).</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineChain } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  fees: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    baseFeeMultiplier: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1.2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // or</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    async</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> baseFeeMultiplier</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">block</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">request</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">      // some async work</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      return</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // ...</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/fees.md#feesbasefeemultiplier\",\"isPage\":false,\"text\":\"\\n\\nType: number\\nDefault: 1.2\\n\\nThe fee multiplier to use to account for fee fluctuations. Used in the estimateFeesPerGas Action against the latest block&#x27;s base fee per gas to derive a final maxFeePerGas (EIP-1193), or gas price to derive a final gasPrice (Legacy).\\nParameters\\n\\nblock: The latest block.\\nclient: The Client instance.\\nrequest: The transaction request (if exists).\\n\\nimport { defineChain } from &#x27;viem&#x27;\\n \\nconst example = defineChain({ \\n  /* ... */\\n  fees: { \\n    baseFeeMultiplier: 1.2,\\n    // or\\n    async baseFeeMultiplier({ block, request }) {\\n      // some async work\\n      return // ...\\n    },\\n  },\\n})\\n\",\"title\":\"fees.baseFeeMultiplier\",\"titles\":[\"Fees\",\"API\"]},{\"href\":\"/docs/chains/fees#feesdefaultpriorityfee\",\"html\":\"\\n<ul>\\n<li><strong>Type</strong>: <code>number | ((args: FeesFnParameters) =&gt; Promise&lt;bigint&gt; | bigint)</code></li>\\n</ul>\\n<p>The default <code>maxPriorityFeePerGas</code> to use when a priority fee is not defined upon sending a transaction.</p>\\n<p>Also overrides the return value in the <a href=\\\"/docs/actions/public/estimateMaxPriorityFeePerGas\\\"><code>estimateMaxPriorityFeePerGas</code> Action</a> and <code>maxPriorityFeePerGas</code> value in <a href=\\\"/docs/actions/public/estimateFeesPerGas\\\"><code>estimateFeesPerGas</code></a>.</p>\\n<strong>Parameters</strong>\\n<ul>\\n<li><code>block</code>: The latest block.</li>\\n<li><code>client</code>: The Client instance.</li>\\n<li><code>request</code>: The transaction request (if exists).</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineChain } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  fees: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    defaultPriorityFee: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseGwei</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.01&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // or</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    async</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defaultPriorityFee</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">block</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">request</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">      // some async work</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      return</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // ...</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/chains/fees.md#feesdefaultpriorityfee\",\"isPage\":false,\"text\":\"\\n\\nType: number | ((args: FeesFnParameters) =&gt; Promise&lt;bigint&gt; | bigint)\\n\\nThe default maxPriorityFeePerGas to use when a priority fee is not defined upon sending a transaction.\\nAlso overrides the return value in the estimateMaxPriorityFeePerGas Action and maxPriorityFeePerGas value in estimateFeesPerGas.\\nParameters\\n\\nblock: The latest block.\\nclient: The Client instance.\\nrequest: The transaction request (if exists).\\n\\nimport { defineChain } from &#x27;viem&#x27;\\n \\nconst example = defineChain({\\n  /* ... */\\n  fees: { \\n    defaultPriorityFee: parseGwei(&#x27;0.01&#x27;),\\n    // or\\n    async defaultPriorityFee({ block, request }) {\\n      // some async work\\n      return // ...\\n    },\\n  },\\n})\\n\",\"title\":\"fees.defaultPriorityFee\",\"titles\":[\"Fees\",\"API\"]},{\"href\":\"/docs/chains/fees#feesestimatefeespergas\",\"html\":\"\\n<ul>\\n<li><strong>Type</strong>: <code>(args: FeesFnParameters) =&gt; Promise&lt;EstimateFeesPerGasResponse&gt;</code></li>\\n</ul>\\n<p>Allows customization of fee per gas values (ie. <code>maxFeePerGas</code>, <code>maxPriorityFeePerGas</code>, <code>gasPrice</code>).</p>\\n<p>Also overrides the return value in <a href=\\\"/docs/actions/public/estimateFeesPerGas\\\"><code>estimateFeesPerGas</code></a>.</p>\\n<strong>Parameters</strong>\\n<ul>\\n<li><code>block</code>: The latest block.</li>\\n<li><code>client</code>: The Client instance.</li>\\n<li><code>multiply</code>: A function to apply the <code>baseFeeMultiplier</code> to the provided value.</li>\\n<li><code>request</code>: The transaction request (if exists).</li>\\n<li><code>type</code>: The transaction type (ie. <code>legacy</code> or <code>eip1559</code>).</li>\\n</ul>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { defineChain } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> example</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> defineChain</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  /* ... */</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  fees: { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    async</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> estimateFeesPerGas</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">client</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">multiply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">type</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }) {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> gasPrice</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // ...</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> baseFeePerGas</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // ...</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> maxPriorityFeePerGas</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // ...</span></span>\\n<span class=\\\"line focused\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (type </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">===</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;legacy&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { gasPrice: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">multiply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(gasPrice) }</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">      return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        maxFeePerGas: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">multiply</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(baseFeePerGas) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> maxPriorityFeePerGas,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        maxPriorityFeePerGas</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\",\"id\":\"pages/docs/chains/fees.md#feesestimatefeespergas\",\"isPage\":false,\"text\":\"\\n\\nType: (args: FeesFnParameters) =&gt; Promise&lt;EstimateFeesPerGasResponse&gt;\\n\\nAllows customization of fee per gas values (ie. maxFeePerGas, maxPriorityFeePerGas, gasPrice).\\nAlso overrides the return value in estimateFeesPerGas.\\nParameters\\n\\nblock: The latest block.\\nclient: The Client instance.\\nmultiply: A function to apply the baseFeeMultiplier to the provided value.\\nrequest: The transaction request (if exists).\\ntype: The transaction type (ie. legacy or eip1559).\\n\\nimport { defineChain } from &#x27;viem&#x27;\\n \\nconst example = defineChain({\\n  /* ... */\\n  fees: { \\n    async estimateFeesPerGas({ client, multiply, type }) {\\n      const gasPrice = // ...\\n      const baseFeePerGas = // ...\\n      const maxPriorityFeePerGas = // ...\\n \\n      if (type === &#x27;legacy&#x27;) return { gasPrice: multiply(gasPrice) }\\n      return {\\n        maxFeePerGas: multiply(baseFeePerGas) + maxPriorityFeePerGas,\\n        maxPriorityFeePerGas\\n      },\\n    },\\n  },\\n})\",\"title\":\"fees.estimateFeesPerGas\",\"titles\":[\"Fees\",\"API\"]}]}}"
