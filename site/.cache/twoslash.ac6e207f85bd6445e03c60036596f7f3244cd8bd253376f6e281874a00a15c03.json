"{\"value\":{\"code\":\"import { parseAbi, parseEther } from 'viem'\\nimport { client } from './config'\\n\\nconst abi = parseAbi([\\n  'function mint()',\\n  'function transfer(address, uint256) returns (bool)',\\n])\\n \\nconst { assetChanges, results } = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1.5')\\n    },\\n    {\\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n      abi,\\n      functionName: 'mint',\\n    },\\n    {\\n      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\\n      abi,\\n      functionName: 'transfer',\\n      args: [\\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n        100n\\n      ],\\n    },\\n  ],\\n  traceAssetChanges: true, // [!code hl]\\n})\\n\\nconsole.log(assetChanges)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":19,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":53,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":85,\"length\":3,\"target\":\"abi\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function mint()\\\", \\\"function transfer(address, uint256) returns (bool)\\\"]>(signatures: [\\\"function mint()\\\", \\\"function transfer(address, uint256) returns (bool)\\\"]): readonly [...]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":91,\"length\":8,\"target\":\"parseAbi\",\"line\":3,\"character\":12},{\"type\":\"hover\",\"text\":\"const assetChanges: readonly {\\n    token: {\\n        address: Address;\\n        decimals?: number | undefined;\\n        symbol?: string | undefined;\\n    };\\n    value: {\\n        pre: bigint;\\n        post: bigint;\\n        diff: bigint;\\n    };\\n}[]\",\"docs\":\"Asset changes.\",\"start\":192,\"length\":12,\"target\":\"assetChanges\",\"line\":8,\"character\":8},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":206,\"length\":7,\"target\":\"results\",\"line\":8,\"character\":22},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":224,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":40},{\"type\":\"hover\",\"text\":\"(property) simulateCalls: <readonly [{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly to: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\";\\n    readonly abi: readonly [{\\n        readonly name: \\\"mint\\\";\\n        readonly type: \\\"function\\\";\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly inputs: readonly [];\\n        readonly outputs: readonly [];\\n    }, {\\n        ...;\\n    }];\\n    readonly functionName: \\\"mint\\\";\\n}, {\\n    ...;\\n}]>(args: SimulateCallsParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateCallsParameters}\"],[\"returns\",\"Results. {@link SimulateCallsReturnType}\"]],\"start\":231,\"length\":13,\"target\":\"simulateCalls\",\"line\":8,\"character\":47},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"docs\":\"Account attached to the calls (msg.sender).\",\"start\":249,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>, Prettify<Call<{\\n    readonly to: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\";\\n    readonly abi: readonly [...];\\n    readonly functionName: \\\"mint\\\";\\n}, {}>>, Prettify<...>]\",\"docs\":\"Calls to simulate.\",\"start\":306,\"length\":5,\"target\":\"calls\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":327,\"length\":2,\"target\":\"to\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":383,\"length\":5,\"target\":\"value\",\"line\":13,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":390,\"length\":10,\"target\":\"parseEther\",\"line\":13,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":427,\"length\":2,\"target\":\"to\",\"line\":16,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":483,\"length\":3,\"target\":\"abi\",\"line\":17,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\" | \\\"transfer\\\"\",\"start\":494,\"length\":12,\"target\":\"functionName\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":535,\"length\":2,\"target\":\"to\",\"line\":21,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":591,\"length\":3,\"target\":\"abi\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\" | \\\"transfer\\\"\",\"start\":602,\"length\":12,\"target\":\"functionName\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`, bigint]\",\"start\":634,\"length\":4,\"target\":\"args\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) traceAssetChanges?: boolean | undefined\",\"docs\":\"Whether to trace asset changes.\",\"start\":732,\"length\":17,\"target\":\"traceAssetChanges\",\"line\":30,\"character\":2},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":775,\"length\":7,\"target\":\"console\",\"line\":33,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":783,\"length\":3,\"target\":\"log\",\"line\":33,\"character\":8},{\"type\":\"hover\",\"text\":\"const assetChanges: readonly {\\n    token: {\\n        address: Address;\\n        decimals?: number | undefined;\\n        symbol?: string | undefined;\\n    };\\n    value: {\\n        pre: bigint;\\n        post: bigint;\\n        diff: bigint;\\n    };\\n}[]\",\"docs\":\"Asset changes.\",\"start\":787,\"length\":12,\"target\":\"assetChanges\",\"line\":33,\"character\":12},{\"type\":\"tag\",\"name\":\"log\",\"start\":801,\"length\":0,\"text\":\"[\",\"line\":34,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":802,\"length\":0,\"text\":\"  {\",\"line\":35,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":803,\"length\":0,\"text\":\"    token: {\",\"line\":36,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":804,\"length\":0,\"text\":\"      address: \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\",\",\"line\":37,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":805,\"length\":0,\"text\":\"      decimals: 18,\",\"line\":38,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":806,\"length\":0,\"text\":\"      symbol: \\\"ETH\\\",\",\"line\":39,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":807,\"length\":0,\"text\":\"    },\",\"line\":40,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":808,\"length\":0,\"text\":\"    value: {\",\"line\":41,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":809,\"length\":0,\"text\":\"      diff: -1500000000000000000n,\",\"line\":42,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":810,\"length\":0,\"text\":\"      post: 9850000000000000000000n,\",\"line\":43,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":811,\"length\":0,\"text\":\"      pre: 10000000000000000000000n,\",\"line\":44,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":812,\"length\":0,\"text\":\"    },\",\"line\":45,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":813,\"length\":0,\"text\":\"  }\",\"line\":46,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":814,\"length\":0,\"text\":\"  {\",\"line\":47,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":815,\"length\":0,\"text\":\"    token: {\",\"line\":48,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":816,\"length\":0,\"text\":\"      address: \\\"0xfba3912ca04dd458c843e2ee08967fc04f3579c2\\\",\",\"line\":49,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":817,\"length\":0,\"text\":\"      decimals: 1,\",\"line\":50,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":818,\"length\":0,\"text\":\"      symbol: \\\"WAGMI\\\",\",\"line\":51,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":819,\"length\":0,\"text\":\"    },\",\"line\":52,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":820,\"length\":0,\"text\":\"    value: {\",\"line\":53,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":821,\"length\":0,\"text\":\"      diff: 1n,\",\"line\":54,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":822,\"length\":0,\"text\":\"      post: 1n,\",\"line\":55,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":823,\"length\":0,\"text\":\"      pre: 0n,\",\"line\":56,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":824,\"length\":0,\"text\":\"    },\",\"line\":57,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":825,\"length\":0,\"text\":\"  },\",\"line\":58,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":826,\"length\":0,\"text\":\"  {\",\"line\":59,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":827,\"length\":0,\"text\":\"    token: {\",\"line\":60,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":828,\"length\":0,\"text\":\"      address: \\\"0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\\\",\",\"line\":61,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":829,\"length\":0,\"text\":\"      decimals: 18,\",\"line\":62,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":830,\"length\":0,\"text\":\"      symbol: \\\"SHIB\\\",\",\"line\":63,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":831,\"length\":0,\"text\":\"    },\",\"line\":64,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":832,\"length\":0,\"text\":\"    value: {\",\"line\":65,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":833,\"length\":0,\"text\":\"      diff: -1000000000000000000n,\",\"line\":66,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":834,\"length\":0,\"text\":\"      post: 410429569258816445970930282571360n,\",\"line\":67,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":835,\"length\":0,\"text\":\"      pre: 410429569258817445970930282571360n,\",\"line\":68,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":836,\"length\":0,\"text\":\"    },\",\"line\":69,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":837,\"length\":0,\"text\":\"  }\",\"line\":70,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":838,\"length\":0,\"text\":\"]\",\"line\":72,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[2735,2746],[2721,2734],[2704,2720],[2647,2703],[2589,2646],[2544,2588],[2521,2543],[2504,2520],[2472,2503],[2442,2471],[2371,2441],[2348,2370],[2334,2347],[2319,2333],[2302,2318],[2277,2301],[2251,2276],[2225,2250],[2202,2224],[2185,2201],[2152,2184],[2123,2151],[2052,2122],[2029,2051],[2015,2028],[2001,2014],[1984,2000],[1937,1983],[1890,1936],[1845,1889],[1822,1844],[1805,1821],[1774,1804],[1744,1773],[1673,1743],[1650,1672],[1636,1649],[1624,1635],[0,823]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"[\",\"start\":1624,\"end\":1635},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  {\",\"start\":1636,\"end\":1649},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    token: {\",\"start\":1650,\"end\":1672},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      address: \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\",\",\"start\":1673,\"end\":1743},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      decimals: 18,\",\"start\":1744,\"end\":1773},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      symbol: \\\"ETH\\\",\",\"start\":1774,\"end\":1804},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":1805,\"end\":1821},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    value: {\",\"start\":1822,\"end\":1844},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      diff: -1500000000000000000n,\",\"start\":1845,\"end\":1889},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      post: 9850000000000000000000n,\",\"start\":1890,\"end\":1936},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      pre: 10000000000000000000000n,\",\"start\":1937,\"end\":1983},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":1984,\"end\":2000},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  }\",\"start\":2001,\"end\":2014},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  {\",\"start\":2015,\"end\":2028},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    token: {\",\"start\":2029,\"end\":2051},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      address: \\\"0xfba3912ca04dd458c843e2ee08967fc04f3579c2\\\",\",\"start\":2052,\"end\":2122},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      decimals: 1,\",\"start\":2123,\"end\":2151},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      symbol: \\\"WAGMI\\\",\",\"start\":2152,\"end\":2184},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":2185,\"end\":2201},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    value: {\",\"start\":2202,\"end\":2224},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      diff: 1n,\",\"start\":2225,\"end\":2250},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      post: 1n,\",\"start\":2251,\"end\":2276},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      pre: 0n,\",\"start\":2277,\"end\":2301},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":2302,\"end\":2318},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  },\",\"start\":2319,\"end\":2333},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  {\",\"start\":2334,\"end\":2347},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    token: {\",\"start\":2348,\"end\":2370},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      address: \\\"0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\\\",\",\"start\":2371,\"end\":2441},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      decimals: 18,\",\"start\":2442,\"end\":2471},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      symbol: \\\"SHIB\\\",\",\"start\":2472,\"end\":2503},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":2504,\"end\":2520},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    value: {\",\"start\":2521,\"end\":2543},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      diff: -1000000000000000000n,\",\"start\":2544,\"end\":2588},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      post: 410429569258816445970930282571360n,\",\"start\":2589,\"end\":2646},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"      pre: 410429569258817445970930282571360n,\",\"start\":2647,\"end\":2703},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"    },\",\"start\":2704,\"end\":2720},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"  }\",\"start\":2721,\"end\":2734},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"]\",\"start\":2735,\"end\":2746}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":196,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":392,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":588,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":784,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseAbi, parseEther } from 'viem'\\nimport { client } from './config'\\n\\nconst abi = parseAbi([\\n  'function mint()',\\n  'function transfer(address, uint256) returns (bool)',\\n])\\n \\nconst { assetChanges, results } = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1.5')\\n    },\\n    {\\n      to: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n      abi,\\n      functionName: 'mint',\\n    },\\n    {\\n      to: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\\n      abi,\\n      functionName: 'transfer',\\n      args: [\\n        '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\\n        100n\\n      ],\\n    },\\n  ],\\n  traceAssetChanges: true, // [!code hl]\\n})\\n\\nconsole.log(assetChanges)\\n// @log: [\\n\\n// @log:   {\\n\\n// @log:     token: {\\n\\n// @log:       address: \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\",\\n\\n// @log:       decimals: 18,\\n\\n// @log:       symbol: \\\"ETH\\\",\\n\\n// @log:     },\\n\\n// @log:     value: {\\n\\n// @log:       diff: -1500000000000000000n,\\n\\n// @log:       post: 9850000000000000000000n,\\n\\n// @log:       pre: 10000000000000000000000n,\\n\\n// @log:     },\\n\\n// @log:   }\\n\\n// @log:   {\\n\\n// @log:     token: {\\n\\n// @log:       address: \\\"0xfba3912ca04dd458c843e2ee08967fc04f3579c2\\\",\\n\\n// @log:       decimals: 1,\\n\\n// @log:       symbol: \\\"WAGMI\\\",\\n\\n// @log:     },\\n\\n// @log:     value: {\\n\\n// @log:       diff: 1n,\\n\\n// @log:       post: 1n,\\n\\n// @log:       pre: 0n,\\n\\n// @log:     },\\n\\n// @log:   },\\n\\n// @log:   {\\n\\n// @log:     token: {\\n\\n// @log:       address: \\\"0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\\\",\\n\\n// @log:       decimals: 18,\\n\\n// @log:       symbol: \\\"SHIB\\\",\\n\\n// @log:     },\\n\\n// @log:     value: {\\n\\n// @log:       diff: -1000000000000000000n,\\n\\n// @log:       post: 410429569258816445970930282571360n,\\n\\n// @log:       pre: 410429569258817445970930282571360n,\\n\\n// @log:     },\\n\\n// @log:   }\\n\\n// @log: ]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseAbi<const signatures extends readonly string[]>(signatures: signatures[\\\"length\\\"] extends 0 ? Error<\\\"At least one signature required\\\"> : Signatures<signatures> extends signatures ? signatures : Signatures<signatures>): ParseAbi<signatures>\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":9,\"length\":8,\"target\":\"parseAbi\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":19,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":19},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":53,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":85,\"length\":3,\"target\":\"abi\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseAbi<[\\\"function mint()\\\", \\\"function transfer(address, uint256) returns (bool)\\\"]>(signatures: [\\\"function mint()\\\", \\\"function transfer(address, uint256) returns (bool)\\\"]): readonly [...]\\nimport parseAbi\",\"docs\":\"Parses human-readable ABI into JSON \\n{@link \\nAbi\\n}\",\"tags\":[[\"param\",\"signatures - Human-Readable ABI\"],[\"returns\",\"Parsed {@link Abi}\"],[\"example\",\"const abi = parseAbi([\\n  //  ^? const abi: readonly [{ name: \\\"balanceOf\\\"; type: \\\"function\\\"; stateMutability:...\\n  'function balanceOf(address owner) view returns (uint256)',\\n  'event Transfer(address indexed from, address indexed to, uint256 amount)',\\n])\"]],\"start\":91,\"length\":8,\"target\":\"parseAbi\",\"line\":3,\"character\":12},{\"type\":\"hover\",\"text\":\"const assetChanges: readonly {\\n    token: {\\n        address: Address;\\n        decimals?: number | undefined;\\n        symbol?: string | undefined;\\n    };\\n    value: {\\n        pre: bigint;\\n        post: bigint;\\n        diff: bigint;\\n    };\\n}[]\",\"docs\":\"Asset changes.\",\"start\":192,\"length\":12,\"target\":\"assetChanges\",\"line\":8,\"character\":8},{\"type\":\"hover\",\"text\":\"const results: [({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n}), ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    error: Error;\\n    result?: undefined;\\n    status: \\\"failure\\\";\\n}) | ({\\n    data: Hex;\\n    gasUsed: bigint;\\n    logs?: Log[] | undefined;\\n} & {\\n    ...;\\n})]\",\"docs\":\"Call results.\",\"start\":206,\"length\":7,\"target\":\"results\",\"line\":8,\"character\":22},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":224,\"length\":6,\"target\":\"client\",\"line\":8,\"character\":40},{\"type\":\"hover\",\"text\":\"(property) simulateCalls: <readonly [{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {\\n    readonly to: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\";\\n    readonly abi: readonly [{\\n        readonly name: \\\"mint\\\";\\n        readonly type: \\\"function\\\";\\n        readonly stateMutability: \\\"nonpayable\\\";\\n        readonly inputs: readonly [];\\n        readonly outputs: readonly [];\\n    }, {\\n        ...;\\n    }];\\n    readonly functionName: \\\"mint\\\";\\n}, {\\n    ...;\\n}]>(args: SimulateCallsParameters<...>) => Promise<...>\",\"docs\":\"Simulates a set of calls.\",\"tags\":[[\"example\",\"```ts\\nimport { createPublicClient, http, parseEther } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\\nconst result = await client.simulateCalls({\\n  account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\\n  calls: [{\\n    {\\n      data: '0xdeadbeef',\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n    },\\n    {\\n      to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n      value: parseEther('1'),\\n    },\\n  ]\\n})\\n```\"],[\"param\",\"client - Client to use.\"],[\"param\",\"parameters - {@link SimulateCallsParameters}\"],[\"returns\",\"Results. {@link SimulateCallsReturnType}\"]],\"start\":231,\"length\":13,\"target\":\"simulateCalls\",\"line\":8,\"character\":47},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | undefined\",\"docs\":\"Account attached to the calls (msg.sender).\",\"start\":249,\"length\":7,\"target\":\"account\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) calls: readonly [Prettify<Call<{\\n    readonly to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\";\\n    readonly value: bigint;\\n}, {}>>, Prettify<Call<{\\n    readonly to: \\\"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\\\";\\n    readonly abi: readonly [...];\\n    readonly functionName: \\\"mint\\\";\\n}, {}>>, Prettify<...>]\",\"docs\":\"Calls to simulate.\",\"start\":306,\"length\":5,\"target\":\"calls\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0x70997970c51812dc3a010c7d01b50e0d17dc79c8\\\"\",\"start\":327,\"length\":2,\"target\":\"to\",\"line\":12,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":383,\"length\":5,\"target\":\"value\",\"line\":13,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":390,\"length\":10,\"target\":\"parseEther\",\"line\":13,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":427,\"length\":2,\"target\":\"to\",\"line\":16,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":483,\"length\":3,\"target\":\"abi\",\"line\":17,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\" | \\\"transfer\\\"\",\"start\":494,\"length\":12,\"target\":\"functionName\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: `0x${string}`\",\"start\":535,\"length\":2,\"target\":\"to\",\"line\":21,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly name: \\\"mint\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [];\\n    readonly outputs: readonly [];\\n}, {\\n    readonly name: \\\"transfer\\\";\\n    readonly type: \\\"function\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [...];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":591,\"length\":3,\"target\":\"abi\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"mint\\\" | \\\"transfer\\\"\",\"start\":602,\"length\":12,\"target\":\"functionName\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) args: readonly [`0x${string}`, bigint]\",\"start\":634,\"length\":4,\"target\":\"args\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) traceAssetChanges?: boolean | undefined\",\"docs\":\"Whether to trace asset changes.\",\"start\":732,\"length\":17,\"target\":\"traceAssetChanges\",\"line\":30,\"character\":2},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":775,\"length\":7,\"target\":\"console\",\"line\":33,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":783,\"length\":3,\"target\":\"log\",\"line\":33,\"character\":8},{\"type\":\"hover\",\"text\":\"const assetChanges: readonly {\\n    token: {\\n        address: Address;\\n        decimals?: number | undefined;\\n        symbol?: string | undefined;\\n    };\\n    value: {\\n        pre: bigint;\\n        post: bigint;\\n        diff: bigint;\\n    };\\n}[]\",\"docs\":\"Asset changes.\",\"start\":787,\"length\":12,\"target\":\"assetChanges\",\"line\":33,\"character\":12}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":801,\"length\":0,\"text\":\"[\",\"line\":34,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":802,\"length\":0,\"text\":\"  {\",\"line\":35,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":803,\"length\":0,\"text\":\"    token: {\",\"line\":36,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":804,\"length\":0,\"text\":\"      address: \\\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\\\",\",\"line\":37,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":805,\"length\":0,\"text\":\"      decimals: 18,\",\"line\":38,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":806,\"length\":0,\"text\":\"      symbol: \\\"ETH\\\",\",\"line\":39,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":807,\"length\":0,\"text\":\"    },\",\"line\":40,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":808,\"length\":0,\"text\":\"    value: {\",\"line\":41,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":809,\"length\":0,\"text\":\"      diff: -1500000000000000000n,\",\"line\":42,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":810,\"length\":0,\"text\":\"      post: 9850000000000000000000n,\",\"line\":43,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":811,\"length\":0,\"text\":\"      pre: 10000000000000000000000n,\",\"line\":44,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":812,\"length\":0,\"text\":\"    },\",\"line\":45,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":813,\"length\":0,\"text\":\"  }\",\"line\":46,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":814,\"length\":0,\"text\":\"  {\",\"line\":47,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":815,\"length\":0,\"text\":\"    token: {\",\"line\":48,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":816,\"length\":0,\"text\":\"      address: \\\"0xfba3912ca04dd458c843e2ee08967fc04f3579c2\\\",\",\"line\":49,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":817,\"length\":0,\"text\":\"      decimals: 1,\",\"line\":50,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":818,\"length\":0,\"text\":\"      symbol: \\\"WAGMI\\\",\",\"line\":51,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":819,\"length\":0,\"text\":\"    },\",\"line\":52,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":820,\"length\":0,\"text\":\"    value: {\",\"line\":53,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":821,\"length\":0,\"text\":\"      diff: 1n,\",\"line\":54,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":822,\"length\":0,\"text\":\"      post: 1n,\",\"line\":55,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":823,\"length\":0,\"text\":\"      pre: 0n,\",\"line\":56,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":824,\"length\":0,\"text\":\"    },\",\"line\":57,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":825,\"length\":0,\"text\":\"  },\",\"line\":58,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":826,\"length\":0,\"text\":\"  {\",\"line\":59,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":827,\"length\":0,\"text\":\"    token: {\",\"line\":60,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":828,\"length\":0,\"text\":\"      address: \\\"0x95ad61b0a150d79219dcf64e1e6cc01f0b64c4ce\\\",\",\"line\":61,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":829,\"length\":0,\"text\":\"      decimals: 18,\",\"line\":62,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":830,\"length\":0,\"text\":\"      symbol: \\\"SHIB\\\",\",\"line\":63,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":831,\"length\":0,\"text\":\"    },\",\"line\":64,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":832,\"length\":0,\"text\":\"    value: {\",\"line\":65,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":833,\"length\":0,\"text\":\"      diff: -1000000000000000000n,\",\"line\":66,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":834,\"length\":0,\"text\":\"      post: 410429569258816445970930282571360n,\",\"line\":67,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":835,\"length\":0,\"text\":\"      pre: 410429569258817445970930282571360n,\",\"line\":68,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":836,\"length\":0,\"text\":\"    },\",\"line\":69,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":837,\"length\":0,\"text\":\"  }\",\"line\":70,\"character\":0},{\"type\":\"tag\",\"name\":\"log\",\"start\":838,\"length\":0,\"text\":\"]\",\"line\":72,\"character\":0}]}}"
