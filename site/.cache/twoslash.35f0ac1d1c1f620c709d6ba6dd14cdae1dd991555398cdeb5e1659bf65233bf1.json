"{\"value\":{\"code\":\"import { account, walletClient, publicClient } from './client'\\nimport { domain, types } from './data'\\n\\nconst message = {\\n  from: {\\n    name: 'Cow',\\n    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n  },\\n  to: {\\n    name: 'Bob',\\n    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n  },\\n  contents: 'Hello, Bob!',\\n}\\n\\nconst signature = await walletClient.signTypedData({\\n  account,\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n})\\n// [!code focus:99]\\nconst valid = await publicClient.verifyTypedData({\\n  address: account.address,\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n  signature,\\n})\\n// true\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":32,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(alias) const domain: {\\n    readonly name: \\\"Ether Mail\\\";\\n    readonly version: \\\"1\\\";\\n    readonly chainId: 1;\\n    readonly verifyingContract: \\\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\\\";\\n}\\nimport domain\",\"start\":72,\"length\":6,\"target\":\"domain\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const types: {\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}\\nimport types\",\"start\":80,\"length\":5,\"target\":\"types\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const message: {\\n    from: {\\n        name: string;\\n        wallet: string;\\n    };\\n    to: {\\n        name: string;\\n        wallet: string;\\n    };\\n    contents: string;\\n}\",\"start\":109,\"length\":7,\"target\":\"message\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) from: {\\n    name: string;\\n    wallet: string;\\n}\",\"start\":123,\"length\":4,\"target\":\"from\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: string\",\"start\":135,\"length\":4,\"target\":\"name\",\"line\":5,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) wallet: string\",\"start\":152,\"length\":6,\"target\":\"wallet\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) to: {\\n    name: string;\\n    wallet: string;\\n}\",\"start\":213,\"length\":2,\"target\":\"to\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: string\",\"start\":223,\"length\":4,\"target\":\"name\",\"line\":9,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) wallet: string\",\"start\":240,\"length\":6,\"target\":\"wallet\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) contents: string\",\"start\":301,\"length\":8,\"target\":\"contents\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":335,\"length\":9,\"target\":\"signature\",\"line\":15,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":353,\"length\":12,\"target\":\"walletClient\",\"line\":15,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signTypedData: <{\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}, \\\"Mail\\\">(args: SignTypedDataParameters<...>) => Promise<SignTypedDataReturnType>\",\"docs\":\"Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signTypedData\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"args - {@link SignTypedDataParameters}\"],[\"returns\",\"The signed data. {@link SignTypedDataReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signTypedData({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  domain: {\\n    name: 'Ether Mail',\\n    version: '1',\\n    chainId: 1,\\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n  },\\n  types: {\\n    Person: [\\n      { name: 'name', type: 'string' },\\n      { name: 'wallet', type: 'address' },\\n    ],\\n    Mail: [\\n      { name: 'from', type: 'Person' },\\n      { name: 'to', type: 'Person' },\\n      { name: 'contents', type: 'string' },\\n    ],\\n  },\\n  primaryType: 'Mail',\\n  message: {\\n    from: {\\n      name: 'Cow',\\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n    },\\n    to: {\\n      name: 'Bob',\\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n    },\\n    contents: 'Hello, Bob!',\\n  },\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signTypedData({\\n  domain: {\\n    name: 'Ether Mail',\\n    version: '1',\\n    chainId: 1,\\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n  },\\n  types: {\\n    Person: [\\n      { name: 'name', type: 'string' },\\n      { name: 'wallet', type: 'address' },\\n    ],\\n    Mail: [\\n      { name: 'from', type: 'Person' },\\n      { name: 'to', type: 'Person' },\\n      { name: 'contents', type: 'string' },\\n    ],\\n  },\\n  primaryType: 'Mail',\\n  message: {\\n    from: {\\n      name: 'Cow',\\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n    },\\n    to: {\\n      name: 'Bob',\\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n    },\\n    contents: 'Hello, Bob!',\\n  },\\n})\"]],\"start\":366,\"length\":13,\"target\":\"signTypedData\",\"line\":15,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":384,\"length\":7,\"target\":\"account\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) domain?: {\\n    chainId?: number | bigint | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    salt?: `0x${string}` | undefined;\\n    verifyingContract?: `0x${string}` | undefined;\\n    version?: string | undefined | undefined;\\n} | undefined\",\"start\":395,\"length\":6,\"target\":\"domain\",\"line\":17,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) types: {\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}\",\"start\":405,\"length\":5,\"target\":\"types\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) primaryType: \\\"Person\\\" | \\\"Mail\\\"\",\"start\":414,\"length\":11,\"target\":\"primaryType\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: {\\n    from: {\\n        name: string;\\n        wallet: `0x${string}`;\\n    };\\n    to: {\\n        name: string;\\n        wallet: `0x${string}`;\\n    };\\n    contents: string;\\n}\",\"start\":437,\"length\":7,\"target\":\"message\",\"line\":20,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":475,\"length\":5,\"target\":\"valid\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":489,\"length\":12,\"target\":\"publicClient\",\"line\":23,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) verifyTypedData: (args: VerifyTypedDataParameters) => Promise<VerifyTypedDataReturnType>\",\"docs\":\"Verify that typed data was signed by the provided address.\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/actions/public/verifyTypedData\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyTypedDataParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\"]],\"start\":502,\"length\":15,\"target\":\"verifyTypedData\",\"line\":23,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the original message.\\n\\n\\nThe address to verify the typed data for.\",\"start\":522,\"length\":7,\"target\":\"address\",\"line\":24,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":531,\"length\":7,\"target\":\"account\",\"line\":24,\"character\":11},{\"type\":\"hover\",\"text\":\"any\",\"start\":539,\"length\":7,\"target\":\"address\",\"line\":24,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) domain?: {\\n    chainId?: number | bigint | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    salt?: `0x${string}` | undefined;\\n    verifyingContract?: `0x${string}` | undefined;\\n    version?: string | undefined | undefined;\\n} | undefined\",\"start\":550,\"length\":6,\"target\":\"domain\",\"line\":25,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) types: {\\n    [x: string]: readonly TypedDataParameter[];\\n    [x: `string[${string}]`]: undefined;\\n    [x: `function[${string}]`]: undefined;\\n    [x: `address[${string}]`]: undefined;\\n    [x: `bool[${string}]`]: undefined;\\n    [x: `bytes[${string}]`]: undefined;\\n    [x: `bytes1[${string}]`]: undefined;\\n    [x: `bytes2[${string}]`]: undefined;\\n    [x: `bytes23[${string}]`]: undefined;\\n    [x: `bytes6[${string}]`]: undefined;\\n    [x: `bytes3[${string}]`]: undefined;\\n    [x: `bytes4[${string}]`]: undefined;\\n    [x: `bytes5[${string}]`]: undefined;\\n    [x: `bytes7[${string}]`]: undefined;\\n    [x: `bytes8[${string}]`]: undefined;\\n    [x: `bytes9[${string}]`]: undefined;\\n    [x: `bytes10[${string}]`]: undefined;\\n    [x: `bytes11[${string}]`]: undefined;\\n    [x: `bytes12[${string}]`]: undefined;\\n    [x: `bytes13[${string}]`]: undefined;\\n    [x: `bytes14[${string}]`]: undefined;\\n    [x: `bytes15[${string}]`]: undefined;\\n    [x: `bytes16[${string}]`]: undefined;\\n    [x: `bytes17[${string}]`]: undefined;\\n    [x: `bytes18[${string}]`]: undefined;\\n    [x: `bytes19[${string}]`]: undefined;\\n    [x: `bytes20[${string}]`]: undefined;\\n    [x: `bytes21[${string}]`]: undefined;\\n    [x: `bytes22[${string}]`]: undefined;\\n    [x: `bytes24[${string}]`]: undefined;\\n    [x: `bytes25[${string}]`]: undefined;\\n    [x: `bytes26[${string}]`]: undefined;\\n    [x: `bytes27[${string}]`]: undefined;\\n    [x: `bytes28[${string}]`]: undefined;\\n    [x: `bytes29[${string}]`]: undefined;\\n    [x: `bytes30[${string}]`]: undefined;\\n    [x: `bytes31[${string}]`]: undefined;\\n    [x: `bytes32[${string}]`]: undefined;\\n    [x: `int[${ ...\",\"start\":560,\"length\":5,\"target\":\"types\",\"line\":26,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) primaryType: string\",\"start\":569,\"length\":11,\"target\":\"primaryType\",\"line\":27,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: Record<string, unknown>\",\"start\":592,\"length\":7,\"target\":\"message\",\"line\":28,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | Signature\",\"docs\":\"The signature that was generated by signing the message with the address's private key.\\n\\n\\nThe signature to verify\",\"start\":603,\"length\":9,\"target\":\"signature\",\"line\":29,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,1083]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"â†“ JSON-RPC Account\",\"start\":355,\"end\":383},{\"type\":\"tag\",\"name\":\"log\",\"value\":\"â†“ Local Account\",\"start\":443,\"end\":468}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport 'viem/window'\\n// ---cut---\\nimport { createPublicClient, createWalletClient, custom, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\\nexport const walletClient = createWalletClient({\\n  transport: custom(window.ethereum!)\\n})\\n\\n// @log: â†“ JSON-RPC Account\\nexport const [account] = await walletClient.getAddresses()\\n\\n// @log: â†“ Local Account\\n\\n// export const account = privateKeyToAccount(...)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":520,\"filename\":\"data.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/data.ts\",\"content\":\"// @filename: data.ts\\n\\n// All properties on a domain are optional\\nexport const domain = {\\n  name: 'Ether Mail',\\n  version: '1',\\n  chainId: 1,\\n  verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n} as const\\n\\n// The named list of all type definitions\\nexport const types = {\\n  Person: [\\n    { name: 'name', type: 'string' },\\n    { name: 'wallet', type: 'address' },\\n  ],\\n  Mail: [\\n    { name: 'from', type: 'Person' },\\n    { name: 'to', type: 'Person' },\\n    { name: 'contents', type: 'string' },\\n  ],\\n} as const\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1044,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { account, walletClient, publicClient } from './client'\\nimport { domain, types } from './data'\\n\\nconst message = {\\n  from: {\\n    name: 'Cow',\\n    wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n  },\\n  to: {\\n    name: 'Bob',\\n    wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n  },\\n  contents: 'Hello, Bob!',\\n}\\n\\nconst signature = await walletClient.signTypedData({\\n  account,\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n})\\n// [!code focus:99]\\nconst valid = await publicClient.verifyTypedData({\\n  address: account.address,\\n  domain,\\n  types,\\n  primaryType: 'Mail',\\n  message,\\n  signature,\\n})\\n// true\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":18,\"length\":12,\"target\":\"walletClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":32,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(alias) const domain: {\\n    readonly name: \\\"Ether Mail\\\";\\n    readonly version: \\\"1\\\";\\n    readonly chainId: 1;\\n    readonly verifyingContract: \\\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\\\";\\n}\\nimport domain\",\"start\":72,\"length\":6,\"target\":\"domain\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const types: {\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}\\nimport types\",\"start\":80,\"length\":5,\"target\":\"types\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const message: {\\n    from: {\\n        name: string;\\n        wallet: string;\\n    };\\n    to: {\\n        name: string;\\n        wallet: string;\\n    };\\n    contents: string;\\n}\",\"start\":109,\"length\":7,\"target\":\"message\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) from: {\\n    name: string;\\n    wallet: string;\\n}\",\"start\":123,\"length\":4,\"target\":\"from\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: string\",\"start\":135,\"length\":4,\"target\":\"name\",\"line\":5,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) wallet: string\",\"start\":152,\"length\":6,\"target\":\"wallet\",\"line\":6,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) to: {\\n    name: string;\\n    wallet: string;\\n}\",\"start\":213,\"length\":2,\"target\":\"to\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) name: string\",\"start\":223,\"length\":4,\"target\":\"name\",\"line\":9,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) wallet: string\",\"start\":240,\"length\":6,\"target\":\"wallet\",\"line\":10,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) contents: string\",\"start\":301,\"length\":8,\"target\":\"contents\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":335,\"length\":9,\"target\":\"signature\",\"line\":15,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 26 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport walletClient\",\"start\":353,\"length\":12,\"target\":\"walletClient\",\"line\":15,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signTypedData: <{\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}, \\\"Mail\\\">(args: SignTypedDataParameters<...>) => Promise<SignTypedDataReturnType>\",\"docs\":\"Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message) + message))`.\\n\\n- Docs: https://viem.sh/docs/actions/wallet/signTypedData\\n- JSON-RPC Methods:\\n  - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\\n  - Local Accounts: Signs locally. No JSON-RPC request.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"args - {@link SignTypedDataParameters}\"],[\"returns\",\"The signed data. {@link SignTypedDataReturnType}\"],[\"example\",\"import { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst signature = await client.signTypedData({\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n  domain: {\\n    name: 'Ether Mail',\\n    version: '1',\\n    chainId: 1,\\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n  },\\n  types: {\\n    Person: [\\n      { name: 'name', type: 'string' },\\n      { name: 'wallet', type: 'address' },\\n    ],\\n    Mail: [\\n      { name: 'from', type: 'Person' },\\n      { name: 'to', type: 'Person' },\\n      { name: 'contents', type: 'string' },\\n    ],\\n  },\\n  primaryType: 'Mail',\\n  message: {\\n    from: {\\n      name: 'Cow',\\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n    },\\n    to: {\\n      name: 'Bob',\\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n    },\\n    contents: 'Hello, Bob!',\\n  },\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createWalletClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0xâ€¦'),\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst signature = await client.signTypedData({\\n  domain: {\\n    name: 'Ether Mail',\\n    version: '1',\\n    chainId: 1,\\n    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\\n  },\\n  types: {\\n    Person: [\\n      { name: 'name', type: 'string' },\\n      { name: 'wallet', type: 'address' },\\n    ],\\n    Mail: [\\n      { name: 'from', type: 'Person' },\\n      { name: 'to', type: 'Person' },\\n      { name: 'contents', type: 'string' },\\n    ],\\n  },\\n  primaryType: 'Mail',\\n  message: {\\n    from: {\\n      name: 'Cow',\\n      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\\n    },\\n    to: {\\n      name: 'Bob',\\n      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\\n    },\\n    contents: 'Hello, Bob!',\\n  },\\n})\"]],\"start\":366,\"length\":13,\"target\":\"signTypedData\",\"line\":15,\"character\":37},{\"type\":\"hover\",\"text\":\"(property) account: `0x${string}` | Account\",\"start\":384,\"length\":7,\"target\":\"account\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) domain?: {\\n    chainId?: number | bigint | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    salt?: `0x${string}` | undefined;\\n    verifyingContract?: `0x${string}` | undefined;\\n    version?: string | undefined | undefined;\\n} | undefined\",\"start\":395,\"length\":6,\"target\":\"domain\",\"line\":17,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) types: {\\n    readonly Person: readonly [{\\n        readonly name: \\\"name\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"wallet\\\";\\n        readonly type: \\\"address\\\";\\n    }];\\n    readonly Mail: readonly [{\\n        readonly name: \\\"from\\\";\\n        readonly type: \\\"Person\\\";\\n    }, {\\n        ...;\\n    }, {\\n        ...;\\n    }];\\n}\",\"start\":405,\"length\":5,\"target\":\"types\",\"line\":18,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) primaryType: \\\"Person\\\" | \\\"Mail\\\"\",\"start\":414,\"length\":11,\"target\":\"primaryType\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: {\\n    from: {\\n        name: string;\\n        wallet: `0x${string}`;\\n    };\\n    to: {\\n        name: string;\\n        wallet: `0x${string}`;\\n    };\\n    contents: string;\\n}\",\"start\":437,\"length\":7,\"target\":\"message\",\"line\":20,\"character\":2},{\"type\":\"hover\",\"text\":\"const valid: boolean\",\"start\":475,\"length\":5,\"target\":\"valid\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":489,\"length\":12,\"target\":\"publicClient\",\"line\":23,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) verifyTypedData: (args: VerifyTypedDataParameters) => Promise<VerifyTypedDataReturnType>\",\"docs\":\"Verify that typed data was signed by the provided address.\\n\\n- Docs \\n{@link \\nhttps://viem.sh/docs/actions/public/verifyTypedData\\n}\",\"tags\":[[\"param\",\"parameters - {@link VerifyTypedDataParameters}\"],[\"returns\",\"Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\"]],\"start\":502,\"length\":15,\"target\":\"verifyTypedData\",\"line\":23,\"character\":33},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"docs\":\"The address that signed the original message.\\n\\n\\nThe address to verify the typed data for.\",\"start\":522,\"length\":7,\"target\":\"address\",\"line\":24,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: `0x${string}`\\nimport account\",\"start\":531,\"length\":7,\"target\":\"account\",\"line\":24,\"character\":11},{\"type\":\"hover\",\"text\":\"any\",\"start\":539,\"length\":7,\"target\":\"address\",\"line\":24,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) domain?: {\\n    chainId?: number | bigint | undefined | undefined;\\n    name?: string | undefined | undefined;\\n    salt?: `0x${string}` | undefined;\\n    verifyingContract?: `0x${string}` | undefined;\\n    version?: string | undefined | undefined;\\n} | undefined\",\"start\":550,\"length\":6,\"target\":\"domain\",\"line\":25,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) types: {\\n    [x: string]: readonly TypedDataParameter[];\\n    [x: `string[${string}]`]: undefined;\\n    [x: `function[${string}]`]: undefined;\\n    [x: `address[${string}]`]: undefined;\\n    [x: `bool[${string}]`]: undefined;\\n    [x: `bytes[${string}]`]: undefined;\\n    [x: `bytes1[${string}]`]: undefined;\\n    [x: `bytes2[${string}]`]: undefined;\\n    [x: `bytes23[${string}]`]: undefined;\\n    [x: `bytes6[${string}]`]: undefined;\\n    [x: `bytes3[${string}]`]: undefined;\\n    [x: `bytes4[${string}]`]: undefined;\\n    [x: `bytes5[${string}]`]: undefined;\\n    [x: `bytes7[${string}]`]: undefined;\\n    [x: `bytes8[${string}]`]: undefined;\\n    [x: `bytes9[${string}]`]: undefined;\\n    [x: `bytes10[${string}]`]: undefined;\\n    [x: `bytes11[${string}]`]: undefined;\\n    [x: `bytes12[${string}]`]: undefined;\\n    [x: `bytes13[${string}]`]: undefined;\\n    [x: `bytes14[${string}]`]: undefined;\\n    [x: `bytes15[${string}]`]: undefined;\\n    [x: `bytes16[${string}]`]: undefined;\\n    [x: `bytes17[${string}]`]: undefined;\\n    [x: `bytes18[${string}]`]: undefined;\\n    [x: `bytes19[${string}]`]: undefined;\\n    [x: `bytes20[${string}]`]: undefined;\\n    [x: `bytes21[${string}]`]: undefined;\\n    [x: `bytes22[${string}]`]: undefined;\\n    [x: `bytes24[${string}]`]: undefined;\\n    [x: `bytes25[${string}]`]: undefined;\\n    [x: `bytes26[${string}]`]: undefined;\\n    [x: `bytes27[${string}]`]: undefined;\\n    [x: `bytes28[${string}]`]: undefined;\\n    [x: `bytes29[${string}]`]: undefined;\\n    [x: `bytes30[${string}]`]: undefined;\\n    [x: `bytes31[${string}]`]: undefined;\\n    [x: `bytes32[${string}]`]: undefined;\\n    [x: `int[${ ...\",\"start\":560,\"length\":5,\"target\":\"types\",\"line\":26,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) primaryType: string\",\"start\":569,\"length\":11,\"target\":\"primaryType\",\"line\":27,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) message: Record<string, unknown>\",\"start\":592,\"length\":7,\"target\":\"message\",\"line\":28,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) signature: `0x${string}` | ByteArray | Signature\",\"docs\":\"The signature that was generated by signing the message with the address's private key.\\n\\n\\nThe signature to verify\",\"start\":603,\"length\":9,\"target\":\"signature\",\"line\":29,\"character\":2}],\"tags\":[]}}"
