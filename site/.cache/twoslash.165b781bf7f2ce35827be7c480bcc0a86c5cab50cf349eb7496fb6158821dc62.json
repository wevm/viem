"{\"value\":{\"code\":\"import { blobsToCommitments, blobsToProofs, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x...' }) // [!code focus]\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n\\nconst proofs = blobsToProofs({ \\n  blobs, // [!code focus]\\n  commitments, \\n  kzg \\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":9,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function blobsToProofs<const blobs extends readonly ByteArray[] | readonly Hex[], const commitments extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: blobsToProofsParameters<blobs, commitments, to>): blobsToProofsReturnType<to>\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":29,\"length\":13,\"target\":\"blobsToProofs\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":44,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":44},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":75,\"length\":3,\"target\":\"kzg\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":101,\"length\":5,\"target\":\"blobs\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x...\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x...\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":109,\"length\":7,\"target\":\"toBlobs\",\"line\":3,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":119,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":24},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":159,\"length\":11,\"target\":\"commitments\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":173,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":194,\"length\":5,\"target\":\"blobs\",\"line\":4,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":201,\"length\":3,\"target\":\"kzg\",\"line\":4,\"character\":48},{\"type\":\"hover\",\"text\":\"const proofs: `0x${string}`[]\",\"start\":215,\"length\":6,\"target\":\"proofs\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToProofs<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\">(parameters: blobsToProofsParameters<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): `0x${string}`[]\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":224,\"length\":13,\"target\":\"blobsToProofs\",\"line\":6,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into proofs.\",\"start\":243,\"length\":5,\"target\":\"blobs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly `0x${string}`[]\",\"docs\":\"Commitments for the blobs.\",\"start\":269,\"length\":11,\"target\":\"commitments\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"computeBlobKzgProof\\\">\",\"docs\":\"KZG implementation.\",\"start\":285,\"length\":3,\"target\":\"kzg\",\"line\":9,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,195]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":22,\"end\":35}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"kzg.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/kzg.ts\",\"content\":\"// @filename: kzg.ts\\n\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { setupKzg } from 'viem'\\n\\nexport const kzg = setupKzg('./trusted-setup.json', cKzg)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":156,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { blobsToCommitments, blobsToProofs, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x...' }) // [!code focus]\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n\\nconst proofs = blobsToProofs({ \\n  blobs, // [!code focus]\\n  commitments, \\n  kzg \\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function blobsToCommitments<const blobs extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: BlobsToCommitmentsParameters<blobs, to>): BlobsToCommitmentsReturnType<to>\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":9,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function blobsToProofs<const blobs extends readonly ByteArray[] | readonly Hex[], const commitments extends readonly ByteArray[] | readonly Hex[], to extends To = (blobs extends readonly `0x${string}`[] ? \\\"hex\\\" : never) | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: blobsToProofsParameters<blobs, commitments, to>): blobsToProofsReturnType<to>\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":29,\"length\":13,\"target\":\"blobsToProofs\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function toBlobs<const data extends Hex | ByteArray, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | (data extends ByteArray ? \\\"bytes\\\" : never)>(parameters: ToBlobsParameters<data, to>): ToBlobsReturnType<to>\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":44,\"length\":7,\"target\":\"toBlobs\",\"line\":0,\"character\":44},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":75,\"length\":3,\"target\":\"kzg\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const blobs: readonly `0x${string}`[]\",\"start\":101,\"length\":5,\"target\":\"blobs\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobs<\\\"0x...\\\", \\\"hex\\\">(parameters: ToBlobsParameters<\\\"0x...\\\", \\\"hex\\\">): readonly `0x${string}`[]\\nimport toBlobs\",\"docs\":\"Transforms arbitrary data to blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobs, stringToHex } from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\n```\"]],\"start\":109,\"length\":7,\"target\":\"toBlobs\",\"line\":3,\"character\":14},{\"type\":\"hover\",\"text\":\"(property) data: ByteArray | `0x${string}`\",\"docs\":\"Data to transform to a blob.\",\"start\":119,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":24},{\"type\":\"hover\",\"text\":\"const commitments: readonly `0x${string}`[]\",\"start\":159,\"length\":11,\"target\":\"commitments\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToCommitments<readonly `0x${string}`[], \\\"hex\\\">(parameters: BlobsToCommitmentsParameters<readonly `0x${string}`[], \\\"hex\\\">): readonly `0x${string}`[]\\nimport blobsToCommitments\",\"docs\":\"Compute commitments from a list of blobs.\",\"tags\":[[\"example\",\"```ts\\nimport { blobsToCommitments, toBlobs } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\n```\"]],\"start\":173,\"length\":18,\"target\":\"blobsToCommitments\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly ByteArray[] | readonly `0x${string}`[] | readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into commitments.\",\"start\":194,\"length\":5,\"target\":\"blobs\",\"line\":4,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"blobToKzgCommitment\\\">\",\"docs\":\"KZG implementation.\",\"start\":201,\"length\":3,\"target\":\"kzg\",\"line\":4,\"character\":48},{\"type\":\"hover\",\"text\":\"const proofs: `0x${string}`[]\",\"start\":215,\"length\":6,\"target\":\"proofs\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) blobsToProofs<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\">(parameters: blobsToProofsParameters<readonly `0x${string}`[], readonly `0x${string}`[], \\\"hex\\\", readonly `0x${string}`[]>): `0x${string}`[]\\nimport blobsToProofs\",\"docs\":\"Compute the proofs for a list of blobs and their commitments.\",\"tags\":[[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs\\n} from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst blobs = toBlobs({ data: '0x1234' })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n```\"]],\"start\":224,\"length\":13,\"target\":\"blobsToProofs\",\"line\":6,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) blobs: readonly `0x${string}`[]\",\"docs\":\"Blobs to transform into proofs.\",\"start\":243,\"length\":5,\"target\":\"blobs\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) commitments: readonly `0x${string}`[]\",\"docs\":\"Commitments for the blobs.\",\"start\":269,\"length\":11,\"target\":\"commitments\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) kzg: Pick<Kzg, \\\"computeBlobKzgProof\\\">\",\"docs\":\"KZG implementation.\",\"start\":285,\"length\":3,\"target\":\"kzg\",\"line\":9,\"character\":2}],\"tags\":[]}}"
