"{\"value\":{\"code\":\"import { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\\n\\nconst versionedHashes = sidecarsToVersionedHashes({ \\n  sidecars,\\n  to: 'bytes', // [!code focus]\\n})\\nversionedHashes  // [!code focus]\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":9,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function sidecarsToVersionedHashes<const sidecars extends BlobSidecars, to extends To = (sidecars extends BlobSidecars<`0x${string}`> ? \\\"hex\\\" : never) | (sidecars extends BlobSidecars<...> ? \\\"bytes\\\" : never)>(parameters: SidecarsToVersionedHashesParameters<sidecars, to>): SidecarsToVersionedHashesReturnType<to>\\nimport sidecarsToVersionedHashes\",\"docs\":\"Transforms a list of sidecars to their versioned hashes.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\nconst versionedHashes = sidecarsToVersionedHashes({ sidecars })\\n```\"]],\"start\":25,\"length\":25,\"target\":\"sidecarsToVersionedHashes\",\"line\":0,\"character\":25},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":74,\"length\":3,\"target\":\"kzg\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const sidecars: BlobSidecars<`0x${string}`>\",\"start\":100,\"length\":8,\"target\":\"sidecars\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobSidecars<\\\"0x...\\\", undefined, \\\"hex\\\">(parameters: ToBlobSidecarsParameters<\\\"0x...\\\", undefined, \\\"hex\\\", never>): BlobSidecars<`0x${string}`>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":111,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":3,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}` | ByteArray\",\"docs\":\"Data to transform into blobs.\",\"start\":128,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) kzg: Kzg\",\"docs\":\"KZG implementation.\",\"start\":143,\"length\":3,\"target\":\"kzg\",\"line\":3,\"character\":49},{\"type\":\"hover\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":157,\"length\":15,\"target\":\"versionedHashes\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) sidecarsToVersionedHashes<BlobSidecars<`0x${string}`>, \\\"bytes\\\">(parameters: SidecarsToVersionedHashesParameters<BlobSidecars<`0x${string}`>, \\\"bytes\\\">): readonly ByteArray[]\\nimport sidecarsToVersionedHashes\",\"docs\":\"Transforms a list of sidecars to their versioned hashes.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\nconst versionedHashes = sidecarsToVersionedHashes({ sidecars })\\n```\"]],\"start\":175,\"length\":25,\"target\":\"sidecarsToVersionedHashes\",\"line\":5,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) sidecars: BlobSidecars | BlobSidecars<`0x${string}`>\",\"docs\":\"Sidecars from blobs.\",\"start\":206,\"length\":8,\"target\":\"sidecars\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to?: To | undefined\",\"docs\":\"Return type.\",\"start\":218,\"length\":2,\"target\":\"to\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":251,\"length\":15,\"target\":\"versionedHashes\",\"line\":9,\"character\":0},{\"type\":\"query\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":251,\"length\":15,\"target\":\"versionedHashes\",\"line\":9,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[533,539],[0,248]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":22,\"end\":35}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"kzg.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/kzg.ts\",\"content\":\"// @filename: kzg.ts\\n\\n// @noErrors\\nimport * as cKzg from 'c-kzg'\\nimport { setupKzg } from 'viem'\\nimport { mainnetTrustedSetupPath } from 'viem/node'\\n\\nexport const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":209,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { toBlobSidecars, sidecarsToVersionedHashes } from 'viem'\\nimport { kzg } from './kzg'\\n\\nconst sidecars = toBlobSidecars({ data: '0x...', kzg })\\n\\nconst versionedHashes = sidecarsToVersionedHashes({ \\n  sidecars,\\n  to: 'bytes', // [!code focus]\\n})\\nversionedHashes  // [!code focus]\\n// ^?\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[502],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[{\"type\":\"query\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":251,\"length\":15,\"target\":\"versionedHashes\",\"line\":9,\"character\":0}],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":9,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function sidecarsToVersionedHashes<const sidecars extends BlobSidecars, to extends To = (sidecars extends BlobSidecars<`0x${string}`> ? \\\"hex\\\" : never) | (sidecars extends BlobSidecars<...> ? \\\"bytes\\\" : never)>(parameters: SidecarsToVersionedHashesParameters<sidecars, to>): SidecarsToVersionedHashesReturnType<to>\\nimport sidecarsToVersionedHashes\",\"docs\":\"Transforms a list of sidecars to their versioned hashes.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\nconst versionedHashes = sidecarsToVersionedHashes({ sidecars })\\n```\"]],\"start\":25,\"length\":25,\"target\":\"sidecarsToVersionedHashes\",\"line\":0,\"character\":25},{\"type\":\"hover\",\"text\":\"(alias) const kzg: Kzg\\nimport kzg\",\"start\":74,\"length\":3,\"target\":\"kzg\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const sidecars: BlobSidecars<`0x${string}`>\",\"start\":100,\"length\":8,\"target\":\"sidecars\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toBlobSidecars<\\\"0x...\\\", undefined, \\\"hex\\\">(parameters: ToBlobSidecarsParameters<\\\"0x...\\\", undefined, \\\"hex\\\", never>): BlobSidecars<`0x${string}`>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":111,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":3,\"character\":17},{\"type\":\"hover\",\"text\":\"(property) data: `0x${string}` | ByteArray\",\"docs\":\"Data to transform into blobs.\",\"start\":128,\"length\":4,\"target\":\"data\",\"line\":3,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) kzg: Kzg\",\"docs\":\"KZG implementation.\",\"start\":143,\"length\":3,\"target\":\"kzg\",\"line\":3,\"character\":49},{\"type\":\"hover\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":157,\"length\":15,\"target\":\"versionedHashes\",\"line\":5,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) sidecarsToVersionedHashes<BlobSidecars<`0x${string}`>, \\\"bytes\\\">(parameters: SidecarsToVersionedHashesParameters<BlobSidecars<`0x${string}`>, \\\"bytes\\\">): readonly ByteArray[]\\nimport sidecarsToVersionedHashes\",\"docs\":\"Transforms a list of sidecars to their versioned hashes.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\nconst versionedHashes = sidecarsToVersionedHashes({ sidecars })\\n```\"]],\"start\":175,\"length\":25,\"target\":\"sidecarsToVersionedHashes\",\"line\":5,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) sidecars: BlobSidecars | BlobSidecars<`0x${string}`>\",\"docs\":\"Sidecars from blobs.\",\"start\":206,\"length\":8,\"target\":\"sidecars\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) to?: To | undefined\",\"docs\":\"Return type.\",\"start\":218,\"length\":2,\"target\":\"to\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"const versionedHashes: readonly ByteArray[]\",\"start\":251,\"length\":15,\"target\":\"versionedHashes\",\"line\":9,\"character\":0}],\"tags\":[]}}"
