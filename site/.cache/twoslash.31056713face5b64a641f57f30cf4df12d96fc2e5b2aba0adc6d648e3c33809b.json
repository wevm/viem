"{\"value\":{\"code\":\"import { account, publicClient } from './config'\\nimport { abi, address } from './contract'\\n\\n// Allowance slot: A 32 bytes hex string representing the allowance slot of the sender.\\nconst allowanceSlot = '0x....'\\n\\n// Max allowance: A 32 bytes hex string representing the maximum allowance (2^256 - 1)\\nconst maxAllowance = numberToHex(maxUint256)\\n\\nconst { result } = await publicClient.simulateContract({\\n  abi,\\n  address,\\n  account,\\n  functionName: 'transferFrom',\\n  args: [\\n    '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', \\n    account.address, \\n    69420n\\n  ],\\n  stateOverride: [ // [!code hl]\\n    { // [!code hl]\\n      // modifying the state of the token contract // [!code hl]\\n      address, // [!code hl]\\n      stateDiff: [ // [!code hl]\\n        { // [!code hl]\\n          slot: allowanceSlot, // [!code hl]\\n          value: maxAllowance, // [!code hl]\\n        }, // [!code hl]\\n      ], // [!code hl]\\n    }, // [!code hl]\\n  ], // [!code hl]\\n})\\n\\nconsole.log(result)\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":18,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}]\\nimport abi\",\"start\":58,\"length\":3,\"target\":\"abi\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const address: \\\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\\"\\nimport address\",\"start\":63,\"length\":7,\"target\":\"address\",\"line\":1,\"character\":14},{\"type\":\"hover\",\"text\":\"const allowanceSlot: \\\"0x....\\\"\",\"start\":186,\"length\":13,\"target\":\"allowanceSlot\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"const maxAllowance: any\",\"start\":305,\"length\":12,\"target\":\"maxAllowance\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"any\",\"start\":320,\"length\":11,\"target\":\"numberToHex\",\"line\":7,\"character\":21},{\"type\":\"hover\",\"text\":\"any\",\"start\":332,\"length\":10,\"target\":\"maxUint256\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"const result: boolean\",\"start\":353,\"length\":6,\"target\":\"result\",\"line\":9,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":370,\"length\":12,\"target\":\"publicClient\",\"line\":9,\"character\":25},{\"type\":\"hover\",\"text\":\"(property) simulateContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}], \\\"transferFrom\\\", readonly [...], Chain | undefined, {\\n    ...;\\n}>(args: SimulateContractParameters<...>) => Promise<...>\",\"docs\":\"Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\\n\\n- Docs: https://viem.sh/docs/contract/simulateContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\",\"tags\":[[\"remarks\",\"This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link SimulateContractParameters}\"],[\"returns\",\"The simulation result and write request. {@link SimulateContractReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32) view returns (uint32)']),\\n  functionName: 'mint',\\n  args: ['69420'],\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":383,\"length\":16,\"target\":\"simulateContract\",\"line\":9,\"character\":38},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":404,\"length\":3,\"target\":\"abi\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":411,\"length\":7,\"target\":\"address\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) account?: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | null | undefined\",\"start\":422,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"transferFrom\\\"\",\"start\":433,\"length\":12,\"target\":\"functionName\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: [\\\"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\\\", `0x${string}`, bigint]\",\"start\":465,\"length\":4,\"target\":\"args\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":528,\"length\":7,\"target\":\"account\",\"line\":16,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":536,\"length\":7,\"target\":\"address\",\"line\":16,\"character\":12},{\"type\":\"hover\",\"text\":\"(property) stateOverride: {\\n    address: \\\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\\";\\n    stateDiff: {\\n        slot: \\\"0x....\\\";\\n        value: any;\\n    }[];\\n}[]\",\"start\":564,\"length\":13,\"target\":\"stateOverride\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":686,\"length\":7,\"target\":\"address\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) stateDiff?: StateMapping | undefined\",\"docs\":\"Fake key-value mapping to override individual slots in the account storage before executing the call.\",\"start\":715,\"length\":9,\"target\":\"stateDiff\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) slot: `0x${string}`\",\"start\":776,\"length\":4,\"target\":\"slot\",\"line\":25,\"character\":10},{\"type\":\"hover\",\"text\":\"const allowanceSlot: \\\"0x....\\\"\",\"start\":782,\"length\":13,\"target\":\"allowanceSlot\",\"line\":25,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) value: `0x${string}`\",\"start\":821,\"length\":5,\"target\":\"value\",\"line\":26,\"character\":10},{\"type\":\"hover\",\"text\":\"const maxAllowance: any\",\"start\":828,\"length\":12,\"target\":\"maxAllowance\",\"line\":26,\"character\":17},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":948,\"length\":7,\"target\":\"console\",\"line\":33,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":956,\"length\":3,\"target\":\"log\",\"line\":33,\"character\":8},{\"type\":\"hover\",\"text\":\"const result: boolean\",\"start\":960,\"length\":6,\"target\":\"result\",\"line\":33,\"character\":12},{\"type\":\"tag\",\"name\":\"log\",\"start\":968,\"length\":0,\"text\":\"Output: true\",\"line\":35,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[1824,1846],[0,856]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: true\",\"start\":1824,\"end\":1846}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createPublicClient, custom, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const account = privateKeyToAccount('0x...')\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":315,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const address = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'\\n\\nexport const abi = [\\n  {\\n    type: 'function',\\n    name: 'transferFrom',\\n    stateMutability: 'nonpayable',\\n    inputs: [\\n      {\\n        name: 'sender',\\n        type: 'address',\\n      },\\n      {\\n        name: 'recipient',\\n        type: 'address',\\n      },\\n      {\\n        name: 'amount',\\n        type: 'uint256',\\n      },\\n    ],\\n    outputs: [\\n      {\\n        type: 'bool',\\n      },\\n    ],\\n  },\\n] as const\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":817,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { account, publicClient } from './config'\\nimport { abi, address } from './contract'\\n\\n// Allowance slot: A 32 bytes hex string representing the allowance slot of the sender.\\nconst allowanceSlot = '0x....'\\n\\n// Max allowance: A 32 bytes hex string representing the maximum allowance (2^256 - 1)\\nconst maxAllowance = numberToHex(maxUint256)\\n\\nconst { result } = await publicClient.simulateContract({\\n  abi,\\n  address,\\n  account,\\n  functionName: 'transferFrom',\\n  args: [\\n    '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', \\n    account.address, \\n    69420n\\n  ],\\n  stateOverride: [ // [!code hl]\\n    { // [!code hl]\\n      // modifying the state of the token contract // [!code hl]\\n      address, // [!code hl]\\n      stateDiff: [ // [!code hl]\\n        { // [!code hl]\\n          slot: allowanceSlot, // [!code hl]\\n          value: maxAllowance, // [!code hl]\\n        }, // [!code hl]\\n      ], // [!code hl]\\n    }, // [!code hl]\\n  ], // [!code hl]\\n})\\n\\nconsole.log(result)\\n// @log: Output: true\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":9,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":18,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":18},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}]\\nimport abi\",\"start\":58,\"length\":3,\"target\":\"abi\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const address: \\\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\\"\\nimport address\",\"start\":63,\"length\":7,\"target\":\"address\",\"line\":1,\"character\":14},{\"type\":\"hover\",\"text\":\"const allowanceSlot: \\\"0x....\\\"\",\"start\":186,\"length\":13,\"target\":\"allowanceSlot\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"const maxAllowance: any\",\"start\":305,\"length\":12,\"target\":\"maxAllowance\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"any\",\"start\":320,\"length\":11,\"target\":\"numberToHex\",\"line\":7,\"character\":21},{\"type\":\"hover\",\"text\":\"any\",\"start\":332,\"length\":10,\"target\":\"maxUint256\",\"line\":7,\"character\":33},{\"type\":\"hover\",\"text\":\"const result: boolean\",\"start\":353,\"length\":6,\"target\":\"result\",\"line\":9,\"character\":8},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":370,\"length\":12,\"target\":\"publicClient\",\"line\":9,\"character\":25},{\"type\":\"hover\",\"text\":\"(property) simulateContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}], \\\"transferFrom\\\", readonly [...], Chain | undefined, {\\n    ...;\\n}>(args: SimulateContractParameters<...>) => Promise<...>\",\"docs\":\"Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\\n\\n- Docs: https://viem.sh/docs/contract/simulateContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\",\"tags\":[[\"remarks\",\"This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link SimulateContractParameters}\"],[\"returns\",\"The simulation result and write request. {@link SimulateContractReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32) view returns (uint32)']),\\n  functionName: 'mint',\\n  args: ['69420'],\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":383,\"length\":16,\"target\":\"simulateContract\",\"line\":9,\"character\":38},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"transferFrom\\\";\\n    readonly stateMutability: \\\"nonpayable\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"sender\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        readonly name: \\\"recipient\\\";\\n        readonly type: \\\"address\\\";\\n    }, {\\n        ...;\\n    }];\\n    readonly outputs: readonly [...];\\n}]\",\"start\":404,\"length\":3,\"target\":\"abi\",\"line\":10,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":411,\"length\":7,\"target\":\"address\",\"line\":11,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) account?: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n} | null | undefined\",\"start\":422,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"transferFrom\\\"\",\"start\":433,\"length\":12,\"target\":\"functionName\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: [\\\"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\\\", `0x${string}`, bigint]\",\"start\":465,\"length\":4,\"target\":\"args\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\\nimport account\",\"start\":528,\"length\":7,\"target\":\"account\",\"line\":16,\"character\":4},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":536,\"length\":7,\"target\":\"address\",\"line\":16,\"character\":12},{\"type\":\"hover\",\"text\":\"(property) stateOverride: {\\n    address: \\\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\\";\\n    stateDiff: {\\n        slot: \\\"0x....\\\";\\n        value: any;\\n    }[];\\n}[]\",\"start\":564,\"length\":13,\"target\":\"stateOverride\",\"line\":19,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":686,\"length\":7,\"target\":\"address\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) stateDiff?: StateMapping | undefined\",\"docs\":\"Fake key-value mapping to override individual slots in the account storage before executing the call.\",\"start\":715,\"length\":9,\"target\":\"stateDiff\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) slot: `0x${string}`\",\"start\":776,\"length\":4,\"target\":\"slot\",\"line\":25,\"character\":10},{\"type\":\"hover\",\"text\":\"const allowanceSlot: \\\"0x....\\\"\",\"start\":782,\"length\":13,\"target\":\"allowanceSlot\",\"line\":25,\"character\":16},{\"type\":\"hover\",\"text\":\"(property) value: `0x${string}`\",\"start\":821,\"length\":5,\"target\":\"value\",\"line\":26,\"character\":10},{\"type\":\"hover\",\"text\":\"const maxAllowance: any\",\"start\":828,\"length\":12,\"target\":\"maxAllowance\",\"line\":26,\"character\":17},{\"type\":\"hover\",\"text\":\"namespace console\\nvar console: Console\",\"docs\":\"The `console` module provides a simple debugging console that is similar to the\\nJavaScript console mechanism provided by web browsers.\\n\\nThe module exports two specific components:\\n\\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstdout) and\\n[`process.stderr`](https://nodejs.org/docs/latest-v20.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\\n\\n_**Warning**_: The global console object's methods are neither consistently\\nsynchronous like the browser APIs they resemble, nor are they consistently\\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v20.x/api/process.html#a-note-on-process-io) for\\nmore information.\\n\\nExample using the global `console`:\\n\\n```js\\nconsole.log('hello world');\\n// Prints: hello world, to stdout\\nconsole.log('hello %s', 'world');\\n// Prints: hello world, to stdout\\nconsole.error(new Error('Whoops, something bad happened'));\\n// Prints error message and stack trace to stderr:\\n//   Error: Whoops, something bad happened\\n//     at [eval]:5:15\\n//     at Script.runInThisContext (node:vm:132:18)\\n//     at Object.runInThisContext (node:vm:309:38)\\n//     at node:internal/process/execution:77:19\\n//     at [eval]-wrapper:6:22\\n//     at evalScript (node:internal/process/execution:76:60)\\n//     at node:internal/main/eval_string:23:3\\n\\nconst name = 'Will Robinson';\\nconsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to stderr\\n```\\n\\nExample using the `Console` class:\\n\\n```js\\nconst out = getStreamSomehow();\\nconst err = getStreamSomehow();\\nconst myConsole = new console.Console(out, err);\\n\\nmyConsole.log('hello world');\\n// Prints: hello world, to out\\nmyConsole.log('hello %s', 'world');\\n// Prints: hello world, to out\\nmyConsole.error(new Error('Whoops, something bad happened'));\\n// Prints: [Error: Whoops, something bad happened], to err\\n\\nconst name = 'Will Robinson';\\nmyConsole.warn(`Danger ${name}! Danger!`);\\n// Prints: Danger Will Robinson! Danger!, to err\\n```\",\"tags\":[[\"see\",\"[source](https://github.com/nodejs/node/blob/v20.11.1/lib/console.js)\"]],\"start\":948,\"length\":7,\"target\":\"console\",\"line\":33,\"character\":0},{\"type\":\"hover\",\"text\":\"(method) Console.log(...data: any[]): void (+2 overloads)\",\"docs\":\"[MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)\",\"start\":956,\"length\":3,\"target\":\"log\",\"line\":33,\"character\":8},{\"type\":\"hover\",\"text\":\"const result: boolean\",\"start\":960,\"length\":6,\"target\":\"result\",\"line\":33,\"character\":12}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":968,\"length\":0,\"text\":\"Output: true\",\"line\":35,\"character\":0}]}}"
