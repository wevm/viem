"{\"value\":{\"mdx\":\"---\\ndescription: Calls a read-only function on a contract, and returns the response.\\n---\\n\\n# readContract\\n\\nCalls a read-only function on a contract, and returns the response.\\n\\nA \\\"read-only\\\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\n\\nInternally, `readContract` uses a [Public Client](/docs/clients/public) to call the [`call` action](/docs/actions/public/call) with [ABI-encoded `data`](/docs/contract/encodeFunctionData).\\n\\n## Usage\\n\\nBelow is a very basic example of how to call a read-only function on a contract (with no arguments).\\n\\n:::code-group\\n\\n```ts [example.ts]\\nimport { publicClient } from './client'\\nimport { wagmiAbi } from './abi'\\n\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n})\\n// 69420n\\n```\\n\\n```ts [abi.ts]\\nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: \\\"totalSupply\\\",\\n    outputs: [{ name: \\\"\\\", type: \\\"uint256\\\" }],\\n    stateMutability: \\\"view\\\",\\n    type: \\\"function\\\",\\n  },\\n  ...\\n] as const;\\n```\\n\\n```ts [client.ts]\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n```\\n\\n:::\\n\\n### Passing Arguments\\n\\nIf your function requires argument(s), you can pass them through with the `args` attribute.\\n\\nTypeScript types for `args` will be inferred from the function name & ABI, to guard you from inserting the wrong values.\\n\\nFor example, the `balanceOf` function name below requires an **address** argument, and it is typed as `[\\\"0x${string}\\\"]`.\\n\\n:::code-group\\n\\n```ts [example.ts] {8}\\nimport { publicClient } from './client'\\nimport { wagmiAbi } from './abi'\\n\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC']\\n})\\n```\\n\\n```ts [abi.ts]\\nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [{ name: \\\"owner\\\", type: \\\"address\\\" }],\\n    name: \\\"balanceOf\\\",\\n    outputs: [{ name: \\\"\\\", type: \\\"uint256\\\" }],\\n    stateMutability: \\\"view\\\",\\n    type: \\\"function\\\",\\n  },\\n  ...\\n] as const;\\n```\\n\\n```ts [client.ts]\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n```\\n\\n:::\\n\\n### Deployless Reads\\n\\nIt is possible to call a function on a contract that has not been deployed yet. For instance, we may want\\nto call a function on an [ERC-4337 Smart Account](https://eips.ethereum.org/EIPS/eip-4337) contract which has not been deployed.\\n\\nViem offers two ways of performing a Deployless Call, via:\\n\\n- [Bytecode](#bytecode)\\n- a [Deploy Factory](#deploy-factory): \\\"temporarily deploys\\\" a contract with a provided [Deploy Factory](https://docs.alchemy.com/docs/create2-an-alternative-to-deriving-contract-addresses#create2-contract-factory), and calls the function on the deployed contract.\\n\\n:::tip\\nThe **Deployless Call** pattern is also accessible via the [Contract Instance](/docs/contract/getContract) API.\\n:::\\n\\n#### Bytecode\\n\\nThe example below demonstrates how we can utilize a Deployless Call **via Bytecode** to call the `name` function on the [Wagmi Example ERC721 contract](https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code) which has not been deployed:\\n\\n:::code-group\\n\\n```ts twoslash [example.ts]\\nimport { parseAbi } from 'viem'\\nimport { publicClient } from './config'\\n\\nconst data = await publicClient.readContract({\\n  abi: parseAbi(['function name() view returns (string)']),\\n  code: '0x...', // Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\\n  functionName: 'name'\\n})\\n```\\n\\n```ts twoslash [config.ts] filename=\\\"config.ts\\\"\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n```\\n\\n:::\\n\\n#### Deploy Factory\\n\\nThe example below demonstrates how we can utilize a Deployless Call **via a [Deploy Factory](https://docs.alchemy.com/docs/create2-an-alternative-to-deriving-contract-addresses#create2-contract-factory)** to call the `entryPoint` function on an [ERC-4337 Smart Account](https://eips.ethereum.org/EIPS/eip-4337) which has not been deployed:\\n\\n:::code-group\\n\\n```ts twoslash [example.ts]\\nimport { encodeFunctionData, parseAbi } from 'viem'\\nimport { account, publicClient } from './config'\\n\\nconst data = await publicClient.readContract({\\n  // Address of the Smart Account deployer (factory).\\n  factory: '0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb',\\n\\n  // Function to execute on the factory to deploy the Smart Account.\\n  factoryData: encodeFunctionData({\\n    abi: parseAbi(['function createAccount(address owner, uint256 salt)']),\\n    functionName: 'createAccount',\\n    args: [account, 0n],\\n  }),\\n\\n  // Function to call on the Smart Account.\\n  abi: account.abi,\\n  address: account.address,\\n  functionName: 'entryPoint',\\n})\\n```\\n\\n```ts twoslash [config.ts] filename=\\\"config.ts\\\"\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const account = {\\n  address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\\n  abi: parseAbi(['function entryPoint() view returns (address)'])\\n} as const\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n```\\n\\n:::\\n\\n:::note\\nThis example utilizes the [SimpleAccountFactory](https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/samples/SimpleAccountFactory.sol).\\n:::\\n\\n## Return Value\\n\\nThe response from the contract. Type is inferred.\\n\\n## Parameters\\n\\n### address\\n\\n- **Type:** [`Address`](/docs/glossary/types#address)\\n\\nThe contract address.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2', // [!code focus]\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n})\\n```\\n\\n### abi\\n\\n- **Type:** [`Abi`](/docs/glossary/types#abi)\\n\\nThe contract's ABI.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi, // [!code focus]\\n  functionName: 'totalSupply',\\n})\\n```\\n\\n### functionName\\n\\n- **Type:** `string`\\n\\nA function to extract from the ABI.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply', // [!code focus]\\n})\\n```\\n\\n### args (optional)\\n\\n- **Type:** Inferred from ABI.\\n\\nArguments to pass to function call.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0x1dfe7ca09e99d10835bf73044a23b73fc20623df',\\n  abi: wagmiAbi,\\n  functionName: 'balanceOf',\\n  args: ['0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC'] // [!code focus]\\n})\\n```\\n\\n### account (optional)\\n\\n- **Type:** `Account | Address`\\n\\nOptional Account sender override.\\n\\nAccepts a [JSON-RPC Account](/docs/clients/wallet#json-rpc-accounts) or [Local Account (Private Key, etc)](/docs/clients/wallet#local-accounts-private-key-mnemonic-etc).\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266' // [!code focus]\\n})\\n```\\n\\n### blockNumber (optional)\\n\\n- **Type:** `number`\\n\\nThe block number to perform the read against.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  blockNumber: 15121123n, // [!code focus]\\n})\\n```\\n\\n### blockTag (optional)\\n\\n- **Type:** `'latest' | 'earliest' | 'pending' | 'safe' | 'finalized'`\\n- **Default:** `'latest'`\\n\\nThe block tag to perform the read against.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  blockTag: 'safe', // [!code focus]\\n})\\n```\\n\\n### factory (optional)\\n\\n- **Type:**\\n\\nContract deployment factory address (ie. Create2 factory, Smart Account factory, etc).\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  factory: '0x0000000000ffe8b47b3e2130213b802212439497', // [!code focus]\\n  factoryData: '0xdeadbeef',\\n})\\n```\\n\\n### factoryData (optional)\\n\\n- **Type:**\\n\\nCalldata to execute on the factory to deploy the contract.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  factory: '0x0000000000ffe8b47b3e2130213b802212439497',\\n  factoryData: '0xdeadbeef', // [!code focus]\\n})\\n```\\n\\n### stateOverride (optional)\\n\\n- **Type:** [`StateOverride`](/docs/glossary/types#stateoverride)\\n\\nThe state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.\\n\\n```ts\\nconst data = await publicClient.readContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: wagmiAbi,\\n  functionName: 'totalSupply',\\n  stateOverride: [ // [!code focus]\\n    { // [!code focus]\\n      address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC', // [!code focus]\\n      balance: parseEther('1'), // [!code focus]\\n      stateDiff: [ // [!code focus]\\n        { // [!code focus]\\n          slot: '0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0', // [!code focus]\\n          value: '0x00000000000000000000000000000000000000000000000000000000000001a4', // [!code focus]\\n        }, // [!code focus]\\n      ], // [!code focus]\\n    } // [!code focus]\\n  ], // [!code focus]\\n})\\n```\\n\\n## Live Example\\n\\nCheck out the usage of `readContract` in the live [Reading Contracts Example](https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts) below.\\n\\n<iframe frameBorder=\\\"0\\\" width=\\\"100%\\\" height=\\\"500px\\\" src=\\\"https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts?embed=1&file=index.ts&hideNavigation=1&hideDevTools=true&terminalHeight=0&ctl=1\\\"></iframe>\\n\",\"document\":[{\"href\":\"/docs/contract/readContract#readcontract\",\"html\":\"</header>\\n<p>Calls a read-only function on a contract, and returns the response.</p>\\n<p>A &quot;read-only&quot; function (constant function) on a Solidity contract is denoted by a <code>view</code> or <code>pure</code> keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.</p>\\n<p>Internally, <code>readContract</code> uses a <a href=\\\"/docs/clients/public\\\">Public Client</a> to call the <a href=\\\"/docs/actions/public/call\\\"><code>call</code> action</a> with <a href=\\\"/docs/contract/encodeFunctionData\\\">ABI-encoded <code>data</code></a>.</p>\\n\",\"id\":\"pages/docs/contract/readContract.md#readcontract\",\"isPage\":true,\"text\":\"\\nCalls a read-only function on a contract, and returns the response.\\nA &quot;read-only&quot; function (constant function) on a Solidity contract is denoted by a view or pure keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\\nInternally, readContract uses a Public Client to call the call action with ABI-encoded data.\\n\",\"title\":\"readContract\",\"titles\":[]},{\"href\":\"/docs/contract/readContract#usage\",\"html\":\"\\n<p>Below is a very basic example of how to call a read-only function on a contract (with no arguments).</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./client&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 69420n</span></span></code></pre></div><div data-title=\\\"abi.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"abi.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> wagmiAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;totalSupply&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;uint256&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;view&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;function&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span></code></pre></div><div data-title=\\\"client.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"client.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div></div>\\n\",\"id\":\"pages/docs/contract/readContract.md#usage\",\"isPage\":false,\"text\":\"\\nBelow is a very basic example of how to call a read-only function on a contract (with no arguments).\\nimport { publicClient } from &#x27;./client&#x27;\\nimport { wagmiAbi } from &#x27;./abi&#x27;\\n \\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n})\\n// 69420nexport const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [],\\n    name: &quot;totalSupply&quot;,\\n    outputs: [{ name: &quot;&quot;, type: &quot;uint256&quot; }],\\n    stateMutability: &quot;view&quot;,\\n    type: &quot;function&quot;,\\n  },\\n  ...\\n] as const;import { createPublicClient, http } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"title\":\"Usage\",\"titles\":[\"readContract\"]},{\"href\":\"/docs/contract/readContract#passing-arguments\",\"html\":\"\\n<p>If your function requires argument(s), you can pass them through with the <code>args</code> attribute.</p>\\n<p>TypeScript types for <code>args</code> will be inferred from the function name &amp; ABI, to guard you from inserting the wrong values.</p>\\n<p>For example, the <code>balanceOf</code> function name below requires an <strong>address</strong> argument, and it is typed as <code>[&quot;0x${string}&quot;]</code>.</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./client&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { wagmiAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./abi&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"abi.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"abi.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> wagmiAbi</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;owner&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;address&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;balanceOf&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    outputs: [{ name: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;uint256&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    stateMutability: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;view&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    type: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;function&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span></code></pre></div><div data-title=\\\"client.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"client.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div></div>\\n\",\"id\":\"pages/docs/contract/readContract.md#passing-arguments\",\"isPage\":false,\"text\":\"\\nIf your function requires argument(s), you can pass them through with the args attribute.\\nTypeScript types for args will be inferred from the function name &amp; ABI, to guard you from inserting the wrong values.\\nFor example, the balanceOf function name below requires an address argument, and it is typed as [&quot;0x${string}&quot;].\\nimport { publicClient } from &#x27;./client&#x27;\\nimport { wagmiAbi } from &#x27;./abi&#x27;\\n \\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;]\\n})export const wagmiAbi = [\\n  ...\\n  {\\n    inputs: [{ name: &quot;owner&quot;, type: &quot;address&quot; }],\\n    name: &quot;balanceOf&quot;,\\n    outputs: [{ name: &quot;&quot;, type: &quot;uint256&quot; }],\\n    stateMutability: &quot;view&quot;,\\n    type: &quot;function&quot;,\\n  },\\n  ...\\n] as const;import { createPublicClient, http } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"title\":\"Passing Arguments\",\"titles\":[\"readContract\",\"Usage\"]},{\"href\":\"/docs/contract/readContract#deployless-reads\",\"html\":\"\\n<p>It is possible to call a function on a contract that has not been deployed yet. For instance, we may want\\nto call a function on an <a href=\\\"https://eips.ethereum.org/EIPS/eip-4337\\\">ERC-4337 Smart Account</a> contract which has not been deployed.</p>\\n<p>Viem offers two ways of performing a Deployless Call, via:</p>\\n<ul>\\n<li><a href=\\\"#bytecode\\\">Bytecode</a></li>\\n<li>a <a href=\\\"#deploy-factory\\\">Deploy Factory</a>: &quot;temporarily deploys&quot; a contract with a provided <a href=\\\"https://docs.alchemy.com/docs/create2-an-alternative-to-deriving-contract-addresses#create2-contract-factory\\\">Deploy Factory</a>, and calls the function on the deployed contract.</li>\\n</ul>\\n<aside data-callout=\\\"tip\\\"><p>The <strong>Deployless Call</strong> pattern is also accessible via the <a href=\\\"/docs/contract/getContract\\\">Contract Instance</a> API.</p></aside>\\n\",\"id\":\"pages/docs/contract/readContract.md#deployless-reads\",\"isPage\":false,\"text\":\"\\nIt is possible to call a function on a contract that has not been deployed yet. For instance, we may want\\nto call a function on an ERC-4337 Smart Account contract which has not been deployed.\\nViem offers two ways of performing a Deployless Call, via:\\n\\nBytecode\\na Deploy Factory: &quot;temporarily deploys&quot; a contract with a provided Deploy Factory, and calls the function on the deployed contract.\\n\\nThe Deployless Call pattern is also accessible via the Contract Instance API.\\n\",\"title\":\"Deployless Reads\",\"titles\":[\"readContract\",\"Usage\"]},{\"href\":\"/docs/contract/readContract#bytecode\",\"html\":\"\\n<p>The example below demonstrates how we can utilize a Deployless Call <strong>via Bytecode</strong> to call the <code>name</code> function on the <a href=\\\"https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\\\">Wagmi Example ERC721 contract</a> which has not been deployed:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: config.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> account</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseAbi</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function entryPoint() view returns (address)&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: config.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: example.js</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { publicClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseAbi</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function name() view returns (string)&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  code: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x...&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;name&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"config.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div></div>\\n\",\"id\":\"pages/docs/contract/readContract.md#bytecode\",\"isPage\":false,\"text\":\"\\nThe example below demonstrates how we can utilize a Deployless Call via Bytecode to call the name function on the Wagmi Example ERC721 contract which has not been deployed:\\n// @filename: config.ts\\nimport { createPublicClient, http, parseAbi } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const account = {\\n  address: &#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;,\\n  abi: parseAbi([&#x27;function entryPoint() view returns (address)&#x27;])\\n} as const\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n// @filename: config.ts\\nimport { createPublicClient, http } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n// @filename: example.js\\n \\n// ---cut---\\nimport { parseAbi } from &#x27;viem&#x27;\\nimport { publicClient } from &#x27;./config&#x27;\\n \\nconst data = await publicClient.readContract({\\n  abi: parseAbi([&#x27;function name() view returns (string)&#x27;]),\\n  code: &#x27;0x...&#x27;, // Accessible here: https://etherscan.io/address/0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2#code\\n  functionName: &#x27;name&#x27;\\n})import { createPublicClient, http } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"title\":\"Bytecode\",\"titles\":[\"readContract\",\"Usage\",\"Deployless Reads\"]},{\"href\":\"/docs/contract/readContract#deploy-factory\",\"html\":\"\\n<p>The example below demonstrates how we can utilize a Deployless Call <strong>via a <a href=\\\"https://docs.alchemy.com/docs/create2-an-alternative-to-deriving-contract-addresses#create2-contract-factory\\\">Deploy Factory</a></strong> to call the <code>entryPoint</code> function on an <a href=\\\"https://eips.ethereum.org/EIPS/eip-4337\\\">ERC-4337 Smart Account</a> which has not been deployed:</p>\\n<div class=\\\"code-group\\\"><div data-title=\\\"example.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"example.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: config.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> account</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseAbi</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function entryPoint() view returns (address)&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: config.ts</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// @filename: example.js</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ---cut---</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeFunctionData, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { account, publicClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;./config&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Address of the Smart Account deployer (factory).</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factory: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Function to execute on the factory to deploy the Smart Account.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factoryData: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">encodeFunctionData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    abi: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseAbi</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function createAccount(address owner, uint256 salt)&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;createAccount&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    args: [account, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">n</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }),</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Function to call on the Smart Account.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: account.abi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: account.address,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;entryPoint&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-title=\\\"config.ts\\\"><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"config.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient, http, parseAbi } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { mainnet } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> account</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseAbi</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;function entryPoint() view returns (address)&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">as</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">export</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> publicClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: mainnet,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">http</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div></div>\\n<aside data-callout=\\\"note\\\"><p>This example utilizes the <a href=\\\"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/samples/SimpleAccountFactory.sol\\\">SimpleAccountFactory</a>.</p></aside>\\n\",\"id\":\"pages/docs/contract/readContract.md#deploy-factory\",\"isPage\":false,\"text\":\"\\nThe example below demonstrates how we can utilize a Deployless Call via a Deploy Factory to call the entryPoint function on an ERC-4337 Smart Account which has not been deployed:\\n// @filename: config.ts\\nimport { createPublicClient, http, parseAbi } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const account = {\\n  address: &#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;,\\n  abi: parseAbi([&#x27;function entryPoint() view returns (address)&#x27;])\\n} as const\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n// @filename: config.ts\\nimport { createPublicClient, http } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n// @filename: example.js\\n \\n// ---cut---\\nimport { encodeFunctionData, parseAbi } from &#x27;viem&#x27;\\nimport { account, publicClient } from &#x27;./config&#x27;\\n \\nconst data = await publicClient.readContract({\\n  // Address of the Smart Account deployer (factory).\\n  factory: &#x27;0xE8Df82fA4E10e6A12a9Dab552bceA2acd26De9bb&#x27;,\\n \\n  // Function to execute on the factory to deploy the Smart Account.\\n  factoryData: encodeFunctionData({\\n    abi: parseAbi([&#x27;function createAccount(address owner, uint256 salt)&#x27;]),\\n    functionName: &#x27;createAccount&#x27;,\\n    args: [account, 0n],\\n  }),\\n \\n  // Function to call on the Smart Account.\\n  abi: account.abi,\\n  address: account.address,\\n  functionName: &#x27;entryPoint&#x27;,\\n})import { createPublicClient, http, parseAbi } from &#x27;viem&#x27;\\nimport { mainnet } from &#x27;viem/chains&#x27;\\n \\nexport const account = {\\n  address: &#x27;0x70997970c51812dc3a010c7d01b50e0d17dc79c8&#x27;,\\n  abi: parseAbi([&#x27;function entryPoint() view returns (address)&#x27;])\\n} as const\\n \\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\nThis example utilizes the SimpleAccountFactory.\\n\",\"title\":\"Deploy Factory\",\"titles\":[\"readContract\",\"Usage\",\"Deployless Reads\"]},{\"href\":\"/docs/contract/readContract#return-value\",\"html\":\"\\n<p>The response from the contract. Type is inferred.</p>\\n\",\"id\":\"pages/docs/contract/readContract.md#return-value\",\"isPage\":false,\"text\":\"\\nThe response from the contract. Type is inferred.\\n\",\"title\":\"Return Value\",\"titles\":[\"readContract\"]},{\"href\":\"/docs/contract/readContract#parameters\",\"html\":\"\\n\",\"id\":\"pages/docs/contract/readContract.md#parameters\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Parameters\",\"titles\":[\"readContract\"]},{\"href\":\"/docs/contract/readContract#address\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#address\\\"><code>Address</code></a></li>\\n</ul>\\n<p>The contract address.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#address\",\"isPage\":false,\"text\":\"\\n\\nType: Address\\n\\nThe contract address.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;, \\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n})\\n\",\"title\":\"address\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#abi\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#abi\\\"><code>Abi</code></a></li>\\n</ul>\\n<p>The contract&#x27;s ABI.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#abi\",\"isPage\":false,\"text\":\"\\n\\nType: Abi\\n\\nThe contract&#x27;s ABI.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi, \\n  functionName: &#x27;totalSupply&#x27;,\\n})\\n\",\"title\":\"abi\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#functionname\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>string</code></li>\\n</ul>\\n<p>A function to extract from the ABI.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#functionname\",\"isPage\":false,\"text\":\"\\n\\nType: string\\n\\nA function to extract from the ABI.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;, \\n})\\n\",\"title\":\"functionName\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#args-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> Inferred from ABI.</li>\\n</ul>\\n<p>Arguments to pass to function call.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x1dfe7ca09e99d10835bf73044a23b73fc20623df&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;balanceOf&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  args: [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#args-optional\",\"isPage\":false,\"text\":\"\\n\\nType: Inferred from ABI.\\n\\nArguments to pass to function call.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0x1dfe7ca09e99d10835bf73044a23b73fc20623df&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;balanceOf&#x27;,\\n  args: [&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;] \\n})\\n\",\"title\":\"args (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#account-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>Account | Address</code></li>\\n</ul>\\n<p>Optional Account sender override.</p>\\n<p>Accepts a <a href=\\\"/docs/clients/wallet#json-rpc-accounts\\\">JSON-RPC Account</a> or <a href=\\\"/docs/clients/wallet#local-accounts-private-key-mnemonic-etc\\\">Local Account (Private Key, etc)</a>.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  account: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#account-optional\",\"isPage\":false,\"text\":\"\\n\\nType: Account | Address\\n\\nOptional Account sender override.\\nAccepts a JSON-RPC Account or Local Account (Private Key, etc).\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  account: &#x27;0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266&#x27;\\n})\\n\",\"title\":\"account (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#blocknumber-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>number</code></li>\\n</ul>\\n<p>The block number to perform the read against.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  blockNumber: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">15121123</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">n</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#blocknumber-optional\",\"isPage\":false,\"text\":\"\\n\\nType: number\\n\\nThe block number to perform the read against.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  blockNumber: 15121123n, \\n})\\n\",\"title\":\"blockNumber (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#blocktag-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <code>&#x27;latest&#x27; | &#x27;earliest&#x27; | &#x27;pending&#x27; | &#x27;safe&#x27; | &#x27;finalized&#x27;</code></li>\\n<li><strong>Default:</strong> <code>&#x27;latest&#x27;</code></li>\\n</ul>\\n<p>The block tag to perform the read against.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  blockTag: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;safe&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#blocktag-optional\",\"isPage\":false,\"text\":\"\\n\\nType: &#x27;latest&#x27; | &#x27;earliest&#x27; | &#x27;pending&#x27; | &#x27;safe&#x27; | &#x27;finalized&#x27;\\nDefault: &#x27;latest&#x27;\\n\\nThe block tag to perform the read against.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  blockTag: &#x27;safe&#x27;, \\n})\\n\",\"title\":\"blockTag (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#factory-optional\",\"html\":\"\\n<ul>\\n<li>\\n<strong>Type:</strong>\\n</li>\\n</ul>\\n<p>Contract deployment factory address (ie. Create2 factory, Smart Account factory, etc).</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factory: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x0000000000ffe8b47b3e2130213b802212439497&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factoryData: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xdeadbeef&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#factory-optional\",\"isPage\":false,\"text\":\"\\n\\n\\nType:\\n\\n\\nContract deployment factory address (ie. Create2 factory, Smart Account factory, etc).\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  factory: &#x27;0x0000000000ffe8b47b3e2130213b802212439497&#x27;, \\n  factoryData: &#x27;0xdeadbeef&#x27;,\\n})\\n\",\"title\":\"factory (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#factorydata-optional\",\"html\":\"\\n<ul>\\n<li>\\n<strong>Type:</strong>\\n</li>\\n</ul>\\n<p>Calldata to execute on the factory to deploy the contract.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factory: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x0000000000ffe8b47b3e2130213b802212439497&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  factoryData: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xdeadbeef&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#factorydata-optional\",\"isPage\":false,\"text\":\"\\n\\n\\nType:\\n\\n\\nCalldata to execute on the factory to deploy the contract.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  factory: &#x27;0x0000000000ffe8b47b3e2130213b802212439497&#x27;,\\n  factoryData: &#x27;0xdeadbeef&#x27;, \\n})\\n\",\"title\":\"factoryData (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#stateoverride-optional\",\"html\":\"\\n<ul>\\n<li><strong>Type:</strong> <a href=\\\"/docs/glossary/types#stateoverride\\\"><code>StateOverride</code></a></li>\\n</ul>\\n<p>The state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed has-focused\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> publicClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">readContract</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  abi: wagmiAbi,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  functionName: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;totalSupply&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  stateOverride: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      address: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      balance: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">parseEther</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      stateDiff: [ </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        { </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          slot: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">          value: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0x00000000000000000000000000000000000000000000000000000000000001a4&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      ], </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span></span>\\n<span class=\\\"line focused\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ], </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"pages/docs/contract/readContract.md#stateoverride-optional\",\"isPage\":false,\"text\":\"\\n\\nType: StateOverride\\n\\nThe state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.\\nconst data = await publicClient.readContract({\\n  address: &#x27;0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2&#x27;,\\n  abi: wagmiAbi,\\n  functionName: &#x27;totalSupply&#x27;,\\n  stateOverride: [ \\n    { \\n      address: &#x27;0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC&#x27;, \\n      balance: parseEther(&#x27;1&#x27;), \\n      stateDiff: [ \\n        { \\n          slot: &#x27;0x3ea2f1d0abf3fc66cf29eebb70cbd4e7fe762ef8a09bcc06c8edf641230afec0&#x27;, \\n          value: &#x27;0x00000000000000000000000000000000000000000000000000000000000001a4&#x27;, \\n        }, \\n      ], \\n    } \\n  ], \\n})\\n\",\"title\":\"stateOverride (optional)\",\"titles\":[\"readContract\",\"Parameters\"]},{\"href\":\"/docs/contract/readContract#live-example\",\"html\":\"\\n<p>Check out the usage of <code>readContract</code> in the live <a href=\\\"https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\\\">Reading Contracts Example</a> below.</p>\\n<iframe frameBorder=\\\"0\\\" width=\\\"100%\\\" height=\\\"500px\\\" src=\\\"https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts?embed=1&amp;file=index.ts&amp;hideNavigation=1&amp;hideDevTools=true&amp;terminalHeight=0&amp;ctl=1\\\"></iframe>\",\"id\":\"pages/docs/contract/readContract.md#live-example\",\"isPage\":false,\"text\":\"\\nCheck out the usage of readContract in the live Reading Contracts Example below.\\n\",\"title\":\"Live Example\",\"titles\":[\"readContract\"]}]}}"
