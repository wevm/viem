"{\"value\":{\"code\":\"import { toBlobSidecars } from 'viem'\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":9,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":0,\"character\":9}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { toBlobSidecars } from 'viem'\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toBlobSidecars<const data extends Hex | ByteArray | undefined = undefined, const blobs extends readonly Hex[] | readonly ByteArray[] | undefined = undefined, to extends To = (data extends `0x${string}` ? \\\"hex\\\" : never) | ... 2 more ... | (blobs extends readonly ByteArray[] ? \\\"bytes\\\" : never)>(parameters: ToBlobSidecarsParameters<data, blobs, to>): ToBlobSidecarsReturnType<to>\\nimport toBlobSidecars\",\"docs\":\"Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\",\"tags\":[[\"example\",\"```ts\\nimport { toBlobSidecars, stringToHex } from 'viem'\\n\\nconst sidecars = toBlobSidecars({ data: stringToHex('hello world') })\\n```\"],[\"example\",\"```ts\\nimport {\\n  blobsToCommitments,\\n  toBlobs,\\n  blobsToProofs,\\n  toBlobSidecars,\\n  stringToHex\\n} from 'viem'\\n\\nconst blobs = toBlobs({ data: stringToHex('hello world') })\\nconst commitments = blobsToCommitments({ blobs, kzg })\\nconst proofs = blobsToProofs({ blobs, commitments, kzg })\\n\\nconst sidecars = toBlobSidecars({ blobs, commitments, proofs })\\n```\"]],\"start\":9,\"length\":14,\"target\":\"toBlobSidecars\",\"line\":0,\"character\":9}],\"tags\":[]}}"
