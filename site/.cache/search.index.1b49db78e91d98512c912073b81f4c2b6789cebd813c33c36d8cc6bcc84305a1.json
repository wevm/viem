"{\"value\":{\"mdx\":\"---\\ndescription: An Overview of EIP-7702\\n---\\n\\n# EIP-7702 Overview\\n\\nEIP-7702 is a proposal to add a new Transaction type to allow an EOA to designate a Smart Contract as its \\\"implementation\\\".\\n\\nThe main difference between an EIP-7702 Transaction and other transactions is the inclusion of a **\\\"authorization list\\\"** property, a set of `(chain_id, contract_address, nonce, y_parity, r, s)` tuples that depict what Contracts should be delegated onto the Externally Owned Account. \\n\\n:::note\\nIn Viem, you won't need to worry about constructing these Authorization Tuples manually as you can use [`signAuthorization`](/docs/eip7702/signAuthorization) to generate them and use them in [Transaction APIs](/docs/eip7702/contract-writes).\\n:::\\n\\nApplications of EIP-7702 include:\\n\\n- **Batching**: allowing multiple operations from the same user in one atomic transaction. One common example is an ERC-20 approval followed by spending that approval, a common workflow in DEXes that requires two transactions today. Advanced use cases of batching occasionally involve dependencies: the output of the first operation is part of the input to the second operation.\\n- **Sponsorship**: account X pays for a transaction on behalf of account Y. Account X could be paid in some other ERC-20 for this service, or it could be an application operator including the transactions of its users for free.\\n- **Privilege de-escalation**: users can sign sub-keys, and give them specific permissions that are much weaker than global access to the account. For example, you could imagine a permission to spend ERC-20 tokens but not ETH, or to spend up to 1% of total balance per day, or to interact only with a specific application.\\n\\n## Next Steps\\n\\n- [Contract Writes](/docs/eip7702/contract-writes)\\n- [Sending Transactions](/docs/eip7702/sending-transactions)\",\"document\":[{\"href\":\"/docs/eip7702#eip-7702-overview\",\"html\":\"</header>\\n<p>EIP-7702 is a proposal to add a new Transaction type to allow an EOA to designate a Smart Contract as its &quot;implementation&quot;.</p>\\n<p>The main difference between an EIP-7702 Transaction and other transactions is the inclusion of a <strong>&quot;authorization list&quot;</strong> property, a set of <code>(chain_id, contract_address, nonce, y_parity, r, s)</code> tuples that depict what Contracts should be delegated onto the Externally Owned Account.</p>\\n<aside data-callout=\\\"note\\\"><p>In Viem, you won&#x27;t need to worry about constructing these Authorization Tuples manually as you can use <a href=\\\"/docs/eip7702/signAuthorization\\\"><code>signAuthorization</code></a> to generate them and use them in <a href=\\\"/docs/eip7702/contract-writes\\\">Transaction APIs</a>.</p></aside>\\n<p>Applications of EIP-7702 include:</p>\\n<ul>\\n<li><strong>Batching</strong>: allowing multiple operations from the same user in one atomic transaction. One common example is an ERC-20 approval followed by spending that approval, a common workflow in DEXes that requires two transactions today. Advanced use cases of batching occasionally involve dependencies: the output of the first operation is part of the input to the second operation.</li>\\n<li><strong>Sponsorship</strong>: account X pays for a transaction on behalf of account Y. Account X could be paid in some other ERC-20 for this service, or it could be an application operator including the transactions of its users for free.</li>\\n<li><strong>Privilege de-escalation</strong>: users can sign sub-keys, and give them specific permissions that are much weaker than global access to the account. For example, you could imagine a permission to spend ERC-20 tokens but not ETH, or to spend up to 1% of total balance per day, or to interact only with a specific application.</li>\\n</ul>\\n\",\"id\":\"pages/docs/eip7702.mdx#eip-7702-overview\",\"isPage\":true,\"text\":\"\\nEIP-7702 is a proposal to add a new Transaction type to allow an EOA to designate a Smart Contract as its &quot;implementation&quot;.\\nThe main difference between an EIP-7702 Transaction and other transactions is the inclusion of a &quot;authorization list&quot; property, a set of (chain_id, contract_address, nonce, y_parity, r, s) tuples that depict what Contracts should be delegated onto the Externally Owned Account.\\nIn Viem, you won&#x27;t need to worry about constructing these Authorization Tuples manually as you can use signAuthorization to generate them and use them in Transaction APIs.\\nApplications of EIP-7702 include:\\n\\nBatching: allowing multiple operations from the same user in one atomic transaction. One common example is an ERC-20 approval followed by spending that approval, a common workflow in DEXes that requires two transactions today. Advanced use cases of batching occasionally involve dependencies: the output of the first operation is part of the input to the second operation.\\nSponsorship: account X pays for a transaction on behalf of account Y. Account X could be paid in some other ERC-20 for this service, or it could be an application operator including the transactions of its users for free.\\nPrivilege de-escalation: users can sign sub-keys, and give them specific permissions that are much weaker than global access to the account. For example, you could imagine a permission to spend ERC-20 tokens but not ETH, or to spend up to 1% of total balance per day, or to interact only with a specific application.\\n\\n\",\"title\":\"EIP-7702 Overview\",\"titles\":[]},{\"href\":\"/docs/eip7702#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/docs/eip7702/contract-writes\\\">Contract Writes</a></li>\\n<li><a href=\\\"/docs/eip7702/sending-transactions\\\">Sending Transactions</a></li>\\n</ul>\",\"id\":\"pages/docs/eip7702.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nContract Writes\\nSending Transactions\\n\",\"title\":\"Next Steps\",\"titles\":[\"EIP-7702 Overview\"]}]}}"
