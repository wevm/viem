"{\"value\":{\"code\":\"import { createWalletClient, http, publicActions } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createWalletClient({ // [!code focus]\\n  account,\\n  chain: mainnet,\\n  transport: http()\\n}).extend(publicActions) // [!code ++] // [!code focus]\\n\\nconst { request } = await client.simulateContract({ ... }) // Public Action // [!code focus]\\nconst hash = await client.writeContract(request) // Wallet Action // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function publicActions<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>): PublicActions<transport, chain, account>\\nimport publicActions\",\"start\":35,\"length\":13,\"target\":\"publicActions\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":72,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":124,\"length\":7,\"target\":\"mainnet\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":160,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":170,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":4,\"character\":16},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":206,\"length\":6,\"target\":\"client\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":215,\"length\":18,\"target\":\"createWalletClient\",\"line\":6,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | {\\n    ...;\\n} | undefined\",\"docs\":\"The Account to use for the Client. This will be used for Actions that require an account as an argument.\",\"start\":255,\"length\":7,\"target\":\"account\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":266,\"length\":5,\"target\":\"chain\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":273,\"length\":7,\"target\":\"mainnet\",\"line\":8,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":284,\"length\":9,\"target\":\"transport\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":295,\"length\":4,\"target\":\"http\",\"line\":9,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) extend: <PublicActions<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}>>(fn: (client: Client<...>) => PublicActions<...>) => Client<...>\",\"start\":305,\"length\":6,\"target\":\"extend\",\"line\":10,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) function publicActions<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>): PublicActions<transport, chain, account>\\nimport publicActions\",\"start\":312,\"length\":13,\"target\":\"publicActions\",\"line\":10,\"character\":10},{\"type\":\"hover\",\"text\":\"const request: {\\n    address: Address;\\n    type?: \\\"legacy\\\" | undefined;\\n    gas?: bigint | undefined;\\n    nonce?: number | undefined;\\n    value?: bigint | undefined;\\n    blobs?: undefined;\\n    blobVersionedHashes?: undefined;\\n    ... 13 more ...;\\n    account: {\\n        ...;\\n    };\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":367,\"length\":7,\"target\":\"request\",\"line\":12,\"character\":8},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":385,\"length\":6,\"target\":\"client\",\"line\":12,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) simulateContract: <Abi | readonly unknown[], string, readonly unknown[], Chain | undefined, undefined>(args: SimulateContractParameters<Abi | readonly unknown[], string, readonly unknown[], {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, Chain | undefined, undefined>) => Promise<...>\",\"docs\":\"Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\\n\\n- Docs: https://viem.sh/docs/contract/simulateContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\",\"tags\":[[\"remarks\",\"This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link SimulateContractParameters}\"],[\"returns\",\"The simulation result and write request. {@link SimulateContractReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32) view returns (uint32)']),\\n  functionName: 'mint',\\n  args: ['69420'],\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":392,\"length\":16,\"target\":\"simulateContract\",\"line\":12,\"character\":33},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":458,\"length\":4,\"target\":\"hash\",\"line\":13,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":471,\"length\":6,\"target\":\"client\",\"line\":13,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [never], string, readonly unknown[], Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":478,\"length\":13,\"target\":\"writeContract\",\"line\":13,\"character\":26},{\"type\":\"hover\",\"text\":\"const request: {\\n    address: Address;\\n    type?: \\\"legacy\\\" | undefined;\\n    gas?: bigint | undefined;\\n    nonce?: number | undefined;\\n    value?: bigint | undefined;\\n    blobs?: undefined;\\n    blobVersionedHashes?: undefined;\\n    ... 13 more ...;\\n    account: {\\n        ...;\\n    };\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":492,\"length\":7,\"target\":\"request\",\"line\":13,\"character\":40}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":true,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,13]],\"flagNotations\":[{\"type\":\"handbookOptions\",\"name\":\"noErrors\",\"value\":true,\"start\":0,\"end\":13}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"// @noErrors\\nimport { createWalletClient, http, publicActions } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst account = privateKeyToAccount('0x...')\\n\\nconst client = createWalletClient({ // [!code focus]\\n  account,\\n  chain: mainnet,\\n  transport: http()\\n}).extend(publicActions) // [!code ++] // [!code focus]\\n\\nconst { request } = await client.simulateContract({ ... }) // Public Action // [!code focus]\\nconst hash = await client.writeContract(request) // Wallet Action // [!code focus]\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function http<rpcSchema extends RpcSchema | undefined = undefined, raw extends boolean = false>(url?: string | undefined, config?: HttpTransportConfig<rpcSchema, raw>): HttpTransport<rpcSchema, raw>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":29,\"length\":4,\"target\":\"http\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function publicActions<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>): PublicActions<transport, chain, account>\\nimport publicActions\",\"start\":35,\"length\":13,\"target\":\"publicActions\",\"line\":0,\"character\":35},{\"type\":\"hover\",\"text\":\"(alias) function privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":72,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":124,\"length\":7,\"target\":\"mainnet\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}\",\"start\":160,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) privateKeyToAccount(privateKey: Hex, options?: PrivateKeyToAccountOptions): PrivateKeyAccount\\nimport privateKeyToAccount\",\"tags\":[[\"description\",\"Creates an Account from a private key.\"],[\"returns\",\"A Private Key Account.\"]],\"start\":170,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":4,\"character\":16},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":206,\"length\":6,\"target\":\"client\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, undefined>(parameters: {\\n    ...;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":215,\"length\":18,\"target\":\"createWalletClient\",\"line\":6,\"character\":15},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | {\\n    ...;\\n} | undefined\",\"docs\":\"The Account to use for the Client. This will be used for Actions that require an account as an argument.\",\"start\":255,\"length\":7,\"target\":\"account\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) chain?: Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n} | undefined\",\"docs\":\"Chain for the client.\",\"start\":266,\"length\":5,\"target\":\"chain\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const mainnet: {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}\\nimport mainnet\",\"start\":273,\"length\":7,\"target\":\"mainnet\",\"line\":8,\"character\":9},{\"type\":\"hover\",\"text\":\"(property) transport: HttpTransport<undefined, false>\",\"docs\":\"The RPC transport\",\"start\":284,\"length\":9,\"target\":\"transport\",\"line\":9,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) http<undefined, false>(url?: string | undefined, config?: HttpTransportConfig<undefined, false> | undefined): HttpTransport<undefined, false>\\nimport http\",\"tags\":[[\"description\",\"Creates a HTTP transport that connects to a JSON-RPC API.\"]],\"start\":295,\"length\":4,\"target\":\"http\",\"line\":9,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) extend: <PublicActions<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}>>(fn: (client: Client<...>) => PublicActions<...>) => Client<...>\",\"start\":305,\"length\":6,\"target\":\"extend\",\"line\":10,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) function publicActions<transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>): PublicActions<transport, chain, account>\\nimport publicActions\",\"start\":312,\"length\":13,\"target\":\"publicActions\",\"line\":10,\"character\":10},{\"type\":\"hover\",\"text\":\"const request: {\\n    address: Address;\\n    type?: \\\"legacy\\\" | undefined;\\n    gas?: bigint | undefined;\\n    nonce?: number | undefined;\\n    value?: bigint | undefined;\\n    blobs?: undefined;\\n    blobVersionedHashes?: undefined;\\n    ... 13 more ...;\\n    account: {\\n        ...;\\n    };\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":367,\"length\":7,\"target\":\"request\",\"line\":12,\"character\":8},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":385,\"length\":6,\"target\":\"client\",\"line\":12,\"character\":26},{\"type\":\"hover\",\"text\":\"(property) simulateContract: <Abi | readonly unknown[], string, readonly unknown[], Chain | undefined, undefined>(args: SimulateContractParameters<Abi | readonly unknown[], string, readonly unknown[], {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, Chain | undefined, undefined>) => Promise<...>\",\"docs\":\"Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\\n\\n- Docs: https://viem.sh/docs/contract/simulateContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\",\"tags\":[[\"remarks\",\"This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\\n\\nInternally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\"],[\"param\",\"args - {@link SimulateContractParameters}\"],[\"returns\",\"The simulation result and write request. {@link SimulateContractReturnType}\"],[\"example\",\"import { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst result = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32) view returns (uint32)']),\\n  functionName: 'mint',\\n  args: ['69420'],\\n  account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":392,\"length\":16,\"target\":\"simulateContract\",\"line\":12,\"character\":33},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":458,\"length\":4,\"target\":\"hash\",\"line\":13,\"character\":6},{\"type\":\"hover\",\"text\":\"const client: Client<HttpTransport<undefined, false>, {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\",\"start\":471,\"length\":6,\"target\":\"client\",\"line\":13,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [never], string, readonly unknown[], Chain | {\\n    blockExplorers: {\\n        readonly default: {\\n            readonly name: \\\"Etherscan\\\";\\n            readonly url: \\\"https://etherscan.io\\\";\\n            readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n        };\\n    };\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":478,\"length\":13,\"target\":\"writeContract\",\"line\":13,\"character\":26},{\"type\":\"hover\",\"text\":\"const request: {\\n    address: Address;\\n    type?: \\\"legacy\\\" | undefined;\\n    gas?: bigint | undefined;\\n    nonce?: number | undefined;\\n    value?: bigint | undefined;\\n    blobs?: undefined;\\n    blobVersionedHashes?: undefined;\\n    ... 13 more ...;\\n    account: {\\n        ...;\\n    };\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n} | {\\n    ...;\\n}\",\"start\":492,\"length\":7,\"target\":\"request\",\"line\":13,\"character\":40}],\"tags\":[]}}"
