"{\"value\":{\"code\":\"import { parseEther } from 'viem'\\nimport { walletClient } from './config'\\nimport { abi, contractAddress } from './contract'\\n\\nconst sponsor = privateKeyToAccount('0x...') // [!code ++]\\n\\nconst authorization = await walletClient.signAuthorization({\\n  contractAddress,\\n  sponsor, // [!code ++]\\n})\\n\\nconst hash = await walletClient.writeContract({\\n  account: sponsor, // [!code ++]\\n  abi,\\n  address: walletClient.account.address,\\n  functionName: 'execute',\\n  args: [[\\n    {\\n      data: '0x',\\n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', \\n      value: parseEther('0.001'), \\n    }, {\\n      data: '0x',\\n      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', \\n      value: parseEther('0.002'), \\n    }\\n  ]],\\n  authorizationList: [authorization],\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":43,\"length\":12,\"target\":\"walletClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            readonly name: \\\"to\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}]\\nimport abi\",\"start\":83,\"length\":3,\"target\":\"abi\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const contractAddress: \\\"0x...\\\"\\nimport contractAddress\",\"start\":88,\"length\":15,\"target\":\"contractAddress\",\"line\":2,\"character\":14},{\"type\":\"hover\",\"text\":\"const sponsor: any\",\"start\":131,\"length\":7,\"target\":\"sponsor\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"any\",\"start\":141,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":4,\"character\":16},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":191,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":213,\"length\":12,\"target\":\"walletClient\",\"line\":6,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":226,\"length\":17,\"target\":\"signAuthorization\",\"line\":6,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":248,\"length\":15,\"target\":\"contractAddress\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) sponsor?: true | `0x${string}` | Account | undefined\",\"docs\":\"Whether the EIP-7702 Transaction will be executed by another Account.\\n\\nIf not specified, it will be assumed that the EIP-7702 Transaction will\\nbe executed by the Account that signed the Authorization.\",\"start\":267,\"length\":7,\"target\":\"sponsor\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":300,\"length\":4,\"target\":\"hash\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":313,\"length\":12,\"target\":\"walletClient\",\"line\":11,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            ...;\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}], \\\"execute\\\", readonly [...], undefined>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":326,\"length\":13,\"target\":\"writeContract\",\"line\":11,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | null | undefined\",\"start\":344,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"const sponsor: any\",\"start\":353,\"length\":7,\"target\":\"sponsor\",\"line\":12,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            readonly name: \\\"to\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}]\",\"start\":378,\"length\":3,\"target\":\"abi\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":385,\"length\":7,\"target\":\"address\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":394,\"length\":12,\"target\":\"walletClient\",\"line\":14,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) account: {\\n    ...;\\n}\",\"docs\":\"The Account of the Client.\",\"start\":407,\"length\":7,\"target\":\"account\",\"line\":14,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":415,\"length\":7,\"target\":\"address\",\"line\":14,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"execute\\\"\",\"start\":426,\"length\":12,\"target\":\"functionName\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]] | (readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]] & readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]])\",\"start\":453,\"length\":4,\"target\":\"args\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0x\\\"\",\"start\":474,\"length\":4,\"target\":\"data\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":492,\"length\":2,\"target\":\"to\",\"line\":19,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":549,\"length\":5,\"target\":\"value\",\"line\":20,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":556,\"length\":10,\"target\":\"parseEther\",\"line\":20,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0x\\\"\",\"start\":593,\"length\":4,\"target\":\"data\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xd2135CfB216b74109775236E36d4b433F1DF507B\\\"\",\"start\":611,\"length\":2,\"target\":\"to\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":668,\"length\":5,\"target\":\"value\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":675,\"length\":10,\"target\":\"parseEther\",\"line\":24,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) authorizationList?: AuthorizationList<number, boolean> | undefined\",\"start\":711,\"length\":17,\"target\":\"authorizationList\",\"line\":27,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":731,\"length\":13,\"target\":\"authorization\",\"line\":27,\"character\":22}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,2747]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"execute\\\",\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"calls\\\",\\n        \\\"type\\\": \\\"tuple[]\\\",\\n        \\\"components\\\": [\\n          {\\n            \\\"name\\\": \\\"data\\\",\\n            \\\"type\\\": \\\"bytes\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"to\\\",\\n            \\\"type\\\": \\\"address\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"value\\\",\\n            \\\"type\\\": \\\"uint256\\\",\\n          }\\n        ]\\n      }\\n    ],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"payable\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":579,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"execute\\\",\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"calls\\\",\\n        \\\"type\\\": \\\"tuple[]\\\",\\n        \\\"components\\\": [\\n          {\\n            \\\"name\\\": \\\"data\\\",\\n            \\\"type\\\": \\\"bytes\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"to\\\",\\n            \\\"type\\\": \\\"address\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"value\\\",\\n            \\\"type\\\": \\\"uint256\\\",\\n          }\\n        ]\\n      }\\n    ],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"payable\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1158,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"execute\\\",\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"calls\\\",\\n        \\\"type\\\": \\\"tuple[]\\\",\\n        \\\"components\\\": [\\n          {\\n            \\\"name\\\": \\\"data\\\",\\n            \\\"type\\\": \\\"bytes\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"to\\\",\\n            \\\"type\\\": \\\"address\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"value\\\",\\n            \\\"type\\\": \\\"uint256\\\",\\n          }\\n        ]\\n      }\\n    ],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"payable\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":1737,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { createWalletClient, http } from 'viem'\\nimport { anvil } from 'viem/chains'\\nimport { privateKeyToAccount } from 'viem/accounts' \\nimport { eip7702Actions } from 'viem/experimental'\\n\\nexport const account = privateKeyToAccount('0x...')\\n \\nexport const walletClient = createWalletClient({\\n  account,\\n  chain: anvil,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2129,\"filename\":\"contract.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/contract.ts\",\"content\":\"// @filename: contract.ts\\nexport const abi = [\\n  {\\n    \\\"type\\\": \\\"function\\\",\\n    \\\"name\\\": \\\"execute\\\",\\n    \\\"inputs\\\": [\\n      {\\n        \\\"name\\\": \\\"calls\\\",\\n        \\\"type\\\": \\\"tuple[]\\\",\\n        \\\"components\\\": [\\n          {\\n            \\\"name\\\": \\\"data\\\",\\n            \\\"type\\\": \\\"bytes\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"to\\\",\\n            \\\"type\\\": \\\"address\\\",\\n          },\\n          {\\n            \\\"name\\\": \\\"value\\\",\\n            \\\"type\\\": \\\"uint256\\\",\\n          }\\n        ]\\n      }\\n    ],\\n    \\\"outputs\\\": [],\\n    \\\"stateMutability\\\": \\\"payable\\\"\\n  },\\n] as const\\n\\nexport const contractAddress = '0x...'\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":2708,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { parseEther } from 'viem'\\nimport { walletClient } from './config'\\nimport { abi, contractAddress } from './contract'\\n\\nconst sponsor = privateKeyToAccount('0x...') // [!code ++]\\n\\nconst authorization = await walletClient.signAuthorization({\\n  contractAddress,\\n  sponsor, // [!code ++]\\n})\\n\\nconst hash = await walletClient.writeContract({\\n  account: sponsor, // [!code ++]\\n  abi,\\n  address: walletClient.account.address,\\n  functionName: 'execute',\\n  args: [[\\n    {\\n      data: '0x',\\n      to: '0xcb98643b8786950F0461f3B0edf99D88F274574D', \\n      value: parseEther('0.001'), \\n    }, {\\n      data: '0x',\\n      to: '0xd2135CfB216b74109775236E36d4b433F1DF507B', \\n      value: parseEther('0.002'), \\n    }\\n  ]],\\n  authorizationList: [authorization],\\n})\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":9,\"length\":10,\"target\":\"parseEther\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":43,\"length\":12,\"target\":\"walletClient\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            readonly name: \\\"to\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}]\\nimport abi\",\"start\":83,\"length\":3,\"target\":\"abi\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const contractAddress: \\\"0x...\\\"\\nimport contractAddress\",\"start\":88,\"length\":15,\"target\":\"contractAddress\",\"line\":2,\"character\":14},{\"type\":\"hover\",\"text\":\"const sponsor: any\",\"start\":131,\"length\":7,\"target\":\"sponsor\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"any\",\"start\":141,\"length\":19,\"target\":\"privateKeyToAccount\",\"line\":4,\"character\":16},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":191,\"length\":13,\"target\":\"authorization\",\"line\":6,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":213,\"length\":12,\"target\":\"walletClient\",\"line\":6,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) signAuthorization: (parameters: SignAuthorizationParameters<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    ... 6 more ...;\\n    type: \\\"local\\\";\\n}>) => Promise<SignAuthorizationReturnType>\",\"docs\":\"Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\\n\\nWith the calculated signature, you can:\\n- use [`verifyAuthorization`](https://viem.sh/experimental/eip7702/verifyAuthorization) to verify the signed Authorization object,\\n- use [`recoverAuthorizationAddress`](https://viem.sh/experimental/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\",\"tags\":[[\"param\",\"client - Client to use\"],[\"param\",\"parameters - {@link SignAuthorizationParameters}\"],[\"returns\",\"The signed Authorization object. {@link SignAuthorizationReturnType}\"],[\"example\",\"import { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  account: privateKeyToAccount('0x..'),\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"],[\"example\",\"// Account Hoisting\\nimport { createClient, http } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\nimport { eip7702Actions } from 'viem/experimental'\\n\\nconst client = createClient({\\n  account: privateKeyToAccount('0x…'),\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(eip7702Actions())\\n\\nconst signature = await client.signAuthorization({\\n  contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\\n})\"]],\"start\":226,\"length\":17,\"target\":\"signAuthorization\",\"line\":6,\"character\":41},{\"type\":\"hover\",\"text\":\"(property) contractAddress: `0x${string}`\",\"docs\":\"Address of the contract to set as code for the Authority.\",\"start\":248,\"length\":15,\"target\":\"contractAddress\",\"line\":7,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) sponsor?: true | `0x${string}` | Account | undefined\",\"docs\":\"Whether the EIP-7702 Transaction will be executed by another Account.\\n\\nIf not specified, it will be assumed that the EIP-7702 Transaction will\\nbe executed by the Account that signed the Authorization.\",\"start\":267,\"length\":7,\"target\":\"sponsor\",\"line\":8,\"character\":2},{\"type\":\"hover\",\"text\":\"const hash: `0x${string}`\",\"start\":300,\"length\":4,\"target\":\"hash\",\"line\":11,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":313,\"length\":12,\"target\":\"walletClient\",\"line\":11,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) writeContract: <readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            ...;\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}], \\\"execute\\\", readonly [...], undefined>(args: WriteContractParameters<...>) => Promise<WriteContractReturnType>\",\"docs\":\"Executes a write function on a contract.\\n\\n- Docs: https://viem.sh/docs/contract/writeContract\\n- Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\\n\\nA \\\"write\\\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\\n\\nInternally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\\n\\n__Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\",\"tags\":[[\"param\",\"args - {@link WriteContractParameters}\"],[\"returns\",\"A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\"],[\"example\",\"import { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst hash = await client.writeContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n})\"],[\"example\",\"// With Validation\\nimport { createWalletClient, custom, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\\nconst { request } = await client.simulateContract({\\n  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\\n  abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\\n  functionName: 'mint',\\n  args: [69420],\\n}\\nconst hash = await client.writeContract(request)\"]],\"start\":326,\"length\":13,\"target\":\"writeContract\",\"line\":11,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) account?: `0x${string}` | Account | null | undefined\",\"start\":344,\"length\":7,\"target\":\"account\",\"line\":12,\"character\":2},{\"type\":\"hover\",\"text\":\"const sponsor: any\",\"start\":353,\"length\":7,\"target\":\"sponsor\",\"line\":12,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) abi: readonly [{\\n    readonly type: \\\"function\\\";\\n    readonly name: \\\"execute\\\";\\n    readonly inputs: readonly [{\\n        readonly name: \\\"calls\\\";\\n        readonly type: \\\"tuple[]\\\";\\n        readonly components: readonly [{\\n            readonly name: \\\"data\\\";\\n            readonly type: \\\"bytes\\\";\\n        }, {\\n            readonly name: \\\"to\\\";\\n            readonly type: \\\"address\\\";\\n        }, {\\n            ...;\\n        }];\\n    }];\\n    readonly outputs: readonly [];\\n    readonly stateMutability: \\\"payable\\\";\\n}]\",\"start\":378,\"length\":3,\"target\":\"abi\",\"line\":13,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":385,\"length\":7,\"target\":\"address\",\"line\":14,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const walletClient: Client<HttpTransport<undefined, false>, {\\n    blockExplorers?: {\\n        [key: string]: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n        default: {\\n            name: string;\\n            url: string;\\n            apiUrl?: string | undefined;\\n        };\\n    } | undefined;\\n    ... 10 more ...;\\n    serializers?: import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").ChainSerializers<undefined, import(\\\"/Users/jakemoxey/git/viem/src/_types/index\\\").TransactionSerializable> | undefined;\\n}, {\\n    ...;\\n}, WalletRpcSchema, {\\n    ...;\\n} & WalletActions<...>>\\nimport walletClient\",\"start\":394,\"length\":12,\"target\":\"walletClient\",\"line\":14,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) account: {\\n    ...;\\n}\",\"docs\":\"The Account of the Client.\",\"start\":407,\"length\":7,\"target\":\"account\",\"line\":14,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) address: `0x${string}`\",\"start\":415,\"length\":7,\"target\":\"address\",\"line\":14,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) functionName: \\\"execute\\\"\",\"start\":426,\"length\":12,\"target\":\"functionName\",\"line\":15,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) args: readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]] | (readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]] & readonly [readonly {\\n    data: `0x${string}`;\\n    to: `0x${string}`;\\n    value: bigint;\\n}[]])\",\"start\":453,\"length\":4,\"target\":\"args\",\"line\":16,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0x\\\"\",\"start\":474,\"length\":4,\"target\":\"data\",\"line\":18,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xcb98643b8786950F0461f3B0edf99D88F274574D\\\"\",\"start\":492,\"length\":2,\"target\":\"to\",\"line\":19,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":549,\"length\":5,\"target\":\"value\",\"line\":20,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":556,\"length\":10,\"target\":\"parseEther\",\"line\":20,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) data: \\\"0x\\\"\",\"start\":593,\"length\":4,\"target\":\"data\",\"line\":22,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) to: \\\"0xd2135CfB216b74109775236E36d4b433F1DF507B\\\"\",\"start\":611,\"length\":2,\"target\":\"to\",\"line\":23,\"character\":6},{\"type\":\"hover\",\"text\":\"(property) value: bigint\",\"start\":668,\"length\":5,\"target\":\"value\",\"line\":24,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) parseEther(ether: string, unit?: \\\"wei\\\" | \\\"gwei\\\"): bigint\\nimport parseEther\",\"docs\":\"Converts a string representation of ether to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseEther\",\"tags\":[[\"example\",\"import { parseEther } from 'viem'\\n\\nparseEther('420')\\n// 420000000000000000000n\"]],\"start\":675,\"length\":10,\"target\":\"parseEther\",\"line\":24,\"character\":13},{\"type\":\"hover\",\"text\":\"(property) authorizationList?: AuthorizationList<number, boolean> | undefined\",\"start\":711,\"length\":17,\"target\":\"authorizationList\",\"line\":27,\"character\":2},{\"type\":\"hover\",\"text\":\"const authorization: SignAuthorizationReturnType\",\"start\":731,\"length\":13,\"target\":\"authorization\",\"line\":27,\"character\":22}],\"tags\":[]}}"
