"{\"value\":{\"mdx\":\"# Circle Smart Account\\n\\n## Install\\n\\n:::info\\nThis package & guide is maintained by [Circle](https://www.circle.com).\\n:::\\n\\nMake sure to add [Circle's Modular Wallets](https://developers.circle.com/w3s/modular-wallets) SDK to your project:\\n\\n```sh\\nnpm install @circle-fin/modular-wallets-core\\n```\\n\\nThis package provides utilities for passkey authentication and smart account creation.\\n\\n## Prerequisites\\n\\nBefore you start, make sure you have:\\n\\n* Set up and retrieved your **Client Key and Client URL** [by following this step](https://developers.circle.com/w3s/modular-wallets-setup)\\n* Configured a domain for WebAuthn credential (Passkey) registration\\n* Familiarize yourself with [Circle's API Key and Client Key authentication](https://developers.circle.com/w3s/web3-services-api-client-keys-auth)\\n\\n::::steps\\n\\n## Create a Passkey Credential\\n\\nFirst, register a new **Passkey** (WebAuthn credential) or use an existing one for your user. \\n\\nThe Circle SDK uses a **Passkey server** to handle WebAuthn registration and login. \\n\\nWe need to initialize a Passkey Transport with the Circle **Client Key** and **Client URL** (obtained from the Circle Modular Wallets console setup), then create a credential:\\n\\n```ts\\nimport { \\n  toPasskeyTransport, \\n  toWebAuthnCredential, \\n  WebAuthnMode \\n} from '@circle-fin/modular-wallets-core'\\n\\nconst clientKey = '...'\\nconst clientUrl = 'https://...'\\n\\nconst passkeyTransport = toPasskeyTransport(clientUrl, clientKey)\\n\\nconst credential = await toWebAuthnCredential({\\n  transport: passkeyTransport,\\n  mode: WebAuthnMode.Register,\\n  username: 'user-example',\\n})\\n```\\n\\nThis will trigger the WebAuthn flow in the browser (e.g. biometric prompt) and yield a `credential` object for the passkey.\\n\\n## Create Client\\n\\nNext, create a Viem **Public Client** configured to use Circle's infrastructure. \\n\\nCircle provides custom RPC endpoints (via the Client URL) for each supported network. \\n\\nUse `toModularTransport` to get a Viem transport for your target chain, and then initialize the client. \\n\\nFor example, to connect to the Polygon Amoy testnet (a Circle test network):\\n\\n```ts\\nimport { toModularTransport } from '@circle-fin/modular-wallets-core'\\nimport { createPublicClient } from 'viem'\\nimport { polygonAmoy } from 'viem/chains'\\n\\nconst transport = toModularTransport(\\n  `${clientUrl}/polygonAmoy`,\\n  clientKey,\\n)\\n\\nconst client = createPublicClient({\\n  chain: polygonAmoy,\\n  transport,\\n})\\n```\\n\\n:::note\\nWhen calling `toModularTransport`, specify a supported network path. Circle's Modular Wallet service supports major EVM chains (Ethereum, Polygon, Base, Optimism, Arbitrum, etc., including their testnets). For example, use `${clientUrl}/baseSepolia` for Base Sepolia, `${clientUrl}/optimism` for Optimism, and so on.\\n:::\\n\\n## Create a Circle Smart Account\\n\\nWith the client ready and a passkey credential available, you can create the **Circle Smart Account**. This smart account is a contract wallet (an ERC-4337 & ERC-6900 compatible smart contract) controlled by the passkey. We'll transform the WebAuthn credential into a Viem account object and then generate the smart account:\\n\\n```ts\\nimport { toCircleSmartAccount } from '@circle-fin/modular-wallets-core'\\nimport { toWebAuthnAccount } from 'viem/account-abstraction'\\n\\nconst owner = toWebAuthnAccount({\\n  credential,\\n})\\n\\nconst account = await toCircleSmartAccount({\\n  client,\\n  owner,\\n})\\n```\\n\\n## Set up a Bundler Client\\n\\nTo send transactions from a smart account, we use an ERC-4337 **Bundler**. Viem provides a Bundler client that interfaces with bundler RPC endpoints. Using Circle's Modular transport, we can create a Bundler client that will forward User Operations to Circle's bundler.\\n\\n```ts\\nimport { createBundlerClient } from 'viem/account-abstraction'\\nimport { polygonAmoy } from 'viem/chains'\\n\\nconst bundlerClient = createBundlerClient({\\n  account,\\n  chain: polygonAmoy,\\n  transport,\\n})\\n```\\n\\n## Send a Gasless USDC Transaction\\n\\nFinally, let's send a token transfer from the smart account **without requiring the user to pay gas**. In this example, we'll transfer **1 USDC** on the test network to an arbitrary address. Circle's bundler and paymaster will sponsor the gas fees as long as a Gas Station policy is in place (on testnet, a default policy is usually already configured).\\n\\nWe will use the Circle SDK's helper to encode an ERC-20 transfer call and then send a User Operation via the bundler client:\\n\\n```ts\\nimport { encodeTransfer } from '@circle-fin/modular-wallets-core'\\nimport { parseUnits } from 'viem'\\n\\nconst usdcAddress = '0x41e94eb019c0762f9bfcf9fb1e58725bfb0e7582'\\n\\nconst hash = await bundlerClient.sendUserOperation({\\n  calls: [\\n    encodeTransfer(\\n      '0x{recipient}', \\n      usdcAddress, \\n      parseUnits('1', 6)\\n    )\\n  ],\\n  paymaster: true,\\n})\\n```\\n\\nThe bundler returns a User Operation `hash` for the submitted operation. You can then wait for the transaction to be included:\\n\\n```ts\\nconst { receipt } = await bundlerClient.waitForUserOperationReceipt({ hash: userOpHash })\\n```\\n\\n::::\\n\\nThat's it!\\n\\nYou have created a Circle Smart Account with a passkey and sent a gasless USDC transfer using Viem.\\n\\nThe Circle Modular Wallets SDK seamlessly handles the account abstraction flow – from passkey-based signing to sponsored gas payments – allowing you to build a user-friendly dApp without exposing the complexity of gas fees to your users.\\n\\n\\n## Example Apps\\n\\nThe Circle team has prepared working demos to help you get started quickly with Modular Wallets:\\n\\n* [Modular Wallet + Passkey (Replit)](https://replit.com/@buildoncircle/modular-wallet-passkey) – A simple web demo showcasing passkey login and gasless USDC transfer.  \\n* [Modular Wallets Web SDK Example (GitHub)](https://github.com/circlefin/modularwallets-web-sdk/tree/master/examples/circle-smart-account) – A full React implementation using Circle Smart Accounts, bundler, and paymaster.\\n\\nUse these as references when building or testing your own integration. \",\"document\":[{\"href\":\"/circle-usdc/guides/smart-account#circle-smart-account\",\"html\":\"</header>\\n\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#circle-smart-account\",\"isPage\":true,\"text\":\"\\n\",\"title\":\"Circle Smart Account\",\"titles\":[]},{\"href\":\"/circle-usdc/guides/smart-account#install\",\"html\":\"\\n<aside data-callout=\\\"info\\\"><p>This package &amp; guide is maintained by <a href=\\\"https://www.circle.com\\\">Circle</a>.</p></aside>\\n<p>Make sure to add <a href=\\\"https://developers.circle.com/w3s/modular-wallets\\\">Circle&#x27;s Modular Wallets</a> SDK to your project:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> install</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> @circle-fin/modular-wallets-core</span></span></code></pre>\\n<p>This package provides utilities for passkey authentication and smart account creation.</p>\\n\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#install\",\"isPage\":false,\"text\":\"\\nThis package &amp; guide is maintained by Circle.\\nMake sure to add Circle&#x27;s Modular Wallets SDK to your project:\\nnpm install @circle-fin/modular-wallets-core\\nThis package provides utilities for passkey authentication and smart account creation.\\n\",\"title\":\"Install\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#prerequisites\",\"html\":\"\\n<p>Before you start, make sure you have:</p>\\n<ul>\\n<li>Set up and retrieved your <strong>Client Key and Client URL</strong> <a href=\\\"https://developers.circle.com/w3s/modular-wallets-setup\\\">by following this step</a></li>\\n<li>Configured a domain for WebAuthn credential (Passkey) registration</li>\\n<li>Familiarize yourself with <a href=\\\"https://developers.circle.com/w3s/web3-services-api-client-keys-auth\\\">Circle&#x27;s API Key and Client Key authentication</a></li>\\n</ul>\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"2\\\">\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#prerequisites\",\"isPage\":false,\"text\":\"\\nBefore you start, make sure you have:\\n\\nSet up and retrieved your Client Key and Client URL by following this step\\nConfigured a domain for WebAuthn credential (Passkey) registration\\nFamiliarize yourself with Circle&#x27;s API Key and Client Key authentication\\n\\n\",\"title\":\"Prerequisites\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#create-a-passkey-credential\",\"html\":\"<p>First, register a new <strong>Passkey</strong> (WebAuthn credential) or use an existing one for your user.</p><p>The Circle SDK uses a <strong>Passkey server</strong> to handle WebAuthn registration and login.</p><p>We need to initialize a Passkey Transport with the Circle <strong>Client Key</strong> and <strong>Client URL</strong> (obtained from the Circle Modular Wallets console setup), then create a credential:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  toPasskeyTransport, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  toWebAuthnCredential, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  WebAuthnMode </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">} </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;@circle-fin/modular-wallets-core&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> clientKey</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;...&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> clientUrl</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;https://...&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> passkeyTransport</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> toPasskeyTransport</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(clientUrl, clientKey)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> credential</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> toWebAuthnCredential</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport: passkeyTransport,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  mode: WebAuthnMode.Register,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  username: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;user-example&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre><p>This will trigger the WebAuthn flow in the browser (e.g. biometric prompt) and yield a <code>credential</code> object for the passkey.</p></div><div data-depth=\\\"2\\\">\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#create-a-passkey-credential\",\"isPage\":false,\"text\":\"First, register a new Passkey (WebAuthn credential) or use an existing one for your user.The Circle SDK uses a Passkey server to handle WebAuthn registration and login.We need to initialize a Passkey Transport with the Circle Client Key and Client URL (obtained from the Circle Modular Wallets console setup), then create a credential:import { \\n  toPasskeyTransport, \\n  toWebAuthnCredential, \\n  WebAuthnMode \\n} from &#x27;@circle-fin/modular-wallets-core&#x27;\\n \\nconst clientKey = &#x27;...&#x27;\\nconst clientUrl = &#x27;https://...&#x27;\\n \\nconst passkeyTransport = toPasskeyTransport(clientUrl, clientKey)\\n \\nconst credential = await toWebAuthnCredential({\\n  transport: passkeyTransport,\\n  mode: WebAuthnMode.Register,\\n  username: &#x27;user-example&#x27;,\\n})This will trigger the WebAuthn flow in the browser (e.g. biometric prompt) and yield a credential object for the passkey.\",\"title\":\"Create a Passkey Credential\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#create-client\",\"html\":\"<p>Next, create a Viem <strong>Public Client</strong> configured to use Circle&#x27;s infrastructure.</p><p>Circle provides custom RPC endpoints (via the Client URL) for each supported network.</p><p>Use <code>toModularTransport</code> to get a Viem transport for your target chain, and then initialize the client.</p><p>For example, to connect to the Polygon Amoy testnet (a Circle test network):</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { toModularTransport } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;@circle-fin/modular-wallets-core&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createPublicClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { polygonAmoy } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> transport</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> toModularTransport</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">  `${</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">clientUrl</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}/polygonAmoy`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  clientKey,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> client</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createPublicClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: polygonAmoy,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre><aside data-callout=\\\"note\\\"><p>When calling <code>toModularTransport</code>, specify a supported network path. Circle&#x27;s Modular Wallet service supports major EVM chains (Ethereum, Polygon, Base, Optimism, Arbitrum, etc., including their testnets). For example, use <code>${clientUrl}/baseSepolia</code> for Base Sepolia, <code>${clientUrl}/optimism</code> for Optimism, and so on.</p></aside></div><div data-depth=\\\"2\\\">\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#create-client\",\"isPage\":false,\"text\":\"Next, create a Viem Public Client configured to use Circle&#x27;s infrastructure.Circle provides custom RPC endpoints (via the Client URL) for each supported network.Use toModularTransport to get a Viem transport for your target chain, and then initialize the client.For example, to connect to the Polygon Amoy testnet (a Circle test network):import { toModularTransport } from &#x27;@circle-fin/modular-wallets-core&#x27;\\nimport { createPublicClient } from &#x27;viem&#x27;\\nimport { polygonAmoy } from &#x27;viem/chains&#x27;\\n \\nconst transport = toModularTransport(\\n  `${clientUrl}/polygonAmoy`,\\n  clientKey,\\n)\\n \\nconst client = createPublicClient({\\n  chain: polygonAmoy,\\n  transport,\\n})When calling toModularTransport, specify a supported network path. Circle&#x27;s Modular Wallet service supports major EVM chains (Ethereum, Polygon, Base, Optimism, Arbitrum, etc., including their testnets). For example, use ${clientUrl}/baseSepolia for Base Sepolia, ${clientUrl}/optimism for Optimism, and so on.\",\"title\":\"Create Client\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#create-a-circle-smart-account\",\"html\":\"<p>With the client ready and a passkey credential available, you can create the <strong>Circle Smart Account</strong>. This smart account is a contract wallet (an ERC-4337 &amp; ERC-6900 compatible smart contract) controlled by the passkey. We&#x27;ll transform the WebAuthn credential into a Viem account object and then generate the smart account:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { toCircleSmartAccount } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;@circle-fin/modular-wallets-core&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { toWebAuthnAccount } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/account-abstraction&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> owner</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> toWebAuthnAccount</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  credential,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> account</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> toCircleSmartAccount</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  client,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  owner,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-depth=\\\"2\\\">\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#create-a-circle-smart-account\",\"isPage\":false,\"text\":\"With the client ready and a passkey credential available, you can create the Circle Smart Account. This smart account is a contract wallet (an ERC-4337 &amp; ERC-6900 compatible smart contract) controlled by the passkey. We&#x27;ll transform the WebAuthn credential into a Viem account object and then generate the smart account:import { toCircleSmartAccount } from &#x27;@circle-fin/modular-wallets-core&#x27;\\nimport { toWebAuthnAccount } from &#x27;viem/account-abstraction&#x27;\\n \\nconst owner = toWebAuthnAccount({\\n  credential,\\n})\\n \\nconst account = await toCircleSmartAccount({\\n  client,\\n  owner,\\n})\",\"title\":\"Create a Circle Smart Account\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#set-up-a-bundler-client\",\"html\":\"<p>To send transactions from a smart account, we use an ERC-4337 <strong>Bundler</strong>. Viem provides a Bundler client that interfaces with bundler RPC endpoints. Using Circle&#x27;s Modular transport, we can create a Bundler client that will forward User Operations to Circle&#x27;s bundler.</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createBundlerClient } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/account-abstraction&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { polygonAmoy } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem/chains&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> bundlerClient</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createBundlerClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  account,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  chain: polygonAmoy,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  transport,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre></div><div data-depth=\\\"2\\\">\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#set-up-a-bundler-client\",\"isPage\":false,\"text\":\"To send transactions from a smart account, we use an ERC-4337 Bundler. Viem provides a Bundler client that interfaces with bundler RPC endpoints. Using Circle&#x27;s Modular transport, we can create a Bundler client that will forward User Operations to Circle&#x27;s bundler.import { createBundlerClient } from &#x27;viem/account-abstraction&#x27;\\nimport { polygonAmoy } from &#x27;viem/chains&#x27;\\n \\nconst bundlerClient = createBundlerClient({\\n  account,\\n  chain: polygonAmoy,\\n  transport,\\n})\",\"title\":\"Set up a Bundler Client\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#send-a-gasless-usdc-transaction\",\"html\":\"<p>Finally, let&#x27;s send a token transfer from the smart account <strong>without requiring the user to pay gas</strong>. In this example, we&#x27;ll transfer <strong>1 USDC</strong> on the test network to an arbitrary address. Circle&#x27;s bundler and paymaster will sponsor the gas fees as long as a Gas Station policy is in place (on testnet, a default policy is usually already configured).</p><p>We will use the Circle SDK&#x27;s helper to encode an ERC-20 transfer call and then send a User Operation via the bundler client:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { encodeTransfer } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;@circle-fin/modular-wallets-core&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { parseUnits } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;viem&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> usdcAddress</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;0x41e94eb019c0762f9bfcf9fb1e58725bfb0e7582&#x27;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> hash</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bundlerClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">sendUserOperation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  calls: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">    encodeTransfer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      &#x27;0x{recipient}&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      usdcAddress, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">      parseUnits</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">6</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  paymaster: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre><p>The bundler returns a User Operation <code>hash</code> for the submitted operation. You can then wait for the transaction to be included:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">receipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> bundlerClient.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">waitForUserOperationReceipt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ hash: userOpHash })</span></span></code></pre></div></div>\\n<p>That&#x27;s it!</p>\\n<p>You have created a Circle Smart Account with a passkey and sent a gasless USDC transfer using Viem.</p>\\n<p>The Circle Modular Wallets SDK seamlessly handles the account abstraction flow – from passkey-based signing to sponsored gas payments – allowing you to build a user-friendly dApp without exposing the complexity of gas fees to your users.</p>\\n\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#send-a-gasless-usdc-transaction\",\"isPage\":false,\"text\":\"Finally, let&#x27;s send a token transfer from the smart account without requiring the user to pay gas. In this example, we&#x27;ll transfer 1 USDC on the test network to an arbitrary address. Circle&#x27;s bundler and paymaster will sponsor the gas fees as long as a Gas Station policy is in place (on testnet, a default policy is usually already configured).We will use the Circle SDK&#x27;s helper to encode an ERC-20 transfer call and then send a User Operation via the bundler client:import { encodeTransfer } from &#x27;@circle-fin/modular-wallets-core&#x27;\\nimport { parseUnits } from &#x27;viem&#x27;\\n \\nconst usdcAddress = &#x27;0x41e94eb019c0762f9bfcf9fb1e58725bfb0e7582&#x27;\\n \\nconst hash = await bundlerClient.sendUserOperation({\\n  calls: [\\n    encodeTransfer(\\n      &#x27;0x{recipient}&#x27;, \\n      usdcAddress, \\n      parseUnits(&#x27;1&#x27;, 6)\\n    )\\n  ],\\n  paymaster: true,\\n})The bundler returns a User Operation hash for the submitted operation. You can then wait for the transaction to be included:const { receipt } = await bundlerClient.waitForUserOperationReceipt({ hash: userOpHash })\\nThat&#x27;s it!\\nYou have created a Circle Smart Account with a passkey and sent a gasless USDC transfer using Viem.\\nThe Circle Modular Wallets SDK seamlessly handles the account abstraction flow – from passkey-based signing to sponsored gas payments – allowing you to build a user-friendly dApp without exposing the complexity of gas fees to your users.\\n\",\"title\":\"Send a Gasless USDC Transaction\",\"titles\":[\"Circle Smart Account\"]},{\"href\":\"/circle-usdc/guides/smart-account#example-apps\",\"html\":\"\\n<p>The Circle team has prepared working demos to help you get started quickly with Modular Wallets:</p>\\n<ul>\\n<li><a href=\\\"https://replit.com/@buildoncircle/modular-wallet-passkey\\\">Modular Wallet + Passkey (Replit)</a> – A simple web demo showcasing passkey login and gasless USDC transfer.</li>\\n<li><a href=\\\"https://github.com/circlefin/modularwallets-web-sdk/tree/master/examples/circle-smart-account\\\">Modular Wallets Web SDK Example (GitHub)</a> – A full React implementation using Circle Smart Accounts, bundler, and paymaster.</li>\\n</ul>\\n<p>Use these as references when building or testing your own integration.</p>\",\"id\":\"pages/circle-usdc/guides/smart-account.mdx#example-apps\",\"isPage\":false,\"text\":\"\\nThe Circle team has prepared working demos to help you get started quickly with Modular Wallets:\\n\\nModular Wallet + Passkey (Replit) – A simple web demo showcasing passkey login and gasless USDC transfer.\\nModular Wallets Web SDK Example (GitHub) – A full React implementation using Circle Smart Accounts, bundler, and paymaster.\\n\\nUse these as references when building or testing your own integration.\",\"title\":\"Example Apps\",\"titles\":[\"Circle Smart Account\"]}]}}"
