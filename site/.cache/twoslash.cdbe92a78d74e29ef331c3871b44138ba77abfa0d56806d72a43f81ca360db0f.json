"{\"value\":{\"code\":\"import { publicClient } from './client'\\n\\nconst filter = await publicClient.createContractEventFilter({ // [!code focus:99]\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: wagmiAbi,\\n  eventName: 'Transfer'\\n})\\nconst logs = await publicClient.getFilterChanges({ filter })\\n\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: any\",\"start\":47,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":62,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createContractEventFilter: <any, \\\"Transfer\\\", any, undefined, undefined, undefined>(args: any) => Promise<any>\",\"docs\":\"Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\\n\\n- Docs: https://viem.sh/docs/contract/createContractEventFilter\",\"tags\":[[\"param\",\"args - {@link CreateContractEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n})\"]],\"start\":75,\"length\":25,\"target\":\"createContractEventFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address: string\",\"start\":125,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: any\",\"start\":182,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"any\",\"start\":187,\"length\":8,\"target\":\"wagmiAbi\",\"line\":4,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) eventName: string\",\"start\":199,\"length\":9,\"target\":\"eventName\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const logs: `0x${string}`[] | Log<bigint, number, false, AbiEvent | undefined, undefined, Abi | readonly unknown[] | undefined, string | undefined>[]\",\"start\":230,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":243,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <FilterType, Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>(args: GetFilterChangesParameters<FilterType, Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":256,\"length\":16,\"target\":\"getFilterChanges\",\"line\":7,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<FilterType, Abi | readonly unknown[] | undefined, string | undefined, any, undefined, undefined, undefined>\",\"start\":275,\"length\":6,\"target\":\"filter\",\"line\":7,\"character\":51},{\"type\":\"tag\",\"name\":\"log\",\"start\":285,\"length\":0,\"text\":\"Output: [{ ... }, { ... }, { ... }]\",\"line\":9,\"character\":0}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[1128,1173],[0,843]],\"flagNotations\":[{\"type\":\"tag\",\"name\":\"log\",\"value\":\"Output: [{ ... }, { ... }, { ... }]\",\"start\":1128,\"end\":1173}],\"virtualFiles\":[{\"offset\":0,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":201,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":402,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":603,\"filename\":\"client.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/client.ts\",\"content\":\"// @filename: client.ts\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const publicClient = createPublicClient({\\n  chain: mainnet,\\n  transport: http()\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":804,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { publicClient } from './client'\\n\\nconst filter = await publicClient.createContractEventFilter({ // [!code focus:99]\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: wagmiAbi,\\n  eventName: 'Transfer'\\n})\\nconst logs = await publicClient.getFilterChanges({ filter })\\n// @log: Output: [{ ... }, { ... }, { ... }]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":9,\"length\":12,\"target\":\"publicClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"const filter: any\",\"start\":47,\"length\":6,\"target\":\"filter\",\"line\":2,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":62,\"length\":12,\"target\":\"publicClient\",\"line\":2,\"character\":21},{\"type\":\"hover\",\"text\":\"(property) createContractEventFilter: <any, \\\"Transfer\\\", any, undefined, undefined, undefined>(args: any) => Promise<any>\",\"docs\":\"Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\\n\\n- Docs: https://viem.sh/docs/contract/createContractEventFilter\",\"tags\":[[\"param\",\"args - {@link CreateContractEventFilterParameters}\"],[\"returns\",\"[`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\"],[\"example\",\"import { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n})\"]],\"start\":75,\"length\":25,\"target\":\"createContractEventFilter\",\"line\":2,\"character\":34},{\"type\":\"hover\",\"text\":\"(property) address: string\",\"start\":125,\"length\":7,\"target\":\"address\",\"line\":3,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) abi: any\",\"start\":182,\"length\":3,\"target\":\"abi\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"any\",\"start\":187,\"length\":8,\"target\":\"wagmiAbi\",\"line\":4,\"character\":7},{\"type\":\"hover\",\"text\":\"(property) eventName: string\",\"start\":199,\"length\":9,\"target\":\"eventName\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"const logs: `0x${string}`[] | Log<bigint, number, false, AbiEvent | undefined, undefined, Abi | readonly unknown[] | undefined, string | undefined>[]\",\"start\":230,\"length\":4,\"target\":\"logs\",\"line\":7,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) const publicClient: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport publicClient\",\"start\":243,\"length\":12,\"target\":\"publicClient\",\"line\":7,\"character\":19},{\"type\":\"hover\",\"text\":\"(property) getFilterChanges: <FilterType, Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>(args: GetFilterChangesParameters<FilterType, Abi | readonly unknown[] | undefined, string | undefined, undefined, undefined, undefined>) => Promise<...>\",\"docs\":\"Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\\n\\n- Docs: https://viem.sh/docs/actions/public/getFilterChanges\\n- JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\",\"tags\":[[\"remarks\",\"A Filter can be created from the following actions:\\n\\n- [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\\n- [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\\n- [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\\n- [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\\n\\nDepending on the type of filter, the return value will be different:\\n\\n- If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\\n- If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\\n- If the filter was created with `createBlockFilter`, it returns a list of block hashes.\"],[\"param\",\"args - {@link GetFilterChangesParameters}\"],[\"returns\",\"Logs or hashes. {@link GetFilterChangesReturnType}\"],[\"example\",\"// Blocks\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createBlockFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"],[\"example\",\"// Contract Events\\nimport { createPublicClient, http, parseAbi } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createContractEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\\n  eventName: 'Transfer',\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Raw Events\\nimport { createPublicClient, http, parseAbiItem } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createEventFilter({\\n  address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\\n  event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\\n})\\nconst logs = await client.getFilterChanges({ filter })\"],[\"example\",\"// Transactions\\nimport { createPublicClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\nconst filter = await client.createPendingTransactionFilter()\\nconst hashes = await client.getFilterChanges({ filter })\"]],\"start\":256,\"length\":16,\"target\":\"getFilterChanges\",\"line\":7,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) filter: Filter<FilterType, Abi | readonly unknown[] | undefined, string | undefined, any, undefined, undefined, undefined>\",\"start\":275,\"length\":6,\"target\":\"filter\",\"line\":7,\"character\":51}],\"tags\":[{\"type\":\"tag\",\"name\":\"log\",\"start\":285,\"length\":0,\"text\":\"Output: [{ ... }, { ... }, { ... }]\",\"line\":9,\"character\":0}]}}"
