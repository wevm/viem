name: Verify
on:
  workflow_call:
  workflow_dispatch:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Audit dependencies
        run: pnpm audit

      - name: Check repo
        run: pnpm check:repo

      - name: Check code
        run: pnpm biome check

  build:
    name: Build
    needs: check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Build
        run: pnpm build

      - name: Publint
        run: pnpm test:build

      - name: Check for unused files, dependencies, and exports
        run: pnpm knip --production

      # - name: Check size
      #   run: pnpm size

  types:
    name: Types
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 5
    strategy:
      matrix:
        version: ['5.7.2', '5.8.2', '5.9.2', 'latest']

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - run: pnpm i -d -w typescript@${{ matrix.version }}

      - name: Build contracts
        shell: bash
        run: pnpm contracts:build

      - name: Check types
        run: pnpm check:types

      - name: Bench types
        if: matrix.version != '5.0.4'
        run: pnpm bench:types

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    strategy:
      max-parallel: 3
      matrix:
        multicall: ['true', 'false']
        transport-mode: ['http', 'webSocket']
        shard: [1, 2, 3]
        total-shards: [3]
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Build contracts
        shell: bash
        run: pnpm contracts:build

      - name: Run tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: pnpm test:ci --shard=${{ matrix.shard }}/${{ matrix.total-shards }}
        env:
          VITE_ANVIL_FORK_URL: ${{ secrets.VITE_ANVIL_FORK_URL }}
          VITE_ANVIL_FORK_URL_OPTIMISM: ${{ secrets.VITE_ANVIL_FORK_URL_OPTIMISM }}
          VITE_ANVIL_FORK_URL_OPTIMISM_SEPOLIA: ${{ secrets.VITE_ANVIL_FORK_URL_OPTIMISM_SEPOLIA }}
          VITE_ANVIL_FORK_URL_SEPOLIA: ${{ secrets.VITE_ANVIL_FORK_URL_SEPOLIA }}
          VITE_ANVIL_FORK_URL_ZKSYNC: ${{ secrets.VITE_ANVIL_FORK_URL_ZKSYNC }}
          VITE_BATCH_MULTICALL: ${{ matrix.multicall }}
          VITE_NETWORK_TRANSPORT_MODE: ${{ matrix.transport-mode }}
          VITE_SHARD_ID: ${{ matrix.shard }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-envs:
    name: Test Environments
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        type: ['bun', 'node-22', 'node-latest', 'next', 'tsc', 'vite']
        include:
          - type: bun
            runtime: bun
          - type: node-22
            node-version: 22
            runtime: node
          - type: node-latest
            node-version: latest
            runtime: node
          - type: next
            runtime: next
          - type: tsc
            node-version: 22
            runtime: tsc
          - type: vite
            runtime: vite

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Set up foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Set up pnpm
        uses: wevm/actions/.github/actions/pnpm@main

      - name: Set up Bun
        if: ${{ matrix.runtime == 'bun' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.30

      - name: Set up Node
        if: ${{ matrix.node-version }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Playwright Browsers
        if: ${{ matrix.runtime == 'next' || matrix.runtime == 'vite' }}
        run: pnpx playwright@1.55.1 install --with-deps

      - name: Build
        run: pnpm build

      - name: Link
        run: pnpm install

      - name: Run tests
        run: pnpm test:env:${{ matrix.runtime }}

  vectors:
    name: Vectors
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Run test vectors
        shell: bash
        run: pnpm vectors

  wagmi:
    name: Wagmi
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        typescript-version: ['5.7.2', '5.8.2', '5.9.2', 'latest']

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with: 
          submodules: 'recursive'

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Set TypeScript version
        run: |
          pnpm install -D -w typescript@${{ matrix.typescript-version }}
          node -e "import fs from 'fs'; const p = JSON.parse(fs.readFileSync('./package.json', 'utf8')); p.pnpm = p.pnpm || {}; p.pnpm.overrides = p.pnpm.overrides || {}; p.pnpm.overrides.typescript = '${{ matrix.typescript-version }}'; fs.writeFileSync('package.json', JSON.stringify(p, null, 2));"
          pnpm install --no-frozen-lockfile

      - name: Setup wagmi
        uses: ./.github/actions/setup-wagmi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check types
        run: pnpm check:types
        working-directory: ./wagmi

      - name: Check build
        run: pnpm build
        working-directory: ./wagmi
